
DRONE_radiocomando_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3ec  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0810e690  0810e690  0001e690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ec90  0810ec90  0001ec90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ec98  0810ec98  0001ec98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810ec9c  0810ec9c  0001ec9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000248  10000000  0810eca0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000046c  10000248  0810eee8  00020248  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  100006b4  0810eee8  000206b4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001a08b  00000000  00000000  000202bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000031da  00000000  00000000  0003a346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001598  00000000  00000000  0003d520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001106  00000000  00000000  0003eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b9c1  00000000  00000000  0003fbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001cf67  00000000  00000000  0007b57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00186061  00000000  00000000  000984e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007228  00000000  00000000  0021e548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  00225770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000248 	.word	0x10000248
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810e674 	.word	0x0810e674

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000024c 	.word	0x1000024c
 81002dc:	0810e674 	.word	0x0810e674

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a6 	b.w	81010fc <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9e08      	ldr	r6, [sp, #32]
 8100e3a:	460d      	mov	r5, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	460f      	mov	r7, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4694      	mov	ip, r2
 8100e48:	d965      	bls.n	8100f16 <__udivmoddi4+0xe2>
 8100e4a:	fab2 f382 	clz	r3, r2
 8100e4e:	b143      	cbz	r3, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8100e54:	f1c3 0220 	rsb	r2, r3, #32
 8100e58:	409f      	lsls	r7, r3
 8100e5a:	fa20 f202 	lsr.w	r2, r0, r2
 8100e5e:	4317      	orrs	r7, r2
 8100e60:	409c      	lsls	r4, r3
 8100e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8100e66:	fa1f f58c 	uxth.w	r5, ip
 8100e6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8100e6e:	0c22      	lsrs	r2, r4, #16
 8100e70:	fb0e 7711 	mls	r7, lr, r1, r7
 8100e74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8100e78:	fb01 f005 	mul.w	r0, r1, r5
 8100e7c:	4290      	cmp	r0, r2
 8100e7e:	d90a      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e80:	eb1c 0202 	adds.w	r2, ip, r2
 8100e84:	f101 37ff 	add.w	r7, r1, #4294967295
 8100e88:	f080 811c 	bcs.w	81010c4 <__udivmoddi4+0x290>
 8100e8c:	4290      	cmp	r0, r2
 8100e8e:	f240 8119 	bls.w	81010c4 <__udivmoddi4+0x290>
 8100e92:	3902      	subs	r1, #2
 8100e94:	4462      	add	r2, ip
 8100e96:	1a12      	subs	r2, r2, r0
 8100e98:	b2a4      	uxth	r4, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100ea6:	fb00 f505 	mul.w	r5, r0, r5
 8100eaa:	42a5      	cmp	r5, r4
 8100eac:	d90a      	bls.n	8100ec4 <__udivmoddi4+0x90>
 8100eae:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8100eb6:	f080 8107 	bcs.w	81010c8 <__udivmoddi4+0x294>
 8100eba:	42a5      	cmp	r5, r4
 8100ebc:	f240 8104 	bls.w	81010c8 <__udivmoddi4+0x294>
 8100ec0:	4464      	add	r4, ip
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec8:	1b64      	subs	r4, r4, r5
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11e      	cbz	r6, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40dc      	lsrs	r4, r3
 8100ed0:	2300      	movs	r3, #0
 8100ed2:	e9c6 4300 	strd	r4, r3, [r6]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d908      	bls.n	8100ef0 <__udivmoddi4+0xbc>
 8100ede:	2e00      	cmp	r6, #0
 8100ee0:	f000 80ed 	beq.w	81010be <__udivmoddi4+0x28a>
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	e9c6 0500 	strd	r0, r5, [r6]
 8100eea:	4608      	mov	r0, r1
 8100eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef0:	fab3 f183 	clz	r1, r3
 8100ef4:	2900      	cmp	r1, #0
 8100ef6:	d149      	bne.n	8100f8c <__udivmoddi4+0x158>
 8100ef8:	42ab      	cmp	r3, r5
 8100efa:	d302      	bcc.n	8100f02 <__udivmoddi4+0xce>
 8100efc:	4282      	cmp	r2, r0
 8100efe:	f200 80f8 	bhi.w	81010f2 <__udivmoddi4+0x2be>
 8100f02:	1a84      	subs	r4, r0, r2
 8100f04:	eb65 0203 	sbc.w	r2, r5, r3
 8100f08:	2001      	movs	r0, #1
 8100f0a:	4617      	mov	r7, r2
 8100f0c:	2e00      	cmp	r6, #0
 8100f0e:	d0e2      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	e9c6 4700 	strd	r4, r7, [r6]
 8100f14:	e7df      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f16:	b902      	cbnz	r2, 8100f1a <__udivmoddi4+0xe6>
 8100f18:	deff      	udf	#255	; 0xff
 8100f1a:	fab2 f382 	clz	r3, r2
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	f040 8090 	bne.w	8101044 <__udivmoddi4+0x210>
 8100f24:	1a8a      	subs	r2, r1, r2
 8100f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f2a:	fa1f fe8c 	uxth.w	lr, ip
 8100f2e:	2101      	movs	r1, #1
 8100f30:	fbb2 f5f7 	udiv	r5, r2, r7
 8100f34:	fb07 2015 	mls	r0, r7, r5, r2
 8100f38:	0c22      	lsrs	r2, r4, #16
 8100f3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100f3e:	fb0e f005 	mul.w	r0, lr, r5
 8100f42:	4290      	cmp	r0, r2
 8100f44:	d908      	bls.n	8100f58 <__udivmoddi4+0x124>
 8100f46:	eb1c 0202 	adds.w	r2, ip, r2
 8100f4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8100f4e:	d202      	bcs.n	8100f56 <__udivmoddi4+0x122>
 8100f50:	4290      	cmp	r0, r2
 8100f52:	f200 80cb 	bhi.w	81010ec <__udivmoddi4+0x2b8>
 8100f56:	4645      	mov	r5, r8
 8100f58:	1a12      	subs	r2, r2, r0
 8100f5a:	b2a4      	uxth	r4, r4
 8100f5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8100f60:	fb07 2210 	mls	r2, r7, r0, r2
 8100f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100f68:	fb0e fe00 	mul.w	lr, lr, r0
 8100f6c:	45a6      	cmp	lr, r4
 8100f6e:	d908      	bls.n	8100f82 <__udivmoddi4+0x14e>
 8100f70:	eb1c 0404 	adds.w	r4, ip, r4
 8100f74:	f100 32ff 	add.w	r2, r0, #4294967295
 8100f78:	d202      	bcs.n	8100f80 <__udivmoddi4+0x14c>
 8100f7a:	45a6      	cmp	lr, r4
 8100f7c:	f200 80bb 	bhi.w	81010f6 <__udivmoddi4+0x2c2>
 8100f80:	4610      	mov	r0, r2
 8100f82:	eba4 040e 	sub.w	r4, r4, lr
 8100f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100f8a:	e79f      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f8c:	f1c1 0720 	rsb	r7, r1, #32
 8100f90:	408b      	lsls	r3, r1
 8100f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8100f9a:	fa05 f401 	lsl.w	r4, r5, r1
 8100f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8100fa2:	40fd      	lsrs	r5, r7
 8100fa4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fa8:	4323      	orrs	r3, r4
 8100faa:	fbb5 f8f9 	udiv	r8, r5, r9
 8100fae:	fa1f fe8c 	uxth.w	lr, ip
 8100fb2:	fb09 5518 	mls	r5, r9, r8, r5
 8100fb6:	0c1c      	lsrs	r4, r3, #16
 8100fb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100fbc:	fb08 f50e 	mul.w	r5, r8, lr
 8100fc0:	42a5      	cmp	r5, r4
 8100fc2:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc6:	fa00 f001 	lsl.w	r0, r0, r1
 8100fca:	d90b      	bls.n	8100fe4 <__udivmoddi4+0x1b0>
 8100fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8100fd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fd4:	f080 8088 	bcs.w	81010e8 <__udivmoddi4+0x2b4>
 8100fd8:	42a5      	cmp	r5, r4
 8100fda:	f240 8085 	bls.w	81010e8 <__udivmoddi4+0x2b4>
 8100fde:	f1a8 0802 	sub.w	r8, r8, #2
 8100fe2:	4464      	add	r4, ip
 8100fe4:	1b64      	subs	r4, r4, r5
 8100fe6:	b29d      	uxth	r5, r3
 8100fe8:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fec:	fb09 4413 	mls	r4, r9, r3, r4
 8100ff0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100ff4:	fb03 fe0e 	mul.w	lr, r3, lr
 8100ff8:	45a6      	cmp	lr, r4
 8100ffa:	d908      	bls.n	810100e <__udivmoddi4+0x1da>
 8100ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8101000:	f103 35ff 	add.w	r5, r3, #4294967295
 8101004:	d26c      	bcs.n	81010e0 <__udivmoddi4+0x2ac>
 8101006:	45a6      	cmp	lr, r4
 8101008:	d96a      	bls.n	81010e0 <__udivmoddi4+0x2ac>
 810100a:	3b02      	subs	r3, #2
 810100c:	4464      	add	r4, ip
 810100e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8101012:	fba3 9502 	umull	r9, r5, r3, r2
 8101016:	eba4 040e 	sub.w	r4, r4, lr
 810101a:	42ac      	cmp	r4, r5
 810101c:	46c8      	mov	r8, r9
 810101e:	46ae      	mov	lr, r5
 8101020:	d356      	bcc.n	81010d0 <__udivmoddi4+0x29c>
 8101022:	d053      	beq.n	81010cc <__udivmoddi4+0x298>
 8101024:	b156      	cbz	r6, 810103c <__udivmoddi4+0x208>
 8101026:	ebb0 0208 	subs.w	r2, r0, r8
 810102a:	eb64 040e 	sbc.w	r4, r4, lr
 810102e:	fa04 f707 	lsl.w	r7, r4, r7
 8101032:	40ca      	lsrs	r2, r1
 8101034:	40cc      	lsrs	r4, r1
 8101036:	4317      	orrs	r7, r2
 8101038:	e9c6 7400 	strd	r7, r4, [r6]
 810103c:	4618      	mov	r0, r3
 810103e:	2100      	movs	r1, #0
 8101040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101044:	f1c3 0120 	rsb	r1, r3, #32
 8101048:	fa02 fc03 	lsl.w	ip, r2, r3
 810104c:	fa20 f201 	lsr.w	r2, r0, r1
 8101050:	fa25 f101 	lsr.w	r1, r5, r1
 8101054:	409d      	lsls	r5, r3
 8101056:	432a      	orrs	r2, r5
 8101058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810105c:	fa1f fe8c 	uxth.w	lr, ip
 8101060:	fbb1 f0f7 	udiv	r0, r1, r7
 8101064:	fb07 1510 	mls	r5, r7, r0, r1
 8101068:	0c11      	lsrs	r1, r2, #16
 810106a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 810106e:	fb00 f50e 	mul.w	r5, r0, lr
 8101072:	428d      	cmp	r5, r1
 8101074:	fa04 f403 	lsl.w	r4, r4, r3
 8101078:	d908      	bls.n	810108c <__udivmoddi4+0x258>
 810107a:	eb1c 0101 	adds.w	r1, ip, r1
 810107e:	f100 38ff 	add.w	r8, r0, #4294967295
 8101082:	d22f      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 8101084:	428d      	cmp	r5, r1
 8101086:	d92d      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 8101088:	3802      	subs	r0, #2
 810108a:	4461      	add	r1, ip
 810108c:	1b49      	subs	r1, r1, r5
 810108e:	b292      	uxth	r2, r2
 8101090:	fbb1 f5f7 	udiv	r5, r1, r7
 8101094:	fb07 1115 	mls	r1, r7, r5, r1
 8101098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810109c:	fb05 f10e 	mul.w	r1, r5, lr
 81010a0:	4291      	cmp	r1, r2
 81010a2:	d908      	bls.n	81010b6 <__udivmoddi4+0x282>
 81010a4:	eb1c 0202 	adds.w	r2, ip, r2
 81010a8:	f105 38ff 	add.w	r8, r5, #4294967295
 81010ac:	d216      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 81010ae:	4291      	cmp	r1, r2
 81010b0:	d914      	bls.n	81010dc <__udivmoddi4+0x2a8>
 81010b2:	3d02      	subs	r5, #2
 81010b4:	4462      	add	r2, ip
 81010b6:	1a52      	subs	r2, r2, r1
 81010b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81010bc:	e738      	b.n	8100f30 <__udivmoddi4+0xfc>
 81010be:	4631      	mov	r1, r6
 81010c0:	4630      	mov	r0, r6
 81010c2:	e708      	b.n	8100ed6 <__udivmoddi4+0xa2>
 81010c4:	4639      	mov	r1, r7
 81010c6:	e6e6      	b.n	8100e96 <__udivmoddi4+0x62>
 81010c8:	4610      	mov	r0, r2
 81010ca:	e6fb      	b.n	8100ec4 <__udivmoddi4+0x90>
 81010cc:	4548      	cmp	r0, r9
 81010ce:	d2a9      	bcs.n	8101024 <__udivmoddi4+0x1f0>
 81010d0:	ebb9 0802 	subs.w	r8, r9, r2
 81010d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 81010d8:	3b01      	subs	r3, #1
 81010da:	e7a3      	b.n	8101024 <__udivmoddi4+0x1f0>
 81010dc:	4645      	mov	r5, r8
 81010de:	e7ea      	b.n	81010b6 <__udivmoddi4+0x282>
 81010e0:	462b      	mov	r3, r5
 81010e2:	e794      	b.n	810100e <__udivmoddi4+0x1da>
 81010e4:	4640      	mov	r0, r8
 81010e6:	e7d1      	b.n	810108c <__udivmoddi4+0x258>
 81010e8:	46d0      	mov	r8, sl
 81010ea:	e77b      	b.n	8100fe4 <__udivmoddi4+0x1b0>
 81010ec:	3d02      	subs	r5, #2
 81010ee:	4462      	add	r2, ip
 81010f0:	e732      	b.n	8100f58 <__udivmoddi4+0x124>
 81010f2:	4608      	mov	r0, r1
 81010f4:	e70a      	b.n	8100f0c <__udivmoddi4+0xd8>
 81010f6:	4464      	add	r4, ip
 81010f8:	3802      	subs	r0, #2
 81010fa:	e742      	b.n	8100f82 <__udivmoddi4+0x14e>

081010fc <__aeabi_idiv0>:
 81010fc:	4770      	bx	lr
 81010fe:	bf00      	nop

08101100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101100:	b480      	push	{r7}
 8101102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101104:	4b09      	ldr	r3, [pc, #36]	; (810112c <SystemInit+0x2c>)
 8101106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810110a:	4a08      	ldr	r2, [pc, #32]	; (810112c <SystemInit+0x2c>)
 810110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101114:	4b05      	ldr	r3, [pc, #20]	; (810112c <SystemInit+0x2c>)
 8101116:	691b      	ldr	r3, [r3, #16]
 8101118:	4a04      	ldr	r2, [pc, #16]	; (810112c <SystemInit+0x2c>)
 810111a:	f043 0310 	orr.w	r3, r3, #16
 810111e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101120:	bf00      	nop
 8101122:	46bd      	mov	sp, r7
 8101124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101128:	4770      	bx	lr
 810112a:	bf00      	nop
 810112c:	e000ed00 	.word	0xe000ed00

08101130 <bno055_assignI2C>:
float eulerScale = 16;       // Scala per l'angolo di Eulero
float quaScale = (1<<14);    // Scala per la lettura della quaternion


void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) //Associa un'interfaccia I2C al driver
{
 8101130:	b480      	push	{r7}
 8101132:	b083      	sub	sp, #12
 8101134:	af00      	add	r7, sp, #0
 8101136:	6078      	str	r0, [r7, #4]
	_bno055_i2c_port = hi2c_device;
 8101138:	4a04      	ldr	r2, [pc, #16]	; (810114c <bno055_assignI2C+0x1c>)
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	6013      	str	r3, [r2, #0]
}
 810113e:	bf00      	nop
 8101140:	370c      	adds	r7, #12
 8101142:	46bd      	mov	sp, r7
 8101144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101148:	4770      	bx	lr
 810114a:	bf00      	nop
 810114c:	10000264 	.word	0x10000264

08101150 <bno055_delay>:

void bno055_delay(uint16_t ms)
{
 8101150:	b580      	push	{r7, lr}
 8101152:	b082      	sub	sp, #8
 8101154:	af00      	add	r7, sp, #0
 8101156:	4603      	mov	r3, r0
 8101158:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 810115a:	88fb      	ldrh	r3, [r7, #6]
 810115c:	4618      	mov	r0, r3
 810115e:	f002 fa15 	bl	810358c <HAL_Delay>
}
 8101162:	bf00      	nop
 8101164:	3708      	adds	r7, #8
 8101166:	46bd      	mov	sp, r7
 8101168:	bd80      	pop	{r7, pc}
	...

0810116c <bno055_readData>:
//Argomenti:
// reg = indirizzo del registro che si vuole leggere nel BNO055
// puntatore ad un buffer (array) -> probabilmente una parte del registro dedicata a lettura/scrittura del dato
// lenght = Numero di byte da leggere dal registro specificato.
void bno055_readData(uint8_t reg, uint8_t *buffer, uint8_t length)
{
 810116c:	b590      	push	{r4, r7, lr}
 810116e:	b089      	sub	sp, #36	; 0x24
 8101170:	af04      	add	r7, sp, #16
 8101172:	4603      	mov	r3, r0
 8101174:	6039      	str	r1, [r7, #0]
 8101176:	71fb      	strb	r3, [r7, #7]
 8101178:	4613      	mov	r3, r2
 810117a:	71bb      	strb	r3, [r7, #6]
    // Indirizzo del dispositivo con bit di scrittura impostato
    uint16_t dev_addr = BNO055_I2C_ADDR << 1;
 810117c:	2350      	movs	r3, #80	; 0x50
 810117e:	81fb      	strh	r3, [r7, #14]
    // Sposta l'indirizzo di 1 bit verso sinistra
    // Il tipo di operazione (di lettura o scrittura) non deve essere specificato esplicitamente perché è gestito automaticamente dalla libreria HAL.
    // poichè in I2C il bit meno significativo (LSB) dell'indirizzo è riservato per indicare se si sta leggendo (1) o scrivendo (0) al dispositivo.

    // Legge i dati utilizzando la funzione HAL per la memoria I2C
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read
 8101180:	4b0e      	ldr	r3, [pc, #56]	; (81011bc <bno055_readData+0x50>)
 8101182:	6818      	ldr	r0, [r3, #0]
 8101184:	79fb      	ldrb	r3, [r7, #7]
 8101186:	b29a      	uxth	r2, r3
 8101188:	79bb      	ldrb	r3, [r7, #6]
 810118a:	b29b      	uxth	r3, r3
 810118c:	89f9      	ldrh	r1, [r7, #14]
 810118e:	f04f 34ff 	mov.w	r4, #4294967295
 8101192:	9402      	str	r4, [sp, #8]
 8101194:	9301      	str	r3, [sp, #4]
 8101196:	683b      	ldr	r3, [r7, #0]
 8101198:	9300      	str	r3, [sp, #0]
 810119a:	2301      	movs	r3, #1
 810119c:	f002 feca 	bl	8103f34 <HAL_I2C_Mem_Read>
 81011a0:	4603      	mov	r3, r0
 81011a2:	737b      	strb	r3, [r7, #13]
        buffer,            // Buffer in cui salvare i dati
        length,            // Numero di byte da leggere
        HAL_MAX_DELAY      // Timeout massimo
    );

    if (status != HAL_OK) {
 81011a4:	7b7b      	ldrb	r3, [r7, #13]
 81011a6:	2b00      	cmp	r3, #0
 81011a8:	d004      	beq.n	81011b4 <bno055_readData+0x48>
        printf("Errore nella lettura del registro 0x%02X\n", reg);
 81011aa:	79fb      	ldrb	r3, [r7, #7]
 81011ac:	4619      	mov	r1, r3
 81011ae:	4804      	ldr	r0, [pc, #16]	; (81011c0 <bno055_readData+0x54>)
 81011b0:	f009 fca8 	bl	810ab04 <iprintf>
    }
}
 81011b4:	bf00      	nop
 81011b6:	3714      	adds	r7, #20
 81011b8:	46bd      	mov	sp, r7
 81011ba:	bd90      	pop	{r4, r7, pc}
 81011bc:	10000264 	.word	0x10000264
 81011c0:	0810e690 	.word	0x0810e690

081011c4 <bno055_writeData>:


// Funzione per scrivere un valore in un registro specifico del BNO055
void bno055_writeData(uint8_t reg, uint8_t value)
{
 81011c4:	b580      	push	{r7, lr}
 81011c6:	b088      	sub	sp, #32
 81011c8:	af04      	add	r7, sp, #16
 81011ca:	4603      	mov	r3, r0
 81011cc:	460a      	mov	r2, r1
 81011ce:	71fb      	strb	r3, [r7, #7]
 81011d0:	4613      	mov	r3, r2
 81011d2:	71bb      	strb	r3, [r7, #6]
    uint16_t dev_addr = BNO055_I2C_ADDR << 1;
 81011d4:	2350      	movs	r3, #80	; 0x50
 81011d6:	81fb      	strh	r3, [r7, #14]

    // Scrive il dato utilizzando la funzione HAL per la memoria I2C
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write
 81011d8:	4b0e      	ldr	r3, [pc, #56]	; (8101214 <bno055_writeData+0x50>)
 81011da:	6818      	ldr	r0, [r3, #0]
 81011dc:	79fb      	ldrb	r3, [r7, #7]
 81011de:	b29a      	uxth	r2, r3
 81011e0:	89f9      	ldrh	r1, [r7, #14]
 81011e2:	f04f 33ff 	mov.w	r3, #4294967295
 81011e6:	9302      	str	r3, [sp, #8]
 81011e8:	2301      	movs	r3, #1
 81011ea:	9301      	str	r3, [sp, #4]
 81011ec:	1dbb      	adds	r3, r7, #6
 81011ee:	9300      	str	r3, [sp, #0]
 81011f0:	2301      	movs	r3, #1
 81011f2:	f002 fd8b 	bl	8103d0c <HAL_I2C_Mem_Write>
 81011f6:	4603      	mov	r3, r0
 81011f8:	737b      	strb	r3, [r7, #13]
        &value,            // Puntatore al dato da scrivere
        1,                 // Numero di byte da scrivere (il sensore BNO055 è progettato per scrivere un byte alla volta nei suoi registri)
        HAL_MAX_DELAY
    );

    if (status != HAL_OK) {
 81011fa:	7b7b      	ldrb	r3, [r7, #13]
 81011fc:	2b00      	cmp	r3, #0
 81011fe:	d004      	beq.n	810120a <bno055_writeData+0x46>
        printf("Errore nella scrittura del registro 0x%02X\n", reg);
 8101200:	79fb      	ldrb	r3, [r7, #7]
 8101202:	4619      	mov	r1, r3
 8101204:	4804      	ldr	r0, [pc, #16]	; (8101218 <bno055_writeData+0x54>)
 8101206:	f009 fc7d 	bl	810ab04 <iprintf>
    }
}
 810120a:	bf00      	nop
 810120c:	3710      	adds	r7, #16
 810120e:	46bd      	mov	sp, r7
 8101210:	bd80      	pop	{r7, pc}
 8101212:	bf00      	nop
 8101214:	10000264 	.word	0x10000264
 8101218:	0810e6bc 	.word	0x0810e6bc

0810121c <bno055_setPage>:


// Funzione per impostare la pagina di configurazione del BNO055
void bno055_setPage(uint8_t page)
{
 810121c:	b580      	push	{r7, lr}
 810121e:	b082      	sub	sp, #8
 8101220:	af00      	add	r7, sp, #0
 8101222:	4603      	mov	r3, r0
 8101224:	71fb      	strb	r3, [r7, #7]
    // Scrive il valore della pagina nel registro PAGE_ID
    bno055_writeData(BNO055_PAGE_ID, page);
 8101226:	79fb      	ldrb	r3, [r7, #7]
 8101228:	4619      	mov	r1, r3
 810122a:	2007      	movs	r0, #7
 810122c:	f7ff ffca 	bl	81011c4 <bno055_writeData>
}
 8101230:	bf00      	nop
 8101232:	3708      	adds	r7, #8
 8101234:	46bd      	mov	sp, r7
 8101236:	bd80      	pop	{r7, pc}

08101238 <bno055_reset>:


void bno055_reset(void) //Soft Reset command
{
 8101238:	b580      	push	{r7, lr}
 810123a:	af00      	add	r7, sp, #0
    bno055_writeData(BNO055_SYS_TRIGGER, BNO055_VECTOR_QUATERNION); //L'indirizzo del registro System Trigger per resettare il registro del quaternione
 810123c:	2120      	movs	r1, #32
 810123e:	203f      	movs	r0, #63	; 0x3f
 8101240:	f7ff ffc0 	bl	81011c4 <bno055_writeData>
    bno055_delay(650); // Attendi che il reset sia completato
 8101244:	f240 208a 	movw	r0, #650	; 0x28a
 8101248:	f7ff ff82 	bl	8101150 <bno055_delay>
}
 810124c:	bf00      	nop
 810124e:	bd80      	pop	{r7, pc}

08101250 <bno055_setOperationMode>:


void bno055_setOperationMode(bno055_opmode_t mode)//funzione che imposta la modalità operativa del sensore
{
 8101250:	b580      	push	{r7, lr}
 8101252:	b082      	sub	sp, #8
 8101254:	af00      	add	r7, sp, #0
 8101256:	4603      	mov	r3, r0
 8101258:	71fb      	strb	r3, [r7, #7]
    bno055_writeData(BNO055_OPR_MODE, mode);
 810125a:	79fb      	ldrb	r3, [r7, #7]
 810125c:	4619      	mov	r1, r3
 810125e:	203d      	movs	r0, #61	; 0x3d
 8101260:	f7ff ffb0 	bl	81011c4 <bno055_writeData>
    if (mode == BNO055_OPERATION_MODE_CONFIG)
 8101264:	79fb      	ldrb	r3, [r7, #7]
 8101266:	2b00      	cmp	r3, #0
 8101268:	d103      	bne.n	8101272 <bno055_setOperationMode+0x22>
    {
        bno055_delay(19); //Delay maggiore per la modalità iniziale di configurazione
 810126a:	2013      	movs	r0, #19
 810126c:	f7ff ff70 	bl	8101150 <bno055_delay>
    }
    else
    {
        bno055_delay(7);
    }
}
 8101270:	e002      	b.n	8101278 <bno055_setOperationMode+0x28>
        bno055_delay(7);
 8101272:	2007      	movs	r0, #7
 8101274:	f7ff ff6c 	bl	8101150 <bno055_delay>
}
 8101278:	bf00      	nop
 810127a:	3708      	adds	r7, #8
 810127c:	46bd      	mov	sp, r7
 810127e:	bd80      	pop	{r7, pc}

08101280 <bno055_setOperationModeConfig>:


// Funzione per impostare il sensore in modalità di configurazione
void bno055_setOperationModeConfig() {
 8101280:	b580      	push	{r7, lr}
 8101282:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG); //Ritardo maggiore
 8101284:	2000      	movs	r0, #0
 8101286:	f7ff ffe3 	bl	8101250 <bno055_setOperationMode>
}
 810128a:	bf00      	nop
 810128c:	bd80      	pop	{r7, pc}

0810128e <bno055_setOperationModeNDOF>:


// Funzione per impostare il sensore in modalità NDOF
void bno055_setOperationModeNDOF() {
 810128e:	b580      	push	{r7, lr}
 8101290:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8101292:	200c      	movs	r0, #12
 8101294:	f7ff ffdc 	bl	8101250 <bno055_setOperationMode>
}
 8101298:	bf00      	nop
 810129a:	bd80      	pop	{r7, pc}

0810129c <bno055_init>:


void bno055_init() //funzione utilizzata per inizializzare il sensore BNO055
{
 810129c:	b580      	push	{r7, lr}
 810129e:	b082      	sub	sp, #8
 81012a0:	af00      	add	r7, sp, #0
    bno055_reset();
 81012a2:	f7ff ffc9 	bl	8101238 <bno055_reset>

    uint8_t id = 0;
 81012a6:	2300      	movs	r3, #0
 81012a8:	71fb      	strb	r3, [r7, #7]
    bno055_readData(BNO055_CHIP_ID, &id, 1);
 81012aa:	1dfb      	adds	r3, r7, #7
 81012ac:	2201      	movs	r2, #1
 81012ae:	4619      	mov	r1, r3
 81012b0:	2000      	movs	r0, #0
 81012b2:	f7ff ff5b 	bl	810116c <bno055_readData>
    if (id != BNO055_CHIP_ID) {
 81012b6:	79fb      	ldrb	r3, [r7, #7]
 81012b8:	2b00      	cmp	r3, #0
 81012ba:	d004      	beq.n	81012c6 <bno055_init+0x2a>
        printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 81012bc:	79fb      	ldrb	r3, [r7, #7]
 81012be:	4619      	mov	r1, r3
 81012c0:	4809      	ldr	r0, [pc, #36]	; (81012e8 <bno055_init+0x4c>)
 81012c2:	f009 fc1f 	bl	810ab04 <iprintf>
    }
    //Imposta la pagina 0, poiché il BNO055 utilizza una struttura di registri a pagine
    bno055_setPage(0);
 81012c6:	2000      	movs	r0, #0
 81012c8:	f7ff ffa8 	bl	810121c <bno055_setPage>
    bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81012cc:	2100      	movs	r1, #0
 81012ce:	203f      	movs	r0, #63	; 0x3f
 81012d0:	f7ff ff78 	bl	81011c4 <bno055_writeData>

    // Select BNO055 config mode
    //Mette il chip in modalità di configurazione, necessaria per modificare alcune impostazioni o inizializzarlo
    bno055_setOperationModeConfig();
 81012d4:	f7ff ffd4 	bl	8101280 <bno055_setOperationModeConfig>
    bno055_delay(10);
 81012d8:	200a      	movs	r0, #10
 81012da:	f7ff ff39 	bl	8101150 <bno055_delay>
}
 81012de:	bf00      	nop
 81012e0:	3708      	adds	r7, #8
 81012e2:	46bd      	mov	sp, r7
 81012e4:	bd80      	pop	{r7, pc}
 81012e6:	bf00      	nop
 81012e8:	0810e6e8 	.word	0x0810e6e8

081012ec <bno055_getVector>:


bno055_vector_t bno055_getVector(uint8_t vec)
{
 81012ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81012f0:	b09e      	sub	sp, #120	; 0x78
 81012f2:	af00      	add	r7, sp, #0
 81012f4:	4603      	mov	r3, r0
 81012f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bno055_setPage(0);
 81012fa:	2000      	movs	r0, #0
 81012fc:	f7ff ff8e 	bl	810121c <bno055_setPage>
    uint8_t buffer[8];  // I quaternioni richiedono 8 byte

    if (vec == BNO055_VECTOR_QUATERNION)
 8101300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101304:	2b20      	cmp	r3, #32
 8101306:	d108      	bne.n	810131a <bno055_getVector+0x2e>
    {
        bno055_readData(vec, buffer, 8);
 8101308:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810130c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101310:	2208      	movs	r2, #8
 8101312:	4618      	mov	r0, r3
 8101314:	f7ff ff2a 	bl	810116c <bno055_readData>
 8101318:	e007      	b.n	810132a <bno055_getVector+0x3e>
    } else
    {
        bno055_readData(vec, buffer, 6);
 810131a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810131e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101322:	2206      	movs	r2, #6
 8101324:	4618      	mov	r0, r3
 8101326:	f7ff ff21 	bl	810116c <bno055_readData>
    }

    double scale = 1;
 810132a:	f04f 0200 	mov.w	r2, #0
 810132e:	4b6c      	ldr	r3, [pc, #432]	; (81014e0 <bno055_getVector+0x1f4>)
 8101330:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

    //BNO055_VECTOR_ACCELEROMETER... sono definizioni preimpostate (costanti)
    //che rappresentano indirizzi specifici dei registri dell'IMU BNO055
    //In base al tipo di dato gli associa una scala (costante) che identifica una certa unità di misura
    //Unità di misura di: accelerazione, velocità angolare, gradi (per gli angoli di Eulero)
    if (vec == BNO055_MAG_DATA_X_LSB) //Misura il campo magnetico in micro Tesla
 8101334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101338:	2b0e      	cmp	r3, #14
 810133a:	d109      	bne.n	8101350 <bno055_getVector+0x64>
    {
        scale = magScale;
 810133c:	4b69      	ldr	r3, [pc, #420]	; (81014e4 <bno055_getVector+0x1f8>)
 810133e:	681b      	ldr	r3, [r3, #0]
 8101340:	4618      	mov	r0, r3
 8101342:	f7ff f989 	bl	8100658 <__aeabi_f2d>
 8101346:	4602      	mov	r2, r0
 8101348:	460b      	mov	r3, r1
 810134a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810134e:	e03e      	b.n	81013ce <bno055_getVector+0xe2>
    } else if (vec == BNO055_ACC_DATA_X_LSB ||
 8101350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101354:	2b08      	cmp	r3, #8
 8101356:	d007      	beq.n	8101368 <bno055_getVector+0x7c>
 8101358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810135c:	2b28      	cmp	r3, #40	; 0x28
 810135e:	d003      	beq.n	8101368 <bno055_getVector+0x7c>
               vec == BNO055_LIA_DATA_X_LSB ||
 8101360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101364:	2b2e      	cmp	r3, #46	; 0x2e
 8101366:	d109      	bne.n	810137c <bno055_getVector+0x90>
               vec == BNO055_VECTOR_GRAVITY) {
        scale = accelScale;
 8101368:	4b5f      	ldr	r3, [pc, #380]	; (81014e8 <bno055_getVector+0x1fc>)
 810136a:	681b      	ldr	r3, [r3, #0]
 810136c:	4618      	mov	r0, r3
 810136e:	f7ff f973 	bl	8100658 <__aeabi_f2d>
 8101372:	4602      	mov	r2, r0
 8101374:	460b      	mov	r3, r1
 8101376:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810137a:	e028      	b.n	81013ce <bno055_getVector+0xe2>
    } else if (vec == BNO055_GYR_DATA_X_LSB) {
 810137c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101380:	2b14      	cmp	r3, #20
 8101382:	d109      	bne.n	8101398 <bno055_getVector+0xac>
        scale = angularRateScale;
 8101384:	4b59      	ldr	r3, [pc, #356]	; (81014ec <bno055_getVector+0x200>)
 8101386:	681b      	ldr	r3, [r3, #0]
 8101388:	4618      	mov	r0, r3
 810138a:	f7ff f965 	bl	8100658 <__aeabi_f2d>
 810138e:	4602      	mov	r2, r0
 8101390:	460b      	mov	r3, r1
 8101392:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101396:	e01a      	b.n	81013ce <bno055_getVector+0xe2>
    } else if (vec == BNO055_VECTOR_EULER) {
 8101398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810139c:	2b1a      	cmp	r3, #26
 810139e:	d109      	bne.n	81013b4 <bno055_getVector+0xc8>
        scale = eulerScale;
 81013a0:	4b53      	ldr	r3, [pc, #332]	; (81014f0 <bno055_getVector+0x204>)
 81013a2:	681b      	ldr	r3, [r3, #0]
 81013a4:	4618      	mov	r0, r3
 81013a6:	f7ff f957 	bl	8100658 <__aeabi_f2d>
 81013aa:	4602      	mov	r2, r0
 81013ac:	460b      	mov	r3, r1
 81013ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 81013b2:	e00c      	b.n	81013ce <bno055_getVector+0xe2>
    } else if (vec == BNO055_VECTOR_QUATERNION) {
 81013b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81013b8:	2b20      	cmp	r3, #32
 81013ba:	d108      	bne.n	81013ce <bno055_getVector+0xe2>
        scale = quaScale; //Generica variazione di posizione nello spazio tridimensionale
 81013bc:	4b4d      	ldr	r3, [pc, #308]	; (81014f4 <bno055_getVector+0x208>)
 81013be:	681b      	ldr	r3, [r3, #0]
 81013c0:	4618      	mov	r0, r3
 81013c2:	f7ff f949 	bl	8100658 <__aeabi_f2d>
 81013c6:	4602      	mov	r2, r0
 81013c8:	460b      	mov	r3, r1
 81013ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    }

    bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 81013ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81013d2:	2220      	movs	r2, #32
 81013d4:	2100      	movs	r1, #0
 81013d6:	4618      	mov	r0, r3
 81013d8:	f009 fc09 	bl	810abee <memset>

    //Conversione da dati grezzi a dati identificati e puliti
    //L'informazione grezza è salvata su 8 bit di cui ogni 2 bit sono riservati rispettivamente
    //ai valori della grandezza relativi alle componenti x, y, z ed eventualmente w
    xyz.x = ((int16_t)((buffer[1] << 8) | buffer[0])) / scale;
 81013dc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 81013e0:	021b      	lsls	r3, r3, #8
 81013e2:	b21a      	sxth	r2, r3
 81013e4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 81013e8:	b21b      	sxth	r3, r3
 81013ea:	4313      	orrs	r3, r2
 81013ec:	b21b      	sxth	r3, r3
 81013ee:	4618      	mov	r0, r3
 81013f0:	f7ff f920 	bl	8100634 <__aeabi_i2d>
 81013f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81013f8:	f7ff fab0 	bl	810095c <__aeabi_ddiv>
 81013fc:	4602      	mov	r2, r0
 81013fe:	460b      	mov	r3, r1
 8101400:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = ((int16_t)((buffer[3] << 8) | buffer[2])) / scale;
 8101404:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8101408:	021b      	lsls	r3, r3, #8
 810140a:	b21a      	sxth	r2, r3
 810140c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8101410:	b21b      	sxth	r3, r3
 8101412:	4313      	orrs	r3, r2
 8101414:	b21b      	sxth	r3, r3
 8101416:	4618      	mov	r0, r3
 8101418:	f7ff f90c 	bl	8100634 <__aeabi_i2d>
 810141c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101420:	f7ff fa9c 	bl	810095c <__aeabi_ddiv>
 8101424:	4602      	mov	r2, r0
 8101426:	460b      	mov	r3, r1
 8101428:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = ((int16_t)((buffer[5] << 8) | buffer[4])) / scale;
 810142c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8101430:	021b      	lsls	r3, r3, #8
 8101432:	b21a      	sxth	r2, r3
 8101434:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8101438:	b21b      	sxth	r3, r3
 810143a:	4313      	orrs	r3, r2
 810143c:	b21b      	sxth	r3, r3
 810143e:	4618      	mov	r0, r3
 8101440:	f7ff f8f8 	bl	8100634 <__aeabi_i2d>
 8101444:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101448:	f7ff fa88 	bl	810095c <__aeabi_ddiv>
 810144c:	4602      	mov	r2, r0
 810144e:	460b      	mov	r3, r1
 8101450:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    if (vec == BNO055_VECTOR_QUATERNION) //Se la grandezza è un quaternione
 8101454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101458:	2b20      	cmp	r3, #32
 810145a:	d113      	bne.n	8101484 <bno055_getVector+0x198>
    {
        xyz.w = ((int16_t)((buffer[7] << 8) | buffer[6])) / scale;
 810145c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8101460:	021b      	lsls	r3, r3, #8
 8101462:	b21a      	sxth	r2, r3
 8101464:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8101468:	b21b      	sxth	r3, r3
 810146a:	4313      	orrs	r3, r2
 810146c:	b21b      	sxth	r3, r3
 810146e:	4618      	mov	r0, r3
 8101470:	f7ff f8e0 	bl	8100634 <__aeabi_i2d>
 8101474:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101478:	f7ff fa70 	bl	810095c <__aeabi_ddiv>
 810147c:	4602      	mov	r2, r0
 810147e:	460b      	mov	r3, r1
 8101480:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return xyz;
 8101484:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8101488:	f107 0528 	add.w	r5, r7, #40	; 0x28
 810148c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810148e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101490:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8101494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101498:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 810149c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 81014a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 81014a4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 81014a8:	ec49 8b14 	vmov	d4, r8, r9
 81014ac:	ec45 4b15 	vmov	d5, r4, r5
 81014b0:	ec41 0b16 	vmov	d6, r0, r1
 81014b4:	ec43 2b17 	vmov	d7, r2, r3
}
 81014b8:	eeb0 0a44 	vmov.f32	s0, s8
 81014bc:	eef0 0a64 	vmov.f32	s1, s9
 81014c0:	eeb0 1a45 	vmov.f32	s2, s10
 81014c4:	eef0 1a65 	vmov.f32	s3, s11
 81014c8:	eeb0 2a46 	vmov.f32	s4, s12
 81014cc:	eef0 2a66 	vmov.f32	s5, s13
 81014d0:	eeb0 3a47 	vmov.f32	s6, s14
 81014d4:	eef0 3a67 	vmov.f32	s7, s15
 81014d8:	3778      	adds	r7, #120	; 0x78
 81014da:	46bd      	mov	sp, r7
 81014dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 81014e0:	3ff00000 	.word	0x3ff00000
 81014e4:	10000008 	.word	0x10000008
 81014e8:	1000000c 	.word	0x1000000c
 81014ec:	10000010 	.word	0x10000010
 81014f0:	10000014 	.word	0x10000014
 81014f4:	10000018 	.word	0x10000018

081014f8 <bno055_getVectorEuler>:


bno055_vector_t bno055_getVectorEuler() //Legge i dati di orientamento del sensore in termini di angoli Euleriani (roll, pitch, yaw)
{
 81014f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81014fc:	b090      	sub	sp, #64	; 0x40
 81014fe:	af00      	add	r7, sp, #0
    return bno055_getVector(BNO055_VECTOR_EULER);
 8101500:	201a      	movs	r0, #26
 8101502:	f7ff fef3 	bl	81012ec <bno055_getVector>
 8101506:	eeb0 4a40 	vmov.f32	s8, s0
 810150a:	eef0 4a60 	vmov.f32	s9, s1
 810150e:	eeb0 5a41 	vmov.f32	s10, s2
 8101512:	eef0 5a61 	vmov.f32	s11, s3
 8101516:	eeb0 6a42 	vmov.f32	s12, s4
 810151a:	eef0 6a62 	vmov.f32	s13, s5
 810151e:	eeb0 7a43 	vmov.f32	s14, s6
 8101522:	eef0 7a63 	vmov.f32	s15, s7
 8101526:	ed87 4b08 	vstr	d4, [r7, #32]
 810152a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810152e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8101532:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8101536:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810153a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 810153e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8101542:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8101546:	ec49 8b14 	vmov	d4, r8, r9
 810154a:	ec45 4b15 	vmov	d5, r4, r5
 810154e:	ec41 0b16 	vmov	d6, r0, r1
 8101552:	ec43 2b17 	vmov	d7, r2, r3
}
 8101556:	eeb0 0a44 	vmov.f32	s0, s8
 810155a:	eef0 0a64 	vmov.f32	s1, s9
 810155e:	eeb0 1a45 	vmov.f32	s2, s10
 8101562:	eef0 1a65 	vmov.f32	s3, s11
 8101566:	eeb0 2a46 	vmov.f32	s4, s12
 810156a:	eef0 2a66 	vmov.f32	s5, s13
 810156e:	eeb0 3a47 	vmov.f32	s6, s14
 8101572:	eef0 3a67 	vmov.f32	s7, s15
 8101576:	3740      	adds	r7, #64	; 0x40
 8101578:	46bd      	mov	sp, r7
 810157a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0810157e <PID_Init>:
// d = 0.000000038124

//Assegnamo i valori ai coefficienti della struct del PID
// Init e Tune PID
void PID_Init(PID* pid, float kp, float ki, float kd, float dt, float outMin, float outMax)
{
 810157e:	b480      	push	{r7}
 8101580:	b089      	sub	sp, #36	; 0x24
 8101582:	af00      	add	r7, sp, #0
 8101584:	61f8      	str	r0, [r7, #28]
 8101586:	ed87 0a06 	vstr	s0, [r7, #24]
 810158a:	edc7 0a05 	vstr	s1, [r7, #20]
 810158e:	ed87 1a04 	vstr	s2, [r7, #16]
 8101592:	edc7 1a03 	vstr	s3, [r7, #12]
 8101596:	ed87 2a02 	vstr	s4, [r7, #8]
 810159a:	edc7 2a01 	vstr	s5, [r7, #4]
	pid->kp = kp;
 810159e:	69fb      	ldr	r3, [r7, #28]
 81015a0:	69ba      	ldr	r2, [r7, #24]
 81015a2:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 81015a4:	69fb      	ldr	r3, [r7, #28]
 81015a6:	697a      	ldr	r2, [r7, #20]
 81015a8:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 81015aa:	69fb      	ldr	r3, [r7, #28]
 81015ac:	693a      	ldr	r2, [r7, #16]
 81015ae:	609a      	str	r2, [r3, #8]
	pid->dt = dt;
 81015b0:	69fb      	ldr	r3, [r7, #28]
 81015b2:	68fa      	ldr	r2, [r7, #12]
 81015b4:	60da      	str	r2, [r3, #12]
	pid->Iterm = 0;
 81015b6:	69fb      	ldr	r3, [r7, #28]
 81015b8:	f04f 0200 	mov.w	r2, #0
 81015bc:	611a      	str	r2, [r3, #16]
	pid->DtermFiltered = 0;
 81015be:	69fb      	ldr	r3, [r7, #28]
 81015c0:	f04f 0200 	mov.w	r2, #0
 81015c4:	615a      	str	r2, [r3, #20]
	pid->lastError = 0;
 81015c6:	69fb      	ldr	r3, [r7, #28]
 81015c8:	f04f 0200 	mov.w	r2, #0
 81015cc:	619a      	str	r2, [r3, #24]
	pid->outMax = outMax;
 81015ce:	69fb      	ldr	r3, [r7, #28]
 81015d0:	687a      	ldr	r2, [r7, #4]
 81015d2:	61da      	str	r2, [r3, #28]
	pid->outMin = outMin;
 81015d4:	69fb      	ldr	r3, [r7, #28]
 81015d6:	68ba      	ldr	r2, [r7, #8]
 81015d8:	621a      	str	r2, [r3, #32]
}
 81015da:	bf00      	nop
 81015dc:	3724      	adds	r7, #36	; 0x24
 81015de:	46bd      	mov	sp, r7
 81015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015e4:	4770      	bx	lr

081015e6 <PID_Controller>:
}*/


// Funzione PID con filtro passa-basso sul termine derivativo
float PID_Controller(PID* pid, float input, float setPoint)
{
 81015e6:	b480      	push	{r7}
 81015e8:	b08b      	sub	sp, #44	; 0x2c
 81015ea:	af00      	add	r7, sp, #0
 81015ec:	60f8      	str	r0, [r7, #12]
 81015ee:	ed87 0a02 	vstr	s0, [r7, #8]
 81015f2:	edc7 0a01 	vstr	s1, [r7, #4]
    float output;
    float newIterm;

    float error = setPoint - input;
 81015f6:	ed97 7a01 	vldr	s14, [r7, #4]
 81015fa:	edd7 7a02 	vldr	s15, [r7, #8]
 81015fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101602:	edc7 7a08 	vstr	s15, [r7, #32]

    float Pterm = pid->kp * error;
 8101606:	68fb      	ldr	r3, [r7, #12]
 8101608:	edd3 7a00 	vldr	s15, [r3]
 810160c:	ed97 7a08 	vldr	s14, [r7, #32]
 8101610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101614:	edc7 7a07 	vstr	s15, [r7, #28]

    newIterm = pid->Iterm + (pid->ki) * pid->dt * pid->lastError;
 8101618:	68fb      	ldr	r3, [r7, #12]
 810161a:	ed93 7a04 	vldr	s14, [r3, #16]
 810161e:	68fb      	ldr	r3, [r7, #12]
 8101620:	edd3 6a01 	vldr	s13, [r3, #4]
 8101624:	68fb      	ldr	r3, [r7, #12]
 8101626:	edd3 7a03 	vldr	s15, [r3, #12]
 810162a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 810162e:	68fb      	ldr	r3, [r7, #12]
 8101630:	edd3 7a06 	vldr	s15, [r3, #24]
 8101634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101638:	ee77 7a27 	vadd.f32	s15, s14, s15
 810163c:	edc7 7a06 	vstr	s15, [r7, #24]

    float Dterm = (pid->kd/pid->dt) * (error - pid->lastError);
 8101640:	68fb      	ldr	r3, [r7, #12]
 8101642:	edd3 6a02 	vldr	s13, [r3, #8]
 8101646:	68fb      	ldr	r3, [r7, #12]
 8101648:	edd3 7a03 	vldr	s15, [r3, #12]
 810164c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101650:	68fb      	ldr	r3, [r7, #12]
 8101652:	edd3 7a06 	vldr	s15, [r3, #24]
 8101656:	edd7 6a08 	vldr	s13, [r7, #32]
 810165a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 810165e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101662:	edc7 7a05 	vstr	s15, [r7, #20]
    // Applica filtro passa-basso (α = 0.8 per smorzare il rumore)
    pid->DtermFiltered = 0.8 * pid->DtermFiltered + 0.2 * DtermRaw;
    float Dterm = pid->DtermFiltered;
    */

    pid->lastError = error;
 8101666:	68fb      	ldr	r3, [r7, #12]
 8101668:	6a3a      	ldr	r2, [r7, #32]
 810166a:	619a      	str	r2, [r3, #24]

    output = Pterm + newIterm + Dterm;
 810166c:	ed97 7a07 	vldr	s14, [r7, #28]
 8101670:	edd7 7a06 	vldr	s15, [r7, #24]
 8101674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101678:	ed97 7a05 	vldr	s14, [r7, #20]
 810167c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101680:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Saturazione dell'output & anti-windup
    if (output > pid->outMax) {
 8101684:	68fb      	ldr	r3, [r7, #12]
 8101686:	edd3 7a07 	vldr	s15, [r3, #28]
 810168a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 810168e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101696:	dd03      	ble.n	81016a0 <PID_Controller+0xba>
        output = pid->outMax;
 8101698:	68fb      	ldr	r3, [r7, #12]
 810169a:	69db      	ldr	r3, [r3, #28]
 810169c:	627b      	str	r3, [r7, #36]	; 0x24
 810169e:	e010      	b.n	81016c2 <PID_Controller+0xdc>
    } else if (output < pid->outMin) {
 81016a0:	68fb      	ldr	r3, [r7, #12]
 81016a2:	edd3 7a08 	vldr	s15, [r3, #32]
 81016a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 81016aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81016b2:	d503      	bpl.n	81016bc <PID_Controller+0xd6>
        output = pid->outMin;
 81016b4:	68fb      	ldr	r3, [r7, #12]
 81016b6:	6a1b      	ldr	r3, [r3, #32]
 81016b8:	627b      	str	r3, [r7, #36]	; 0x24
 81016ba:	e002      	b.n	81016c2 <PID_Controller+0xdc>
    } else {
        pid->Iterm = newIterm; // Applica anti-windup
 81016bc:	68fb      	ldr	r3, [r7, #12]
 81016be:	69ba      	ldr	r2, [r7, #24]
 81016c0:	611a      	str	r2, [r3, #16]
    }

    return output;
 81016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016c4:	ee07 3a90 	vmov	s15, r3
}
 81016c8:	eeb0 0a67 	vmov.f32	s0, s15
 81016cc:	372c      	adds	r7, #44	; 0x2c
 81016ce:	46bd      	mov	sp, r7
 81016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016d4:	4770      	bx	lr
	...

081016d8 <SpeedCompute>:


float* SpeedCompute(float virtualInputs[])
{
 81016d8:	b580      	push	{r7, lr}
 81016da:	b082      	sub	sp, #8
 81016dc:	af00      	add	r7, sp, #0
 81016de:	6078      	str	r0, [r7, #4]
    static float Speeds_quad[4];
    static float Speeds[4];

    Speeds_quad[0] = (1/(4*b))*virtualInputs[0] - (1/(2*l*b))*virtualInputs[2] + (1/(4*d))*virtualInputs[3];
 81016e0:	4ba2      	ldr	r3, [pc, #648]	; (810196c <SpeedCompute+0x294>)
 81016e2:	edd3 7a00 	vldr	s15, [r3]
 81016e6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 81016ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 81016ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81016f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81016f6:	687b      	ldr	r3, [r7, #4]
 81016f8:	edd3 7a00 	vldr	s15, [r3]
 81016fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101700:	4b9b      	ldr	r3, [pc, #620]	; (8101970 <SpeedCompute+0x298>)
 8101702:	edd3 7a00 	vldr	s15, [r3]
 8101706:	ee77 6aa7 	vadd.f32	s13, s15, s15
 810170a:	4b98      	ldr	r3, [pc, #608]	; (810196c <SpeedCompute+0x294>)
 810170c:	edd3 7a00 	vldr	s15, [r3]
 8101710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101714:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8101718:	eec6 6a27 	vdiv.f32	s13, s12, s15
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	3308      	adds	r3, #8
 8101720:	edd3 7a00 	vldr	s15, [r3]
 8101724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101728:	ee37 7a67 	vsub.f32	s14, s14, s15
 810172c:	4b91      	ldr	r3, [pc, #580]	; (8101974 <SpeedCompute+0x29c>)
 810172e:	edd3 7a00 	vldr	s15, [r3]
 8101732:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8101736:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810173a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 810173e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8101742:	687b      	ldr	r3, [r7, #4]
 8101744:	330c      	adds	r3, #12
 8101746:	edd3 7a00 	vldr	s15, [r3]
 810174a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101752:	4b89      	ldr	r3, [pc, #548]	; (8101978 <SpeedCompute+0x2a0>)
 8101754:	edc3 7a00 	vstr	s15, [r3]
	Speeds_quad[1] = (1/(4*b))*virtualInputs[0] - (1/(2*l*b))*virtualInputs[1] - (1/(4*d))*virtualInputs[3];
 8101758:	4b84      	ldr	r3, [pc, #528]	; (810196c <SpeedCompute+0x294>)
 810175a:	edd3 7a00 	vldr	s15, [r3]
 810175e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8101762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810176a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810176e:	687b      	ldr	r3, [r7, #4]
 8101770:	edd3 7a00 	vldr	s15, [r3]
 8101774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101778:	4b7d      	ldr	r3, [pc, #500]	; (8101970 <SpeedCompute+0x298>)
 810177a:	edd3 7a00 	vldr	s15, [r3]
 810177e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8101782:	4b7a      	ldr	r3, [pc, #488]	; (810196c <SpeedCompute+0x294>)
 8101784:	edd3 7a00 	vldr	s15, [r3]
 8101788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810178c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8101790:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8101794:	687b      	ldr	r3, [r7, #4]
 8101796:	3304      	adds	r3, #4
 8101798:	edd3 7a00 	vldr	s15, [r3]
 810179c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81017a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 81017a4:	4b73      	ldr	r3, [pc, #460]	; (8101974 <SpeedCompute+0x29c>)
 81017a6:	edd3 7a00 	vldr	s15, [r3]
 81017aa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 81017ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 81017b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 81017b6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 81017ba:	687b      	ldr	r3, [r7, #4]
 81017bc:	330c      	adds	r3, #12
 81017be:	edd3 7a00 	vldr	s15, [r3]
 81017c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81017c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 81017ca:	4b6b      	ldr	r3, [pc, #428]	; (8101978 <SpeedCompute+0x2a0>)
 81017cc:	edc3 7a01 	vstr	s15, [r3, #4]
	Speeds_quad[2] = (1/(4*b))*virtualInputs[0] + (1/(2*l*b))*virtualInputs[2] + (1/(4*d))*virtualInputs[3];
 81017d0:	4b66      	ldr	r3, [pc, #408]	; (810196c <SpeedCompute+0x294>)
 81017d2:	edd3 7a00 	vldr	s15, [r3]
 81017d6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 81017da:	ee67 7a87 	vmul.f32	s15, s15, s14
 81017de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81017e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81017e6:	687b      	ldr	r3, [r7, #4]
 81017e8:	edd3 7a00 	vldr	s15, [r3]
 81017ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 81017f0:	4b5f      	ldr	r3, [pc, #380]	; (8101970 <SpeedCompute+0x298>)
 81017f2:	edd3 7a00 	vldr	s15, [r3]
 81017f6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 81017fa:	4b5c      	ldr	r3, [pc, #368]	; (810196c <SpeedCompute+0x294>)
 81017fc:	edd3 7a00 	vldr	s15, [r3]
 8101800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101804:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8101808:	eec6 6a27 	vdiv.f32	s13, s12, s15
 810180c:	687b      	ldr	r3, [r7, #4]
 810180e:	3308      	adds	r3, #8
 8101810:	edd3 7a00 	vldr	s15, [r3]
 8101814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101818:	ee37 7a27 	vadd.f32	s14, s14, s15
 810181c:	4b55      	ldr	r3, [pc, #340]	; (8101974 <SpeedCompute+0x29c>)
 810181e:	edd3 7a00 	vldr	s15, [r3]
 8101822:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8101826:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810182a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 810182e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8101832:	687b      	ldr	r3, [r7, #4]
 8101834:	330c      	adds	r3, #12
 8101836:	edd3 7a00 	vldr	s15, [r3]
 810183a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810183e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101842:	4b4d      	ldr	r3, [pc, #308]	; (8101978 <SpeedCompute+0x2a0>)
 8101844:	edc3 7a02 	vstr	s15, [r3, #8]
	Speeds_quad[3] = (1/(4*b))*virtualInputs[0] + (1/(2*l*b))*virtualInputs[1] - (1/(4*d))*virtualInputs[3];
 8101848:	4b48      	ldr	r3, [pc, #288]	; (810196c <SpeedCompute+0x294>)
 810184a:	edd3 7a00 	vldr	s15, [r3]
 810184e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8101852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810185a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810185e:	687b      	ldr	r3, [r7, #4]
 8101860:	edd3 7a00 	vldr	s15, [r3]
 8101864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101868:	4b41      	ldr	r3, [pc, #260]	; (8101970 <SpeedCompute+0x298>)
 810186a:	edd3 7a00 	vldr	s15, [r3]
 810186e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8101872:	4b3e      	ldr	r3, [pc, #248]	; (810196c <SpeedCompute+0x294>)
 8101874:	edd3 7a00 	vldr	s15, [r3]
 8101878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810187c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8101880:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8101884:	687b      	ldr	r3, [r7, #4]
 8101886:	3304      	adds	r3, #4
 8101888:	edd3 7a00 	vldr	s15, [r3]
 810188c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101890:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101894:	4b37      	ldr	r3, [pc, #220]	; (8101974 <SpeedCompute+0x29c>)
 8101896:	edd3 7a00 	vldr	s15, [r3]
 810189a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 810189e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 81018a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 81018a6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 81018aa:	687b      	ldr	r3, [r7, #4]
 81018ac:	330c      	adds	r3, #12
 81018ae:	edd3 7a00 	vldr	s15, [r3]
 81018b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81018b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 81018ba:	4b2f      	ldr	r3, [pc, #188]	; (8101978 <SpeedCompute+0x2a0>)
 81018bc:	edc3 7a03 	vstr	s15, [r3, #12]
     * Calcoliamo le velocità dei motori al quadrato, poiché non possono essere negative.
     * Partendo dal valore di throttle e seguendo le matrici di controllo dei droni,
     * andiamo a sommare e sottrarre le variabili date tramite il PID per il controllo delle velocità.
     */

    Speeds[0] = sqrt(Speeds_quad[0]);
 81018c0:	4b2d      	ldr	r3, [pc, #180]	; (8101978 <SpeedCompute+0x2a0>)
 81018c2:	681b      	ldr	r3, [r3, #0]
 81018c4:	4618      	mov	r0, r3
 81018c6:	f7fe fec7 	bl	8100658 <__aeabi_f2d>
 81018ca:	4602      	mov	r2, r0
 81018cc:	460b      	mov	r3, r1
 81018ce:	ec43 2b10 	vmov	d0, r2, r3
 81018d2:	f00c fdc9 	bl	810e468 <sqrt>
 81018d6:	ec53 2b10 	vmov	r2, r3, d0
 81018da:	4610      	mov	r0, r2
 81018dc:	4619      	mov	r1, r3
 81018de:	f7ff fa0b 	bl	8100cf8 <__aeabi_d2f>
 81018e2:	4603      	mov	r3, r0
 81018e4:	4a25      	ldr	r2, [pc, #148]	; (810197c <SpeedCompute+0x2a4>)
 81018e6:	6013      	str	r3, [r2, #0]
    Speeds[1] = sqrt(Speeds_quad[1]);
 81018e8:	4b23      	ldr	r3, [pc, #140]	; (8101978 <SpeedCompute+0x2a0>)
 81018ea:	685b      	ldr	r3, [r3, #4]
 81018ec:	4618      	mov	r0, r3
 81018ee:	f7fe feb3 	bl	8100658 <__aeabi_f2d>
 81018f2:	4602      	mov	r2, r0
 81018f4:	460b      	mov	r3, r1
 81018f6:	ec43 2b10 	vmov	d0, r2, r3
 81018fa:	f00c fdb5 	bl	810e468 <sqrt>
 81018fe:	ec53 2b10 	vmov	r2, r3, d0
 8101902:	4610      	mov	r0, r2
 8101904:	4619      	mov	r1, r3
 8101906:	f7ff f9f7 	bl	8100cf8 <__aeabi_d2f>
 810190a:	4603      	mov	r3, r0
 810190c:	4a1b      	ldr	r2, [pc, #108]	; (810197c <SpeedCompute+0x2a4>)
 810190e:	6053      	str	r3, [r2, #4]
    Speeds[2] = sqrt(Speeds_quad[2]);
 8101910:	4b19      	ldr	r3, [pc, #100]	; (8101978 <SpeedCompute+0x2a0>)
 8101912:	689b      	ldr	r3, [r3, #8]
 8101914:	4618      	mov	r0, r3
 8101916:	f7fe fe9f 	bl	8100658 <__aeabi_f2d>
 810191a:	4602      	mov	r2, r0
 810191c:	460b      	mov	r3, r1
 810191e:	ec43 2b10 	vmov	d0, r2, r3
 8101922:	f00c fda1 	bl	810e468 <sqrt>
 8101926:	ec53 2b10 	vmov	r2, r3, d0
 810192a:	4610      	mov	r0, r2
 810192c:	4619      	mov	r1, r3
 810192e:	f7ff f9e3 	bl	8100cf8 <__aeabi_d2f>
 8101932:	4603      	mov	r3, r0
 8101934:	4a11      	ldr	r2, [pc, #68]	; (810197c <SpeedCompute+0x2a4>)
 8101936:	6093      	str	r3, [r2, #8]
    Speeds[3] = sqrt(Speeds_quad[3]);
 8101938:	4b0f      	ldr	r3, [pc, #60]	; (8101978 <SpeedCompute+0x2a0>)
 810193a:	68db      	ldr	r3, [r3, #12]
 810193c:	4618      	mov	r0, r3
 810193e:	f7fe fe8b 	bl	8100658 <__aeabi_f2d>
 8101942:	4602      	mov	r2, r0
 8101944:	460b      	mov	r3, r1
 8101946:	ec43 2b10 	vmov	d0, r2, r3
 810194a:	f00c fd8d 	bl	810e468 <sqrt>
 810194e:	ec53 2b10 	vmov	r2, r3, d0
 8101952:	4610      	mov	r0, r2
 8101954:	4619      	mov	r1, r3
 8101956:	f7ff f9cf 	bl	8100cf8 <__aeabi_d2f>
 810195a:	4603      	mov	r3, r0
 810195c:	4a07      	ldr	r2, [pc, #28]	; (810197c <SpeedCompute+0x2a4>)
 810195e:	60d3      	str	r3, [r2, #12]

    // Una volta calcolata la velocità dei motori al quadrato, viene eseguita la radice

    return Speeds;
 8101960:	4b06      	ldr	r3, [pc, #24]	; (810197c <SpeedCompute+0x2a4>)
}
 8101962:	4618      	mov	r0, r3
 8101964:	3708      	adds	r7, #8
 8101966:	46bd      	mov	sp, r7
 8101968:	bd80      	pop	{r7, pc}
 810196a:	bf00      	nop
 810196c:	1000001c 	.word	0x1000001c
 8101970:	10000020 	.word	0x10000020
 8101974:	10000024 	.word	0x10000024
 8101978:	10000268 	.word	0x10000268
 810197c:	10000278 	.word	0x10000278

08101980 <readImu>:
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */


void readImu()
{
 8101980:	b5b0      	push	{r4, r5, r7, lr}
 8101982:	b088      	sub	sp, #32
 8101984:	af00      	add	r7, sp, #0
	bno055_vector_t euler_vector = bno055_getVectorEuler();
 8101986:	f7ff fdb7 	bl	81014f8 <bno055_getVectorEuler>
 810198a:	eeb0 4a40 	vmov.f32	s8, s0
 810198e:	eef0 4a60 	vmov.f32	s9, s1
 8101992:	eeb0 5a41 	vmov.f32	s10, s2
 8101996:	eef0 5a61 	vmov.f32	s11, s3
 810199a:	eeb0 6a42 	vmov.f32	s12, s4
 810199e:	eef0 6a62 	vmov.f32	s13, s5
 81019a2:	eeb0 7a43 	vmov.f32	s14, s6
 81019a6:	eef0 7a63 	vmov.f32	s15, s7
 81019aa:	ed87 4b00 	vstr	d4, [r7]
 81019ae:	ed87 5b02 	vstr	d5, [r7, #8]
 81019b2:	ed87 6b04 	vstr	d6, [r7, #16]
 81019b6:	ed87 7b06 	vstr	d7, [r7, #24]

	roll = euler_vector.y;
 81019ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 81019be:	491a      	ldr	r1, [pc, #104]	; (8101a28 <readImu+0xa8>)
 81019c0:	e9c1 2300 	strd	r2, r3, [r1]
	if (euler_vector.z < 0)
 81019c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 81019c8:	f04f 0200 	mov.w	r2, #0
 81019cc:	f04f 0300 	mov.w	r3, #0
 81019d0:	f7ff f90c 	bl	8100bec <__aeabi_dcmplt>
 81019d4:	4603      	mov	r3, r0
 81019d6:	2b00      	cmp	r3, #0
 81019d8:	d011      	beq.n	81019fe <readImu+0x7e>
	{
		pitch = -euler_vector.z - 180; //Se si raggiunge il SetPoint di -180° sul roll, questa variabile vale 0
 81019da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 81019de:	4614      	mov	r4, r2
 81019e0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 81019e4:	f04f 0200 	mov.w	r2, #0
 81019e8:	4b10      	ldr	r3, [pc, #64]	; (8101a2c <readImu+0xac>)
 81019ea:	4620      	mov	r0, r4
 81019ec:	4629      	mov	r1, r5
 81019ee:	f7fe fcd3 	bl	8100398 <__aeabi_dsub>
 81019f2:	4602      	mov	r2, r0
 81019f4:	460b      	mov	r3, r1
 81019f6:	490e      	ldr	r1, [pc, #56]	; (8101a30 <readImu+0xb0>)
 81019f8:	e9c1 2300 	strd	r2, r3, [r1]
 81019fc:	e00b      	b.n	8101a16 <readImu+0x96>
	}
	else{
		pitch = -euler_vector.z + 180;
 81019fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101a02:	f04f 0000 	mov.w	r0, #0
 8101a06:	4909      	ldr	r1, [pc, #36]	; (8101a2c <readImu+0xac>)
 8101a08:	f7fe fcc6 	bl	8100398 <__aeabi_dsub>
 8101a0c:	4602      	mov	r2, r0
 8101a0e:	460b      	mov	r3, r1
 8101a10:	4907      	ldr	r1, [pc, #28]	; (8101a30 <readImu+0xb0>)
 8101a12:	e9c1 2300 	strd	r2, r3, [r1]
	}
	yaw = euler_vector.x;
 8101a16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101a1a:	4906      	ldr	r1, [pc, #24]	; (8101a34 <readImu+0xb4>)
 8101a1c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8101a20:	bf00      	nop
 8101a22:	3720      	adds	r7, #32
 8101a24:	46bd      	mov	sp, r7
 8101a26:	bdb0      	pop	{r4, r5, r7, pc}
 8101a28:	100004b8 	.word	0x100004b8
 8101a2c:	40668000 	.word	0x40668000
 8101a30:	100004c0 	.word	0x100004c0
 8101a34:	100004c8 	.word	0x100004c8

08101a38 <stabilizeMotors>:



void stabilizeMotors()
{
 8101a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101a3c:	ed2d 8b08 	vpush	{d8-d11}
 8101a40:	b0bf      	sub	sp, #252	; 0xfc
 8101a42:	af22      	add	r7, sp, #136	; 0x88
	float virtualInputs[4];
	readImu();
 8101a44:	f7ff ff9c 	bl	8101980 <readImu>
	//quindi mantiene il suo valore tra le chiamate alla funzione
	static int prev_rif_yaw = 0; // Memorizza il valore precedente della levetta
	static int flag_control = 0; // Indica se il PID deve continuare a controllare

	// Controllo cambio stato della levetta dell'imbardata
	if (rif_yaw != prev_rif_yaw)
 8101a48:	4b6e      	ldr	r3, [pc, #440]	; (8101c04 <stabilizeMotors+0x1cc>)
 8101a4a:	681a      	ldr	r2, [r3, #0]
 8101a4c:	4b6e      	ldr	r3, [pc, #440]	; (8101c08 <stabilizeMotors+0x1d0>)
 8101a4e:	681b      	ldr	r3, [r3, #0]
 8101a50:	429a      	cmp	r2, r3
 8101a52:	d045      	beq.n	8101ae0 <stabilizeMotors+0xa8>
	{
		prev_rif_yaw = rif_yaw; // Aggiorna lo stato precedente
 8101a54:	4b6b      	ldr	r3, [pc, #428]	; (8101c04 <stabilizeMotors+0x1cc>)
 8101a56:	681b      	ldr	r3, [r3, #0]
 8101a58:	4a6b      	ldr	r2, [pc, #428]	; (8101c08 <stabilizeMotors+0x1d0>)
 8101a5a:	6013      	str	r3, [r2, #0]
		yaw_setpoint = yaw + yaw_angolo;
 8101a5c:	4b6b      	ldr	r3, [pc, #428]	; (8101c0c <stabilizeMotors+0x1d4>)
 8101a5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101a62:	4b6b      	ldr	r3, [pc, #428]	; (8101c10 <stabilizeMotors+0x1d8>)
 8101a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a68:	f7fe fc98 	bl	810039c <__adddf3>
 8101a6c:	4602      	mov	r2, r0
 8101a6e:	460b      	mov	r3, r1
 8101a70:	4968      	ldr	r1, [pc, #416]	; (8101c14 <stabilizeMotors+0x1dc>)
 8101a72:	e9c1 2300 	strd	r2, r3, [r1]

		// Assicura che yaw_setpoint sia nel range [0, 360]
		if (yaw_setpoint >= 360)
 8101a76:	4b67      	ldr	r3, [pc, #412]	; (8101c14 <stabilizeMotors+0x1dc>)
 8101a78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101a7c:	f04f 0200 	mov.w	r2, #0
 8101a80:	4b65      	ldr	r3, [pc, #404]	; (8101c18 <stabilizeMotors+0x1e0>)
 8101a82:	f7ff f8c7 	bl	8100c14 <__aeabi_dcmpge>
 8101a86:	4603      	mov	r3, r0
 8101a88:	2b00      	cmp	r3, #0
 8101a8a:	d00d      	beq.n	8101aa8 <stabilizeMotors+0x70>
			yaw_setpoint -= 360;
 8101a8c:	4b61      	ldr	r3, [pc, #388]	; (8101c14 <stabilizeMotors+0x1dc>)
 8101a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101a92:	f04f 0200 	mov.w	r2, #0
 8101a96:	4b60      	ldr	r3, [pc, #384]	; (8101c18 <stabilizeMotors+0x1e0>)
 8101a98:	f7fe fc7e 	bl	8100398 <__aeabi_dsub>
 8101a9c:	4602      	mov	r2, r0
 8101a9e:	460b      	mov	r3, r1
 8101aa0:	495c      	ldr	r1, [pc, #368]	; (8101c14 <stabilizeMotors+0x1dc>)
 8101aa2:	e9c1 2300 	strd	r2, r3, [r1]
 8101aa6:	e018      	b.n	8101ada <stabilizeMotors+0xa2>
		else if (yaw_setpoint < 0)
 8101aa8:	4b5a      	ldr	r3, [pc, #360]	; (8101c14 <stabilizeMotors+0x1dc>)
 8101aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101aae:	f04f 0200 	mov.w	r2, #0
 8101ab2:	f04f 0300 	mov.w	r3, #0
 8101ab6:	f7ff f899 	bl	8100bec <__aeabi_dcmplt>
 8101aba:	4603      	mov	r3, r0
 8101abc:	2b00      	cmp	r3, #0
 8101abe:	d00c      	beq.n	8101ada <stabilizeMotors+0xa2>
			yaw_setpoint += 360;
 8101ac0:	4b54      	ldr	r3, [pc, #336]	; (8101c14 <stabilizeMotors+0x1dc>)
 8101ac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101ac6:	f04f 0200 	mov.w	r2, #0
 8101aca:	4b53      	ldr	r3, [pc, #332]	; (8101c18 <stabilizeMotors+0x1e0>)
 8101acc:	f7fe fc66 	bl	810039c <__adddf3>
 8101ad0:	4602      	mov	r2, r0
 8101ad2:	460b      	mov	r3, r1
 8101ad4:	494f      	ldr	r1, [pc, #316]	; (8101c14 <stabilizeMotors+0x1dc>)
 8101ad6:	e9c1 2300 	strd	r2, r3, [r1]

		flag_control = 1; // Attiva il controllo PID
 8101ada:	4b50      	ldr	r3, [pc, #320]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101adc:	2201      	movs	r2, #1
 8101ade:	601a      	str	r2, [r3, #0]
	}

	// Se il PID ha raggiunto lo yaw_setpoint o yaw_angolo è 0, ferma il controllo
	//fabs() restituisce il valore assoluto di un numero in virgola mobile
	if ((flag_control && fabs(yaw_setpoint - yaw) < 1.0)) // Tolleranza di 1 grado
 8101ae0:	4b4e      	ldr	r3, [pc, #312]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	2b00      	cmp	r3, #0
 8101ae6:	d019      	beq.n	8101b1c <stabilizeMotors+0xe4>
 8101ae8:	4b4a      	ldr	r3, [pc, #296]	; (8101c14 <stabilizeMotors+0x1dc>)
 8101aea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101aee:	4b47      	ldr	r3, [pc, #284]	; (8101c0c <stabilizeMotors+0x1d4>)
 8101af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101af4:	f7fe fc50 	bl	8100398 <__aeabi_dsub>
 8101af8:	4602      	mov	r2, r0
 8101afa:	460b      	mov	r3, r1
 8101afc:	4614      	mov	r4, r2
 8101afe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8101b02:	f04f 0200 	mov.w	r2, #0
 8101b06:	4b46      	ldr	r3, [pc, #280]	; (8101c20 <stabilizeMotors+0x1e8>)
 8101b08:	4620      	mov	r0, r4
 8101b0a:	4629      	mov	r1, r5
 8101b0c:	f7ff f86e 	bl	8100bec <__aeabi_dcmplt>
 8101b10:	4603      	mov	r3, r0
 8101b12:	2b00      	cmp	r3, #0
 8101b14:	d002      	beq.n	8101b1c <stabilizeMotors+0xe4>
	{
		flag_control = 0;
 8101b16:	4b41      	ldr	r3, [pc, #260]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101b18:	2200      	movs	r2, #0
 8101b1a:	601a      	str	r2, [r3, #0]
	}

	virtualInputs[0] = 9; // Peso del drone
 8101b1c:	4b41      	ldr	r3, [pc, #260]	; (8101c24 <stabilizeMotors+0x1ec>)
 8101b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
	virtualInputs[1] = PID_Controller(&RollPID, roll, 0);
 8101b20:	4b41      	ldr	r3, [pc, #260]	; (8101c28 <stabilizeMotors+0x1f0>)
 8101b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b26:	4610      	mov	r0, r2
 8101b28:	4619      	mov	r1, r3
 8101b2a:	f7ff f8e5 	bl	8100cf8 <__aeabi_d2f>
 8101b2e:	4603      	mov	r3, r0
 8101b30:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8101c2c <stabilizeMotors+0x1f4>
 8101b34:	ee00 3a10 	vmov	s0, r3
 8101b38:	483d      	ldr	r0, [pc, #244]	; (8101c30 <stabilizeMotors+0x1f8>)
 8101b3a:	f7ff fd54 	bl	81015e6 <PID_Controller>
 8101b3e:	eef0 7a40 	vmov.f32	s15, s0
 8101b42:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	virtualInputs[2] = PID_Controller(&PitchPID, pitch, 0);
 8101b46:	4b3b      	ldr	r3, [pc, #236]	; (8101c34 <stabilizeMotors+0x1fc>)
 8101b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b4c:	4610      	mov	r0, r2
 8101b4e:	4619      	mov	r1, r3
 8101b50:	f7ff f8d2 	bl	8100cf8 <__aeabi_d2f>
 8101b54:	4603      	mov	r3, r0
 8101b56:	eddf 0a35 	vldr	s1, [pc, #212]	; 8101c2c <stabilizeMotors+0x1f4>
 8101b5a:	ee00 3a10 	vmov	s0, r3
 8101b5e:	4836      	ldr	r0, [pc, #216]	; (8101c38 <stabilizeMotors+0x200>)
 8101b60:	f7ff fd41 	bl	81015e6 <PID_Controller>
 8101b64:	eef0 7a40 	vmov.f32	s15, s0
 8101b68:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	//Attiva PitchYaw solo se il drone si trova in un intorno di +-12° dalla posizione di equilibrio
	if (flag_control && (roll >= -12 && roll <= 12) && (pitch >= -12 && pitch <= 12))
 8101b6c:	4b2b      	ldr	r3, [pc, #172]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101b6e:	681b      	ldr	r3, [r3, #0]
 8101b70:	2b00      	cmp	r3, #0
 8101b72:	d069      	beq.n	8101c48 <stabilizeMotors+0x210>
 8101b74:	4b2c      	ldr	r3, [pc, #176]	; (8101c28 <stabilizeMotors+0x1f0>)
 8101b76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101b7a:	f04f 0200 	mov.w	r2, #0
 8101b7e:	4b2f      	ldr	r3, [pc, #188]	; (8101c3c <stabilizeMotors+0x204>)
 8101b80:	f7ff f848 	bl	8100c14 <__aeabi_dcmpge>
 8101b84:	4603      	mov	r3, r0
 8101b86:	2b00      	cmp	r3, #0
 8101b88:	d05e      	beq.n	8101c48 <stabilizeMotors+0x210>
 8101b8a:	4b27      	ldr	r3, [pc, #156]	; (8101c28 <stabilizeMotors+0x1f0>)
 8101b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101b90:	f04f 0200 	mov.w	r2, #0
 8101b94:	4b2a      	ldr	r3, [pc, #168]	; (8101c40 <stabilizeMotors+0x208>)
 8101b96:	f7ff f833 	bl	8100c00 <__aeabi_dcmple>
 8101b9a:	4603      	mov	r3, r0
 8101b9c:	2b00      	cmp	r3, #0
 8101b9e:	d053      	beq.n	8101c48 <stabilizeMotors+0x210>
 8101ba0:	4b24      	ldr	r3, [pc, #144]	; (8101c34 <stabilizeMotors+0x1fc>)
 8101ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101ba6:	f04f 0200 	mov.w	r2, #0
 8101baa:	4b24      	ldr	r3, [pc, #144]	; (8101c3c <stabilizeMotors+0x204>)
 8101bac:	f7ff f832 	bl	8100c14 <__aeabi_dcmpge>
 8101bb0:	4603      	mov	r3, r0
 8101bb2:	2b00      	cmp	r3, #0
 8101bb4:	d048      	beq.n	8101c48 <stabilizeMotors+0x210>
 8101bb6:	4b1f      	ldr	r3, [pc, #124]	; (8101c34 <stabilizeMotors+0x1fc>)
 8101bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101bbc:	f04f 0200 	mov.w	r2, #0
 8101bc0:	4b1f      	ldr	r3, [pc, #124]	; (8101c40 <stabilizeMotors+0x208>)
 8101bc2:	f7ff f81d 	bl	8100c00 <__aeabi_dcmple>
 8101bc6:	4603      	mov	r3, r0
 8101bc8:	2b00      	cmp	r3, #0
 8101bca:	d03d      	beq.n	8101c48 <stabilizeMotors+0x210>
	{
		virtualInputs[3] = PID_Controller(&YawPID, yaw, yaw_setpoint);
 8101bcc:	4b0f      	ldr	r3, [pc, #60]	; (8101c0c <stabilizeMotors+0x1d4>)
 8101bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bd2:	4610      	mov	r0, r2
 8101bd4:	4619      	mov	r1, r3
 8101bd6:	f7ff f88f 	bl	8100cf8 <__aeabi_d2f>
 8101bda:	4604      	mov	r4, r0
 8101bdc:	4b0d      	ldr	r3, [pc, #52]	; (8101c14 <stabilizeMotors+0x1dc>)
 8101bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101be2:	4610      	mov	r0, r2
 8101be4:	4619      	mov	r1, r3
 8101be6:	f7ff f887 	bl	8100cf8 <__aeabi_d2f>
 8101bea:	4603      	mov	r3, r0
 8101bec:	ee00 3a90 	vmov	s1, r3
 8101bf0:	ee00 4a10 	vmov	s0, r4
 8101bf4:	4813      	ldr	r0, [pc, #76]	; (8101c44 <stabilizeMotors+0x20c>)
 8101bf6:	f7ff fcf6 	bl	81015e6 <PID_Controller>
 8101bfa:	eef0 7a40 	vmov.f32	s15, s0
 8101bfe:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8101c02:	e024      	b.n	8101c4e <stabilizeMotors+0x216>
 8101c04:	100004b4 	.word	0x100004b4
 8101c08:	10000558 	.word	0x10000558
 8101c0c:	100004c8 	.word	0x100004c8
 8101c10:	10000548 	.word	0x10000548
 8101c14:	10000550 	.word	0x10000550
 8101c18:	40768000 	.word	0x40768000
 8101c1c:	1000055c 	.word	0x1000055c
 8101c20:	3ff00000 	.word	0x3ff00000
 8101c24:	41100000 	.word	0x41100000
 8101c28:	100004b8 	.word	0x100004b8
 8101c2c:	00000000 	.word	0x00000000
 8101c30:	100004f4 	.word	0x100004f4
 8101c34:	100004c0 	.word	0x100004c0
 8101c38:	100004d0 	.word	0x100004d0
 8101c3c:	c0280000 	.word	0xc0280000
 8101c40:	40280000 	.word	0x40280000
 8101c44:	10000518 	.word	0x10000518
	}
	else
	{
		virtualInputs[3] = 0;
 8101c48:	f04f 0300 	mov.w	r3, #0
 8101c4c:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	//virtualInputs[3] = (flag_control) ? PID_Controller(&YawPID, yaw, yaw_setpoint) : 0;

	float* Speeds;
	Speeds = SpeedCompute(virtualInputs);
 8101c4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101c52:	4618      	mov	r0, r3
 8101c54:	f7ff fd40 	bl	81016d8 <SpeedCompute>
 8101c58:	66f8      	str	r0, [r7, #108]	; 0x6c

	//Sono stati messi degli offset nel tentativo di bilanciare se spinte dei due motori
	float avgMotor1 = calcoloDuty(*(Speeds+0));
 8101c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101c5c:	edd3 7a00 	vldr	s15, [r3]
 8101c60:	eeb0 0a67 	vmov.f32	s0, s15
 8101c64:	f000 fff4 	bl	8102c50 <calcoloDuty>
 8101c68:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
	float avgMotor2 = calcoloDuty(*(Speeds+1));
 8101c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101c6e:	3304      	adds	r3, #4
 8101c70:	edd3 7a00 	vldr	s15, [r3]
 8101c74:	eeb0 0a67 	vmov.f32	s0, s15
 8101c78:	f000 ffea 	bl	8102c50 <calcoloDuty>
 8101c7c:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	float avgMotor3 = calcoloDuty(*(Speeds+2));
 8101c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101c82:	3308      	adds	r3, #8
 8101c84:	edd3 7a00 	vldr	s15, [r3]
 8101c88:	eeb0 0a67 	vmov.f32	s0, s15
 8101c8c:	f000 ffe0 	bl	8102c50 <calcoloDuty>
 8101c90:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	float avgMotor4 = calcoloDuty(*(Speeds+3));
 8101c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101c96:	330c      	adds	r3, #12
 8101c98:	edd3 7a00 	vldr	s15, [r3]
 8101c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8101ca0:	f000 ffd6 	bl	8102c50 <calcoloDuty>
 8101ca4:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

	if(flag_print)
 8101ca8:	4b54      	ldr	r3, [pc, #336]	; (8101dfc <stabilizeMotors+0x3c4>)
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	2b00      	cmp	r3, #0
 8101cae:	f000 8093 	beq.w	8101dd8 <stabilizeMotors+0x3a0>
	{
	  printf("avgMotor1: %.2f\r\n"
 8101cb2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8101cb4:	f7fe fcd0 	bl	8100658 <__aeabi_f2d>
 8101cb8:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8101cbc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8101cbe:	f7fe fccb 	bl	8100658 <__aeabi_f2d>
 8101cc2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8101cc6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8101cc8:	f7fe fcc6 	bl	8100658 <__aeabi_f2d>
 8101ccc:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8101cd0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8101cd2:	f7fe fcc1 	bl	8100658 <__aeabi_f2d>
 8101cd6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			  "yaw: %f\r\n"
			  "rif_yaw: %d\r\n"
			  "yaw_setpoint: %.2f\r\n"
			  "flag_control: %d\r\n"
			  "Virtual Inputs: %f, %f, %f, %f\r\n\n",
			  avgMotor1, avgMotor2, avgMotor3, avgMotor4, Speeds[0], Speeds[1], Speeds[2], Speeds[3],
 8101cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101cdc:	681b      	ldr	r3, [r3, #0]
	  printf("avgMotor1: %.2f\r\n"
 8101cde:	4618      	mov	r0, r3
 8101ce0:	f7fe fcba 	bl	8100658 <__aeabi_f2d>
 8101ce4:	e9c7 0108 	strd	r0, r1, [r7, #32]
			  avgMotor1, avgMotor2, avgMotor3, avgMotor4, Speeds[0], Speeds[1], Speeds[2], Speeds[3],
 8101ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101cea:	3304      	adds	r3, #4
 8101cec:	681b      	ldr	r3, [r3, #0]
	  printf("avgMotor1: %.2f\r\n"
 8101cee:	4618      	mov	r0, r3
 8101cf0:	f7fe fcb2 	bl	8100658 <__aeabi_f2d>
 8101cf4:	e9c7 0106 	strd	r0, r1, [r7, #24]
			  avgMotor1, avgMotor2, avgMotor3, avgMotor4, Speeds[0], Speeds[1], Speeds[2], Speeds[3],
 8101cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101cfa:	3308      	adds	r3, #8
 8101cfc:	681b      	ldr	r3, [r3, #0]
	  printf("avgMotor1: %.2f\r\n"
 8101cfe:	4618      	mov	r0, r3
 8101d00:	f7fe fcaa 	bl	8100658 <__aeabi_f2d>
 8101d04:	e9c7 0104 	strd	r0, r1, [r7, #16]
			  avgMotor1, avgMotor2, avgMotor3, avgMotor4, Speeds[0], Speeds[1], Speeds[2], Speeds[3],
 8101d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101d0a:	330c      	adds	r3, #12
 8101d0c:	681b      	ldr	r3, [r3, #0]
	  printf("avgMotor1: %.2f\r\n"
 8101d0e:	4618      	mov	r0, r3
 8101d10:	f7fe fca2 	bl	8100658 <__aeabi_f2d>
 8101d14:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8101d18:	4b39      	ldr	r3, [pc, #228]	; (8101e00 <stabilizeMotors+0x3c8>)
 8101d1a:	ed93 bb00 	vldr	d11, [r3]
 8101d1e:	4b39      	ldr	r3, [pc, #228]	; (8101e04 <stabilizeMotors+0x3cc>)
 8101d20:	ed93 ab00 	vldr	d10, [r3]
 8101d24:	4b38      	ldr	r3, [pc, #224]	; (8101e08 <stabilizeMotors+0x3d0>)
 8101d26:	ed93 9b00 	vldr	d9, [r3]
 8101d2a:	4b38      	ldr	r3, [pc, #224]	; (8101e0c <stabilizeMotors+0x3d4>)
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	607b      	str	r3, [r7, #4]
 8101d30:	4b37      	ldr	r3, [pc, #220]	; (8101e10 <stabilizeMotors+0x3d8>)
 8101d32:	ed93 8b00 	vldr	d8, [r3]
 8101d36:	4b37      	ldr	r3, [pc, #220]	; (8101e14 <stabilizeMotors+0x3dc>)
 8101d38:	681e      	ldr	r6, [r3, #0]
			  roll, pitch, yaw, rif_yaw, yaw_setpoint, flag_control,
			  virtualInputs[0],virtualInputs[1],virtualInputs[2],virtualInputs[3]);
 8101d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	  printf("avgMotor1: %.2f\r\n"
 8101d3c:	4618      	mov	r0, r3
 8101d3e:	f7fe fc8b 	bl	8100658 <__aeabi_f2d>
 8101d42:	4682      	mov	sl, r0
 8101d44:	468b      	mov	fp, r1
			  virtualInputs[0],virtualInputs[1],virtualInputs[2],virtualInputs[3]);
 8101d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	  printf("avgMotor1: %.2f\r\n"
 8101d48:	4618      	mov	r0, r3
 8101d4a:	f7fe fc85 	bl	8100658 <__aeabi_f2d>
 8101d4e:	4680      	mov	r8, r0
 8101d50:	4689      	mov	r9, r1
			  virtualInputs[0],virtualInputs[1],virtualInputs[2],virtualInputs[3]);
 8101d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	  printf("avgMotor1: %.2f\r\n"
 8101d54:	4618      	mov	r0, r3
 8101d56:	f7fe fc7f 	bl	8100658 <__aeabi_f2d>
 8101d5a:	4604      	mov	r4, r0
 8101d5c:	460d      	mov	r5, r1
			  virtualInputs[0],virtualInputs[1],virtualInputs[2],virtualInputs[3]);
 8101d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	  printf("avgMotor1: %.2f\r\n"
 8101d60:	4618      	mov	r0, r3
 8101d62:	f7fe fc79 	bl	8100658 <__aeabi_f2d>
 8101d66:	4602      	mov	r2, r0
 8101d68:	460b      	mov	r3, r1
 8101d6a:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8101d6e:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8101d72:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8101d76:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 8101d7a:	9618      	str	r6, [sp, #96]	; 0x60
 8101d7c:	ed8d 8b16 	vstr	d8, [sp, #88]	; 0x58
 8101d80:	687b      	ldr	r3, [r7, #4]
 8101d82:	9314      	str	r3, [sp, #80]	; 0x50
 8101d84:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
 8101d88:	ed8d ab10 	vstr	d10, [sp, #64]	; 0x40
 8101d8c:	ed8d bb0e 	vstr	d11, [sp, #56]	; 0x38
 8101d90:	ed97 7b02 	vldr	d7, [r7, #8]
 8101d94:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8101d98:	ed97 7b04 	vldr	d7, [r7, #16]
 8101d9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8101da0:	ed97 7b06 	vldr	d7, [r7, #24]
 8101da4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8101da8:	ed97 7b08 	vldr	d7, [r7, #32]
 8101dac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8101db0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8101db4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8101db8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8101dbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8101dc0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8101dc4:	ed8d 7b00 	vstr	d7, [sp]
 8101dc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8101dcc:	4812      	ldr	r0, [pc, #72]	; (8101e18 <stabilizeMotors+0x3e0>)
 8101dce:	f008 fe99 	bl	810ab04 <iprintf>
	  flag_print=0;
 8101dd2:	4b0a      	ldr	r3, [pc, #40]	; (8101dfc <stabilizeMotors+0x3c4>)
 8101dd4:	2200      	movs	r2, #0
 8101dd6:	601a      	str	r2, [r3, #0]
	}

	setPwm(avgMotor1, avgMotor2, avgMotor3, avgMotor4);
 8101dd8:	edd7 1a17 	vldr	s3, [r7, #92]	; 0x5c
 8101ddc:	ed97 1a18 	vldr	s2, [r7, #96]	; 0x60
 8101de0:	edd7 0a19 	vldr	s1, [r7, #100]	; 0x64
 8101de4:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8101de8:	f000 fdc2 	bl	8102970 <setPwm>
}
 8101dec:	bf00      	nop
 8101dee:	3774      	adds	r7, #116	; 0x74
 8101df0:	46bd      	mov	sp, r7
 8101df2:	ecbd 8b08 	vpop	{d8-d11}
 8101df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8101dfa:	bf00      	nop
 8101dfc:	100004a8 	.word	0x100004a8
 8101e00:	100004b8 	.word	0x100004b8
 8101e04:	100004c0 	.word	0x100004c0
 8101e08:	100004c8 	.word	0x100004c8
 8101e0c:	100004b4 	.word	0x100004b4
 8101e10:	10000550 	.word	0x10000550
 8101e14:	1000055c 	.word	0x1000055c
 8101e18:	0810e724 	.word	0x0810e724

08101e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101e1c:	b5b0      	push	{r4, r5, r7, lr}
 8101e1e:	b082      	sub	sp, #8
 8101e20:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101e22:	4ba9      	ldr	r3, [pc, #676]	; (81020c8 <main+0x2ac>)
 8101e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e28:	4aa7      	ldr	r2, [pc, #668]	; (81020c8 <main+0x2ac>)
 8101e2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e32:	4ba5      	ldr	r3, [pc, #660]	; (81020c8 <main+0x2ac>)
 8101e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101e3c:	607b      	str	r3, [r7, #4]
 8101e3e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101e40:	2001      	movs	r0, #1
 8101e42:	f001 feb5 	bl	8103bb0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101e46:	f002 fd63 	bl	8104910 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101e4a:	2201      	movs	r2, #1
 8101e4c:	2102      	movs	r1, #2
 8101e4e:	2000      	movs	r0, #0
 8101e50:	f002 fce4 	bl	810481c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101e54:	4b9d      	ldr	r3, [pc, #628]	; (81020cc <main+0x2b0>)
 8101e56:	681b      	ldr	r3, [r3, #0]
 8101e58:	091b      	lsrs	r3, r3, #4
 8101e5a:	f003 030f 	and.w	r3, r3, #15
 8101e5e:	2b07      	cmp	r3, #7
 8101e60:	d108      	bne.n	8101e74 <main+0x58>
 8101e62:	4b9b      	ldr	r3, [pc, #620]	; (81020d0 <main+0x2b4>)
 8101e64:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101e68:	4a99      	ldr	r2, [pc, #612]	; (81020d0 <main+0x2b4>)
 8101e6a:	f043 0301 	orr.w	r3, r3, #1
 8101e6e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101e72:	e007      	b.n	8101e84 <main+0x68>
 8101e74:	4b96      	ldr	r3, [pc, #600]	; (81020d0 <main+0x2b4>)
 8101e76:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101e7a:	4a95      	ldr	r2, [pc, #596]	; (81020d0 <main+0x2b4>)
 8101e7c:	f043 0301 	orr.w	r3, r3, #1
 8101e80:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101e84:	f001 face 	bl	8103424 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101e88:	f000 fc0a 	bl	81026a0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8101e8c:	f000 f994 	bl	81021b8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8101e90:	f000 fa84 	bl	810239c <MX_TIM3_Init>
  MX_TIM2_Init();
 8101e94:	f000 f9e4 	bl	8102260 <MX_TIM2_Init>
  MX_TIM5_Init();
 8101e98:	f000 fb18 	bl	81024cc <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8101e9c:	f000 fbb4 	bl	8102608 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8101ea0:	f000 f94a 	bl	8102138 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8101ea4:	488b      	ldr	r0, [pc, #556]	; (81020d4 <main+0x2b8>)
 8101ea6:	f004 fd9d 	bl	81069e4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8101eaa:	2100      	movs	r1, #0
 8101eac:	488a      	ldr	r0, [pc, #552]	; (81020d8 <main+0x2bc>)
 8101eae:	f005 f8e7 	bl	8107080 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8101eb2:	2104      	movs	r1, #4
 8101eb4:	4888      	ldr	r0, [pc, #544]	; (81020d8 <main+0x2bc>)
 8101eb6:	f004 ffdf 	bl	8106e78 <HAL_TIM_IC_Start>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8101eba:	2100      	movs	r1, #0
 8101ebc:	4887      	ldr	r0, [pc, #540]	; (81020dc <main+0x2c0>)
 8101ebe:	f004 fe6b 	bl	8106b98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8101ec2:	2104      	movs	r1, #4
 8101ec4:	4885      	ldr	r0, [pc, #532]	; (81020dc <main+0x2c0>)
 8101ec6:	f004 fe67 	bl	8106b98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8101eca:	2108      	movs	r1, #8
 8101ecc:	4883      	ldr	r0, [pc, #524]	; (81020dc <main+0x2c0>)
 8101ece:	f004 fe63 	bl	8106b98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8101ed2:	210c      	movs	r1, #12
 8101ed4:	4881      	ldr	r0, [pc, #516]	; (81020dc <main+0x2c0>)
 8101ed6:	f004 fe5f 	bl	8106b98 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8101eda:	2100      	movs	r1, #0
 8101edc:	4880      	ldr	r0, [pc, #512]	; (81020e0 <main+0x2c4>)
 8101ede:	f005 f8cf 	bl	8107080 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8101ee2:	2104      	movs	r1, #4
 8101ee4:	487e      	ldr	r0, [pc, #504]	; (81020e0 <main+0x2c4>)
 8101ee6:	f004 ffc7 	bl	8106e78 <HAL_TIM_IC_Start>

  bno055_assignI2C(&hi2c1);
 8101eea:	487e      	ldr	r0, [pc, #504]	; (81020e4 <main+0x2c8>)
 8101eec:	f7ff f920 	bl	8101130 <bno055_assignI2C>
  bno055_init();
 8101ef0:	f7ff f9d4 	bl	810129c <bno055_init>
  bno055_setOperationModeNDOF();
 8101ef4:	f7ff f9cb 	bl	810128e <bno055_setOperationModeNDOF>

  PID_Init(&PitchPID, kpp, kip, kdp, dt, -1.3, 1.3);
 8101ef8:	4b7b      	ldr	r3, [pc, #492]	; (81020e8 <main+0x2cc>)
 8101efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101efe:	4610      	mov	r0, r2
 8101f00:	4619      	mov	r1, r3
 8101f02:	f7fe fef9 	bl	8100cf8 <__aeabi_d2f>
 8101f06:	4604      	mov	r4, r0
 8101f08:	4b78      	ldr	r3, [pc, #480]	; (81020ec <main+0x2d0>)
 8101f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f0e:	4610      	mov	r0, r2
 8101f10:	4619      	mov	r1, r3
 8101f12:	f7fe fef1 	bl	8100cf8 <__aeabi_d2f>
 8101f16:	4605      	mov	r5, r0
 8101f18:	4b75      	ldr	r3, [pc, #468]	; (81020f0 <main+0x2d4>)
 8101f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f1e:	4610      	mov	r0, r2
 8101f20:	4619      	mov	r1, r3
 8101f22:	f7fe fee9 	bl	8100cf8 <__aeabi_d2f>
 8101f26:	4602      	mov	r2, r0
 8101f28:	4b72      	ldr	r3, [pc, #456]	; (81020f4 <main+0x2d8>)
 8101f2a:	edd3 7a00 	vldr	s15, [r3]
 8101f2e:	eddf 2a72 	vldr	s5, [pc, #456]	; 81020f8 <main+0x2dc>
 8101f32:	ed9f 2a72 	vldr	s4, [pc, #456]	; 81020fc <main+0x2e0>
 8101f36:	eef0 1a67 	vmov.f32	s3, s15
 8101f3a:	ee01 2a10 	vmov	s2, r2
 8101f3e:	ee00 5a90 	vmov	s1, r5
 8101f42:	ee00 4a10 	vmov	s0, r4
 8101f46:	486e      	ldr	r0, [pc, #440]	; (8102100 <main+0x2e4>)
 8101f48:	f7ff fb19 	bl	810157e <PID_Init>
  PID_Init(&RollPID, kpr, kir, kdr, dt, -1.3, 1.3);
 8101f4c:	4b6d      	ldr	r3, [pc, #436]	; (8102104 <main+0x2e8>)
 8101f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f52:	4610      	mov	r0, r2
 8101f54:	4619      	mov	r1, r3
 8101f56:	f7fe fecf 	bl	8100cf8 <__aeabi_d2f>
 8101f5a:	4604      	mov	r4, r0
 8101f5c:	4b6a      	ldr	r3, [pc, #424]	; (8102108 <main+0x2ec>)
 8101f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f62:	4610      	mov	r0, r2
 8101f64:	4619      	mov	r1, r3
 8101f66:	f7fe fec7 	bl	8100cf8 <__aeabi_d2f>
 8101f6a:	4605      	mov	r5, r0
 8101f6c:	4b67      	ldr	r3, [pc, #412]	; (810210c <main+0x2f0>)
 8101f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f72:	4610      	mov	r0, r2
 8101f74:	4619      	mov	r1, r3
 8101f76:	f7fe febf 	bl	8100cf8 <__aeabi_d2f>
 8101f7a:	4602      	mov	r2, r0
 8101f7c:	4b5d      	ldr	r3, [pc, #372]	; (81020f4 <main+0x2d8>)
 8101f7e:	edd3 7a00 	vldr	s15, [r3]
 8101f82:	eddf 2a5d 	vldr	s5, [pc, #372]	; 81020f8 <main+0x2dc>
 8101f86:	ed9f 2a5d 	vldr	s4, [pc, #372]	; 81020fc <main+0x2e0>
 8101f8a:	eef0 1a67 	vmov.f32	s3, s15
 8101f8e:	ee01 2a10 	vmov	s2, r2
 8101f92:	ee00 5a90 	vmov	s1, r5
 8101f96:	ee00 4a10 	vmov	s0, r4
 8101f9a:	485d      	ldr	r0, [pc, #372]	; (8102110 <main+0x2f4>)
 8101f9c:	f7ff faef 	bl	810157e <PID_Init>
  PID_Init(&YawPID, kpy, kiy, kpy, dt, -1.3, 1.3); //Valori di prova
 8101fa0:	4b5c      	ldr	r3, [pc, #368]	; (8102114 <main+0x2f8>)
 8101fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fa6:	4610      	mov	r0, r2
 8101fa8:	4619      	mov	r1, r3
 8101faa:	f7fe fea5 	bl	8100cf8 <__aeabi_d2f>
 8101fae:	4604      	mov	r4, r0
 8101fb0:	4b59      	ldr	r3, [pc, #356]	; (8102118 <main+0x2fc>)
 8101fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fb6:	4610      	mov	r0, r2
 8101fb8:	4619      	mov	r1, r3
 8101fba:	f7fe fe9d 	bl	8100cf8 <__aeabi_d2f>
 8101fbe:	4605      	mov	r5, r0
 8101fc0:	4b54      	ldr	r3, [pc, #336]	; (8102114 <main+0x2f8>)
 8101fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fc6:	4610      	mov	r0, r2
 8101fc8:	4619      	mov	r1, r3
 8101fca:	f7fe fe95 	bl	8100cf8 <__aeabi_d2f>
 8101fce:	4602      	mov	r2, r0
 8101fd0:	4b48      	ldr	r3, [pc, #288]	; (81020f4 <main+0x2d8>)
 8101fd2:	edd3 7a00 	vldr	s15, [r3]
 8101fd6:	eddf 2a48 	vldr	s5, [pc, #288]	; 81020f8 <main+0x2dc>
 8101fda:	ed9f 2a48 	vldr	s4, [pc, #288]	; 81020fc <main+0x2e0>
 8101fde:	eef0 1a67 	vmov.f32	s3, s15
 8101fe2:	ee01 2a10 	vmov	s2, r2
 8101fe6:	ee00 5a90 	vmov	s1, r5
 8101fea:	ee00 4a10 	vmov	s0, r4
 8101fee:	484b      	ldr	r0, [pc, #300]	; (810211c <main+0x300>)
 8101ff0:	f7ff fac5 	bl	810157e <PID_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flagTim1)
 8101ff4:	4b4a      	ldr	r3, [pc, #296]	; (8102120 <main+0x304>)
 8101ff6:	681b      	ldr	r3, [r3, #0]
 8101ff8:	2b00      	cmp	r3, #0
 8101ffa:	d0fb      	beq.n	8101ff4 <main+0x1d8>
	  {
		if(calibrateFlag)
 8101ffc:	4b49      	ldr	r3, [pc, #292]	; (8102124 <main+0x308>)
 8101ffe:	681b      	ldr	r3, [r3, #0]
 8102000:	2b00      	cmp	r3, #0
 8102002:	d004      	beq.n	810200e <main+0x1f2>
		{
			calibrateFlag = 0;
 8102004:	4b47      	ldr	r3, [pc, #284]	; (8102124 <main+0x308>)
 8102006:	2200      	movs	r2, #0
 8102008:	601a      	str	r2, [r3, #0]
			ESC_Calibrate(); //ATTACCA LA BATTERIA DOPO AVER SETTATO IL PWM PER GLI ESC = LIMIT_DUTY
 810200a:	f000 fdf7 	bl	8102bfc <ESC_Calibrate>
		}

		if(final)
 810200e:	4b46      	ldr	r3, [pc, #280]	; (8102128 <main+0x30c>)
 8102010:	681b      	ldr	r3, [r3, #0]
 8102012:	2b00      	cmp	r3, #0
 8102014:	d0ee      	beq.n	8101ff4 <main+0x1d8>
		{
			switch (i) //Vedere come mettere più istruzioni in un singolo case dello switch
 8102016:	4b45      	ldr	r3, [pc, #276]	; (810212c <main+0x310>)
 8102018:	681b      	ldr	r3, [r3, #0]
 810201a:	2b02      	cmp	r3, #2
 810201c:	d02c      	beq.n	8102078 <main+0x25c>
 810201e:	2b02      	cmp	r3, #2
 8102020:	dc3d      	bgt.n	810209e <main+0x282>
 8102022:	2b00      	cmp	r3, #0
 8102024:	d002      	beq.n	810202c <main+0x210>
 8102026:	2b01      	cmp	r3, #1
 8102028:	d013      	beq.n	8102052 <main+0x236>
 810202a:	e038      	b.n	810209e <main+0x282>
			{
				case 0: // Stato 0: Motore spento
					stopMotors();
 810202c:	f000 fe84 	bl	8102d38 <stopMotors>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //Led verde
 8102030:	2200      	movs	r2, #0
 8102032:	2101      	movs	r1, #1
 8102034:	483e      	ldr	r0, [pc, #248]	; (8102130 <main+0x314>)
 8102036:	f001 fda1 	bl	8103b7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET); //Led giallo
 810203a:	2200      	movs	r2, #0
 810203c:	2102      	movs	r1, #2
 810203e:	483d      	ldr	r0, [pc, #244]	; (8102134 <main+0x318>)
 8102040:	f001 fd9c 	bl	8103b7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Led rosso
 8102044:	2201      	movs	r2, #1
 8102046:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810204a:	4839      	ldr	r0, [pc, #228]	; (8102130 <main+0x314>)
 810204c:	f001 fd96 	bl	8103b7c <HAL_GPIO_WritePin>
					break;
 8102050:	e038      	b.n	81020c4 <main+0x2a8>

				case 1: // Stato 1: Motore in armamento
					armMotors();
 8102052:	f000 fe61 	bl	8102d18 <armMotors>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //Led verde
 8102056:	2200      	movs	r2, #0
 8102058:	2101      	movs	r1, #1
 810205a:	4835      	ldr	r0, [pc, #212]	; (8102130 <main+0x314>)
 810205c:	f001 fd8e 	bl	8103b7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET); //Led giallo
 8102060:	2201      	movs	r2, #1
 8102062:	2102      	movs	r1, #2
 8102064:	4833      	ldr	r0, [pc, #204]	; (8102134 <main+0x318>)
 8102066:	f001 fd89 	bl	8103b7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Led rosso
 810206a:	2200      	movs	r2, #0
 810206c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8102070:	482f      	ldr	r0, [pc, #188]	; (8102130 <main+0x314>)
 8102072:	f001 fd83 	bl	8103b7c <HAL_GPIO_WritePin>
					break;
 8102076:	e025      	b.n	81020c4 <main+0x2a8>

				case 2: // Stato 2: Motore in esecuzione
					stabilizeMotors();
 8102078:	f7ff fcde 	bl	8101a38 <stabilizeMotors>
					  printf("Speed13: %.2f\r\n", dutyMinYaw);
					  flag_print=0;
					}
					*/

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //Led verde
 810207c:	2201      	movs	r2, #1
 810207e:	2101      	movs	r1, #1
 8102080:	482b      	ldr	r0, [pc, #172]	; (8102130 <main+0x314>)
 8102082:	f001 fd7b 	bl	8103b7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET); //Led giallo
 8102086:	2200      	movs	r2, #0
 8102088:	2102      	movs	r1, #2
 810208a:	482a      	ldr	r0, [pc, #168]	; (8102134 <main+0x318>)
 810208c:	f001 fd76 	bl	8103b7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Led rosso
 8102090:	2200      	movs	r2, #0
 8102092:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8102096:	4826      	ldr	r0, [pc, #152]	; (8102130 <main+0x314>)
 8102098:	f001 fd70 	bl	8103b7c <HAL_GPIO_WritePin>
					break;
 810209c:	e012      	b.n	81020c4 <main+0x2a8>

				default: // Motori fermi
					stopMotors();
 810209e:	f000 fe4b 	bl	8102d38 <stopMotors>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //Led verde
 81020a2:	2200      	movs	r2, #0
 81020a4:	2101      	movs	r1, #1
 81020a6:	4822      	ldr	r0, [pc, #136]	; (8102130 <main+0x314>)
 81020a8:	f001 fd68 	bl	8103b7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET); //Led giallo
 81020ac:	2200      	movs	r2, #0
 81020ae:	2102      	movs	r1, #2
 81020b0:	4820      	ldr	r0, [pc, #128]	; (8102134 <main+0x318>)
 81020b2:	f001 fd63 	bl	8103b7c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Led rosso
 81020b6:	2201      	movs	r2, #1
 81020b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81020bc:	481c      	ldr	r0, [pc, #112]	; (8102130 <main+0x314>)
 81020be:	f001 fd5d 	bl	8103b7c <HAL_GPIO_WritePin>
					break;
 81020c2:	bf00      	nop
	  if(flagTim1)
 81020c4:	e796      	b.n	8101ff4 <main+0x1d8>
 81020c6:	bf00      	nop
 81020c8:	58024400 	.word	0x58024400
 81020cc:	e000ed00 	.word	0xe000ed00
 81020d0:	58026400 	.word	0x58026400
 81020d4:	100002dc 	.word	0x100002dc
 81020d8:	10000328 	.word	0x10000328
 81020dc:	10000374 	.word	0x10000374
 81020e0:	100003c0 	.word	0x100003c0
 81020e4:	10000288 	.word	0x10000288
 81020e8:	10000048 	.word	0x10000048
 81020ec:	10000050 	.word	0x10000050
 81020f0:	10000058 	.word	0x10000058
 81020f4:	1000002c 	.word	0x1000002c
 81020f8:	3fa66666 	.word	0x3fa66666
 81020fc:	bfa66666 	.word	0xbfa66666
 8102100:	100004d0 	.word	0x100004d0
 8102104:	10000030 	.word	0x10000030
 8102108:	10000038 	.word	0x10000038
 810210c:	10000040 	.word	0x10000040
 8102110:	100004f4 	.word	0x100004f4
 8102114:	10000060 	.word	0x10000060
 8102118:	10000540 	.word	0x10000540
 810211c:	10000518 	.word	0x10000518
 8102120:	100004a4 	.word	0x100004a4
 8102124:	100004a0 	.word	0x100004a0
 8102128:	10000028 	.word	0x10000028
 810212c:	100004b0 	.word	0x100004b0
 8102130:	58020400 	.word	0x58020400
 8102134:	58021000 	.word	0x58021000

08102138 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8102138:	b580      	push	{r7, lr}
 810213a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 810213c:	4b1b      	ldr	r3, [pc, #108]	; (81021ac <MX_I2C1_Init+0x74>)
 810213e:	4a1c      	ldr	r2, [pc, #112]	; (81021b0 <MX_I2C1_Init+0x78>)
 8102140:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8102142:	4b1a      	ldr	r3, [pc, #104]	; (81021ac <MX_I2C1_Init+0x74>)
 8102144:	4a1b      	ldr	r2, [pc, #108]	; (81021b4 <MX_I2C1_Init+0x7c>)
 8102146:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8102148:	4b18      	ldr	r3, [pc, #96]	; (81021ac <MX_I2C1_Init+0x74>)
 810214a:	2200      	movs	r2, #0
 810214c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810214e:	4b17      	ldr	r3, [pc, #92]	; (81021ac <MX_I2C1_Init+0x74>)
 8102150:	2201      	movs	r2, #1
 8102152:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102154:	4b15      	ldr	r3, [pc, #84]	; (81021ac <MX_I2C1_Init+0x74>)
 8102156:	2200      	movs	r2, #0
 8102158:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810215a:	4b14      	ldr	r3, [pc, #80]	; (81021ac <MX_I2C1_Init+0x74>)
 810215c:	2200      	movs	r2, #0
 810215e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102160:	4b12      	ldr	r3, [pc, #72]	; (81021ac <MX_I2C1_Init+0x74>)
 8102162:	2200      	movs	r2, #0
 8102164:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8102166:	4b11      	ldr	r3, [pc, #68]	; (81021ac <MX_I2C1_Init+0x74>)
 8102168:	2200      	movs	r2, #0
 810216a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 810216c:	4b0f      	ldr	r3, [pc, #60]	; (81021ac <MX_I2C1_Init+0x74>)
 810216e:	2200      	movs	r2, #0
 8102170:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8102172:	480e      	ldr	r0, [pc, #56]	; (81021ac <MX_I2C1_Init+0x74>)
 8102174:	f001 fd2e 	bl	8103bd4 <HAL_I2C_Init>
 8102178:	4603      	mov	r3, r0
 810217a:	2b00      	cmp	r3, #0
 810217c:	d001      	beq.n	8102182 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810217e:	f000 fbef 	bl	8102960 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8102182:	2100      	movs	r1, #0
 8102184:	4809      	ldr	r0, [pc, #36]	; (81021ac <MX_I2C1_Init+0x74>)
 8102186:	f002 fab1 	bl	81046ec <HAL_I2CEx_ConfigAnalogFilter>
 810218a:	4603      	mov	r3, r0
 810218c:	2b00      	cmp	r3, #0
 810218e:	d001      	beq.n	8102194 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8102190:	f000 fbe6 	bl	8102960 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8102194:	2100      	movs	r1, #0
 8102196:	4805      	ldr	r0, [pc, #20]	; (81021ac <MX_I2C1_Init+0x74>)
 8102198:	f002 faf3 	bl	8104782 <HAL_I2CEx_ConfigDigitalFilter>
 810219c:	4603      	mov	r3, r0
 810219e:	2b00      	cmp	r3, #0
 81021a0:	d001      	beq.n	81021a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81021a2:	f000 fbdd 	bl	8102960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 81021a6:	bf00      	nop
 81021a8:	bd80      	pop	{r7, pc}
 81021aa:	bf00      	nop
 81021ac:	10000288 	.word	0x10000288
 81021b0:	40005400 	.word	0x40005400
 81021b4:	00300f38 	.word	0x00300f38

081021b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81021b8:	b580      	push	{r7, lr}
 81021ba:	b088      	sub	sp, #32
 81021bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81021be:	f107 0310 	add.w	r3, r7, #16
 81021c2:	2200      	movs	r2, #0
 81021c4:	601a      	str	r2, [r3, #0]
 81021c6:	605a      	str	r2, [r3, #4]
 81021c8:	609a      	str	r2, [r3, #8]
 81021ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81021cc:	1d3b      	adds	r3, r7, #4
 81021ce:	2200      	movs	r2, #0
 81021d0:	601a      	str	r2, [r3, #0]
 81021d2:	605a      	str	r2, [r3, #4]
 81021d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81021d6:	4b20      	ldr	r3, [pc, #128]	; (8102258 <MX_TIM1_Init+0xa0>)
 81021d8:	4a20      	ldr	r2, [pc, #128]	; (810225c <MX_TIM1_Init+0xa4>)
 81021da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 81021dc:	4b1e      	ldr	r3, [pc, #120]	; (8102258 <MX_TIM1_Init+0xa0>)
 81021de:	223f      	movs	r2, #63	; 0x3f
 81021e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81021e2:	4b1d      	ldr	r3, [pc, #116]	; (8102258 <MX_TIM1_Init+0xa0>)
 81021e4:	2200      	movs	r2, #0
 81021e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 81021e8:	4b1b      	ldr	r3, [pc, #108]	; (8102258 <MX_TIM1_Init+0xa0>)
 81021ea:	f242 720f 	movw	r2, #9999	; 0x270f
 81021ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81021f0:	4b19      	ldr	r3, [pc, #100]	; (8102258 <MX_TIM1_Init+0xa0>)
 81021f2:	2200      	movs	r2, #0
 81021f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81021f6:	4b18      	ldr	r3, [pc, #96]	; (8102258 <MX_TIM1_Init+0xa0>)
 81021f8:	2200      	movs	r2, #0
 81021fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81021fc:	4b16      	ldr	r3, [pc, #88]	; (8102258 <MX_TIM1_Init+0xa0>)
 81021fe:	2200      	movs	r2, #0
 8102200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8102202:	4815      	ldr	r0, [pc, #84]	; (8102258 <MX_TIM1_Init+0xa0>)
 8102204:	f004 fb96 	bl	8106934 <HAL_TIM_Base_Init>
 8102208:	4603      	mov	r3, r0
 810220a:	2b00      	cmp	r3, #0
 810220c:	d001      	beq.n	8102212 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 810220e:	f000 fba7 	bl	8102960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102216:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8102218:	f107 0310 	add.w	r3, r7, #16
 810221c:	4619      	mov	r1, r3
 810221e:	480e      	ldr	r0, [pc, #56]	; (8102258 <MX_TIM1_Init+0xa0>)
 8102220:	f005 fb36 	bl	8107890 <HAL_TIM_ConfigClockSource>
 8102224:	4603      	mov	r3, r0
 8102226:	2b00      	cmp	r3, #0
 8102228:	d001      	beq.n	810222e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 810222a:	f000 fb99 	bl	8102960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810222e:	2300      	movs	r3, #0
 8102230:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8102232:	2300      	movs	r3, #0
 8102234:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102236:	2300      	movs	r3, #0
 8102238:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 810223a:	1d3b      	adds	r3, r7, #4
 810223c:	4619      	mov	r1, r3
 810223e:	4806      	ldr	r0, [pc, #24]	; (8102258 <MX_TIM1_Init+0xa0>)
 8102240:	f006 fb14 	bl	810886c <HAL_TIMEx_MasterConfigSynchronization>
 8102244:	4603      	mov	r3, r0
 8102246:	2b00      	cmp	r3, #0
 8102248:	d001      	beq.n	810224e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 810224a:	f000 fb89 	bl	8102960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 810224e:	bf00      	nop
 8102250:	3720      	adds	r7, #32
 8102252:	46bd      	mov	sp, r7
 8102254:	bd80      	pop	{r7, pc}
 8102256:	bf00      	nop
 8102258:	100002dc 	.word	0x100002dc
 810225c:	40010000 	.word	0x40010000

08102260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8102260:	b580      	push	{r7, lr}
 8102262:	b090      	sub	sp, #64	; 0x40
 8102264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810226a:	2200      	movs	r2, #0
 810226c:	601a      	str	r2, [r3, #0]
 810226e:	605a      	str	r2, [r3, #4]
 8102270:	609a      	str	r2, [r3, #8]
 8102272:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8102274:	f107 031c 	add.w	r3, r7, #28
 8102278:	2200      	movs	r2, #0
 810227a:	601a      	str	r2, [r3, #0]
 810227c:	605a      	str	r2, [r3, #4]
 810227e:	609a      	str	r2, [r3, #8]
 8102280:	60da      	str	r2, [r3, #12]
 8102282:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8102284:	f107 030c 	add.w	r3, r7, #12
 8102288:	2200      	movs	r2, #0
 810228a:	601a      	str	r2, [r3, #0]
 810228c:	605a      	str	r2, [r3, #4]
 810228e:	609a      	str	r2, [r3, #8]
 8102290:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102292:	463b      	mov	r3, r7
 8102294:	2200      	movs	r2, #0
 8102296:	601a      	str	r2, [r3, #0]
 8102298:	605a      	str	r2, [r3, #4]
 810229a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 810229c:	4b3e      	ldr	r3, [pc, #248]	; (8102398 <MX_TIM2_Init+0x138>)
 810229e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81022a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 81022a4:	4b3c      	ldr	r3, [pc, #240]	; (8102398 <MX_TIM2_Init+0x138>)
 81022a6:	223f      	movs	r2, #63	; 0x3f
 81022a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81022aa:	4b3b      	ldr	r3, [pc, #236]	; (8102398 <MX_TIM2_Init+0x138>)
 81022ac:	2200      	movs	r2, #0
 81022ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 81022b0:	4b39      	ldr	r3, [pc, #228]	; (8102398 <MX_TIM2_Init+0x138>)
 81022b2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 81022b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81022b8:	4b37      	ldr	r3, [pc, #220]	; (8102398 <MX_TIM2_Init+0x138>)
 81022ba:	2200      	movs	r2, #0
 81022bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81022be:	4b36      	ldr	r3, [pc, #216]	; (8102398 <MX_TIM2_Init+0x138>)
 81022c0:	2200      	movs	r2, #0
 81022c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 81022c4:	4834      	ldr	r0, [pc, #208]	; (8102398 <MX_TIM2_Init+0x138>)
 81022c6:	f004 fb35 	bl	8106934 <HAL_TIM_Base_Init>
 81022ca:	4603      	mov	r3, r0
 81022cc:	2b00      	cmp	r3, #0
 81022ce:	d001      	beq.n	81022d4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 81022d0:	f000 fb46 	bl	8102960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81022d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81022d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 81022da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81022de:	4619      	mov	r1, r3
 81022e0:	482d      	ldr	r0, [pc, #180]	; (8102398 <MX_TIM2_Init+0x138>)
 81022e2:	f005 fad5 	bl	8107890 <HAL_TIM_ConfigClockSource>
 81022e6:	4603      	mov	r3, r0
 81022e8:	2b00      	cmp	r3, #0
 81022ea:	d001      	beq.n	81022f0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 81022ec:	f000 fb38 	bl	8102960 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 81022f0:	4829      	ldr	r0, [pc, #164]	; (8102398 <MX_TIM2_Init+0x138>)
 81022f2:	f004 fd5f 	bl	8106db4 <HAL_TIM_IC_Init>
 81022f6:	4603      	mov	r3, r0
 81022f8:	2b00      	cmp	r3, #0
 81022fa:	d001      	beq.n	8102300 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 81022fc:	f000 fb30 	bl	8102960 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8102300:	2304      	movs	r3, #4
 8102302:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8102304:	2350      	movs	r3, #80	; 0x50
 8102306:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8102308:	2300      	movs	r3, #0
 810230a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 810230c:	2300      	movs	r3, #0
 810230e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8102310:	2300      	movs	r3, #0
 8102312:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8102314:	f107 031c 	add.w	r3, r7, #28
 8102318:	4619      	mov	r1, r3
 810231a:	481f      	ldr	r0, [pc, #124]	; (8102398 <MX_TIM2_Init+0x138>)
 810231c:	f005 fbb0 	bl	8107a80 <HAL_TIM_SlaveConfigSynchro>
 8102320:	4603      	mov	r3, r0
 8102322:	2b00      	cmp	r3, #0
 8102324:	d001      	beq.n	810232a <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8102326:	f000 fb1b 	bl	8102960 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 810232a:	2300      	movs	r3, #0
 810232c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 810232e:	2301      	movs	r3, #1
 8102330:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8102332:	2300      	movs	r3, #0
 8102334:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8102336:	2300      	movs	r3, #0
 8102338:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 810233a:	f107 030c 	add.w	r3, r7, #12
 810233e:	2200      	movs	r2, #0
 8102340:	4619      	mov	r1, r3
 8102342:	4815      	ldr	r0, [pc, #84]	; (8102398 <MX_TIM2_Init+0x138>)
 8102344:	f005 f8f3 	bl	810752e <HAL_TIM_IC_ConfigChannel>
 8102348:	4603      	mov	r3, r0
 810234a:	2b00      	cmp	r3, #0
 810234c:	d001      	beq.n	8102352 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 810234e:	f000 fb07 	bl	8102960 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8102352:	2302      	movs	r3, #2
 8102354:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8102356:	2302      	movs	r3, #2
 8102358:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 810235a:	f107 030c 	add.w	r3, r7, #12
 810235e:	2204      	movs	r2, #4
 8102360:	4619      	mov	r1, r3
 8102362:	480d      	ldr	r0, [pc, #52]	; (8102398 <MX_TIM2_Init+0x138>)
 8102364:	f005 f8e3 	bl	810752e <HAL_TIM_IC_ConfigChannel>
 8102368:	4603      	mov	r3, r0
 810236a:	2b00      	cmp	r3, #0
 810236c:	d001      	beq.n	8102372 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 810236e:	f000 faf7 	bl	8102960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102372:	2300      	movs	r3, #0
 8102374:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102376:	2300      	movs	r3, #0
 8102378:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 810237a:	463b      	mov	r3, r7
 810237c:	4619      	mov	r1, r3
 810237e:	4806      	ldr	r0, [pc, #24]	; (8102398 <MX_TIM2_Init+0x138>)
 8102380:	f006 fa74 	bl	810886c <HAL_TIMEx_MasterConfigSynchronization>
 8102384:	4603      	mov	r3, r0
 8102386:	2b00      	cmp	r3, #0
 8102388:	d001      	beq.n	810238e <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 810238a:	f000 fae9 	bl	8102960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 810238e:	bf00      	nop
 8102390:	3740      	adds	r7, #64	; 0x40
 8102392:	46bd      	mov	sp, r7
 8102394:	bd80      	pop	{r7, pc}
 8102396:	bf00      	nop
 8102398:	10000328 	.word	0x10000328

0810239c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 810239c:	b580      	push	{r7, lr}
 810239e:	b08e      	sub	sp, #56	; 0x38
 81023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81023a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81023a6:	2200      	movs	r2, #0
 81023a8:	601a      	str	r2, [r3, #0]
 81023aa:	605a      	str	r2, [r3, #4]
 81023ac:	609a      	str	r2, [r3, #8]
 81023ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81023b0:	f107 031c 	add.w	r3, r7, #28
 81023b4:	2200      	movs	r2, #0
 81023b6:	601a      	str	r2, [r3, #0]
 81023b8:	605a      	str	r2, [r3, #4]
 81023ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81023bc:	463b      	mov	r3, r7
 81023be:	2200      	movs	r2, #0
 81023c0:	601a      	str	r2, [r3, #0]
 81023c2:	605a      	str	r2, [r3, #4]
 81023c4:	609a      	str	r2, [r3, #8]
 81023c6:	60da      	str	r2, [r3, #12]
 81023c8:	611a      	str	r2, [r3, #16]
 81023ca:	615a      	str	r2, [r3, #20]
 81023cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81023ce:	4b3d      	ldr	r3, [pc, #244]	; (81024c4 <MX_TIM3_Init+0x128>)
 81023d0:	4a3d      	ldr	r2, [pc, #244]	; (81024c8 <MX_TIM3_Init+0x12c>)
 81023d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 81023d4:	4b3b      	ldr	r3, [pc, #236]	; (81024c4 <MX_TIM3_Init+0x128>)
 81023d6:	223f      	movs	r2, #63	; 0x3f
 81023d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81023da:	4b3a      	ldr	r3, [pc, #232]	; (81024c4 <MX_TIM3_Init+0x128>)
 81023dc:	2200      	movs	r2, #0
 81023de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 81023e0:	4b38      	ldr	r3, [pc, #224]	; (81024c4 <MX_TIM3_Init+0x128>)
 81023e2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 81023e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81023e8:	4b36      	ldr	r3, [pc, #216]	; (81024c4 <MX_TIM3_Init+0x128>)
 81023ea:	2200      	movs	r2, #0
 81023ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81023ee:	4b35      	ldr	r3, [pc, #212]	; (81024c4 <MX_TIM3_Init+0x128>)
 81023f0:	2200      	movs	r2, #0
 81023f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81023f4:	4833      	ldr	r0, [pc, #204]	; (81024c4 <MX_TIM3_Init+0x128>)
 81023f6:	f004 fa9d 	bl	8106934 <HAL_TIM_Base_Init>
 81023fa:	4603      	mov	r3, r0
 81023fc:	2b00      	cmp	r3, #0
 81023fe:	d001      	beq.n	8102404 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8102400:	f000 faae 	bl	8102960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102408:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 810240a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810240e:	4619      	mov	r1, r3
 8102410:	482c      	ldr	r0, [pc, #176]	; (81024c4 <MX_TIM3_Init+0x128>)
 8102412:	f005 fa3d 	bl	8107890 <HAL_TIM_ConfigClockSource>
 8102416:	4603      	mov	r3, r0
 8102418:	2b00      	cmp	r3, #0
 810241a:	d001      	beq.n	8102420 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 810241c:	f000 faa0 	bl	8102960 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8102420:	4828      	ldr	r0, [pc, #160]	; (81024c4 <MX_TIM3_Init+0x128>)
 8102422:	f004 fb57 	bl	8106ad4 <HAL_TIM_PWM_Init>
 8102426:	4603      	mov	r3, r0
 8102428:	2b00      	cmp	r3, #0
 810242a:	d001      	beq.n	8102430 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 810242c:	f000 fa98 	bl	8102960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102430:	2300      	movs	r3, #0
 8102432:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102434:	2300      	movs	r3, #0
 8102436:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102438:	f107 031c 	add.w	r3, r7, #28
 810243c:	4619      	mov	r1, r3
 810243e:	4821      	ldr	r0, [pc, #132]	; (81024c4 <MX_TIM3_Init+0x128>)
 8102440:	f006 fa14 	bl	810886c <HAL_TIMEx_MasterConfigSynchronization>
 8102444:	4603      	mov	r3, r0
 8102446:	2b00      	cmp	r3, #0
 8102448:	d001      	beq.n	810244e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 810244a:	f000 fa89 	bl	8102960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810244e:	2360      	movs	r3, #96	; 0x60
 8102450:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8102452:	2300      	movs	r3, #0
 8102454:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102456:	2300      	movs	r3, #0
 8102458:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810245a:	2300      	movs	r3, #0
 810245c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810245e:	463b      	mov	r3, r7
 8102460:	2200      	movs	r2, #0
 8102462:	4619      	mov	r1, r3
 8102464:	4817      	ldr	r0, [pc, #92]	; (81024c4 <MX_TIM3_Init+0x128>)
 8102466:	f005 f8ff 	bl	8107668 <HAL_TIM_PWM_ConfigChannel>
 810246a:	4603      	mov	r3, r0
 810246c:	2b00      	cmp	r3, #0
 810246e:	d001      	beq.n	8102474 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8102470:	f000 fa76 	bl	8102960 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8102474:	463b      	mov	r3, r7
 8102476:	2204      	movs	r2, #4
 8102478:	4619      	mov	r1, r3
 810247a:	4812      	ldr	r0, [pc, #72]	; (81024c4 <MX_TIM3_Init+0x128>)
 810247c:	f005 f8f4 	bl	8107668 <HAL_TIM_PWM_ConfigChannel>
 8102480:	4603      	mov	r3, r0
 8102482:	2b00      	cmp	r3, #0
 8102484:	d001      	beq.n	810248a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8102486:	f000 fa6b 	bl	8102960 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810248a:	463b      	mov	r3, r7
 810248c:	2208      	movs	r2, #8
 810248e:	4619      	mov	r1, r3
 8102490:	480c      	ldr	r0, [pc, #48]	; (81024c4 <MX_TIM3_Init+0x128>)
 8102492:	f005 f8e9 	bl	8107668 <HAL_TIM_PWM_ConfigChannel>
 8102496:	4603      	mov	r3, r0
 8102498:	2b00      	cmp	r3, #0
 810249a:	d001      	beq.n	81024a0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 810249c:	f000 fa60 	bl	8102960 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 81024a0:	463b      	mov	r3, r7
 81024a2:	220c      	movs	r2, #12
 81024a4:	4619      	mov	r1, r3
 81024a6:	4807      	ldr	r0, [pc, #28]	; (81024c4 <MX_TIM3_Init+0x128>)
 81024a8:	f005 f8de 	bl	8107668 <HAL_TIM_PWM_ConfigChannel>
 81024ac:	4603      	mov	r3, r0
 81024ae:	2b00      	cmp	r3, #0
 81024b0:	d001      	beq.n	81024b6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 81024b2:	f000 fa55 	bl	8102960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 81024b6:	4803      	ldr	r0, [pc, #12]	; (81024c4 <MX_TIM3_Init+0x128>)
 81024b8:	f000 fd92 	bl	8102fe0 <HAL_TIM_MspPostInit>

}
 81024bc:	bf00      	nop
 81024be:	3738      	adds	r7, #56	; 0x38
 81024c0:	46bd      	mov	sp, r7
 81024c2:	bd80      	pop	{r7, pc}
 81024c4:	10000374 	.word	0x10000374
 81024c8:	40000400 	.word	0x40000400

081024cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 81024cc:	b580      	push	{r7, lr}
 81024ce:	b090      	sub	sp, #64	; 0x40
 81024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81024d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81024d6:	2200      	movs	r2, #0
 81024d8:	601a      	str	r2, [r3, #0]
 81024da:	605a      	str	r2, [r3, #4]
 81024dc:	609a      	str	r2, [r3, #8]
 81024de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 81024e0:	f107 031c 	add.w	r3, r7, #28
 81024e4:	2200      	movs	r2, #0
 81024e6:	601a      	str	r2, [r3, #0]
 81024e8:	605a      	str	r2, [r3, #4]
 81024ea:	609a      	str	r2, [r3, #8]
 81024ec:	60da      	str	r2, [r3, #12]
 81024ee:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 81024f0:	f107 030c 	add.w	r3, r7, #12
 81024f4:	2200      	movs	r2, #0
 81024f6:	601a      	str	r2, [r3, #0]
 81024f8:	605a      	str	r2, [r3, #4]
 81024fa:	609a      	str	r2, [r3, #8]
 81024fc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81024fe:	463b      	mov	r3, r7
 8102500:	2200      	movs	r2, #0
 8102502:	601a      	str	r2, [r3, #0]
 8102504:	605a      	str	r2, [r3, #4]
 8102506:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8102508:	4b3d      	ldr	r3, [pc, #244]	; (8102600 <MX_TIM5_Init+0x134>)
 810250a:	4a3e      	ldr	r2, [pc, #248]	; (8102604 <MX_TIM5_Init+0x138>)
 810250c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64-1;
 810250e:	4b3c      	ldr	r3, [pc, #240]	; (8102600 <MX_TIM5_Init+0x134>)
 8102510:	223f      	movs	r2, #63	; 0x3f
 8102512:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102514:	4b3a      	ldr	r3, [pc, #232]	; (8102600 <MX_TIM5_Init+0x134>)
 8102516:	2200      	movs	r2, #0
 8102518:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 810251a:	4b39      	ldr	r3, [pc, #228]	; (8102600 <MX_TIM5_Init+0x134>)
 810251c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8102520:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102522:	4b37      	ldr	r3, [pc, #220]	; (8102600 <MX_TIM5_Init+0x134>)
 8102524:	2200      	movs	r2, #0
 8102526:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102528:	4b35      	ldr	r3, [pc, #212]	; (8102600 <MX_TIM5_Init+0x134>)
 810252a:	2200      	movs	r2, #0
 810252c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 810252e:	4834      	ldr	r0, [pc, #208]	; (8102600 <MX_TIM5_Init+0x134>)
 8102530:	f004 fa00 	bl	8106934 <HAL_TIM_Base_Init>
 8102534:	4603      	mov	r3, r0
 8102536:	2b00      	cmp	r3, #0
 8102538:	d001      	beq.n	810253e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 810253a:	f000 fa11 	bl	8102960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810253e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102542:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8102544:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8102548:	4619      	mov	r1, r3
 810254a:	482d      	ldr	r0, [pc, #180]	; (8102600 <MX_TIM5_Init+0x134>)
 810254c:	f005 f9a0 	bl	8107890 <HAL_TIM_ConfigClockSource>
 8102550:	4603      	mov	r3, r0
 8102552:	2b00      	cmp	r3, #0
 8102554:	d001      	beq.n	810255a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8102556:	f000 fa03 	bl	8102960 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 810255a:	4829      	ldr	r0, [pc, #164]	; (8102600 <MX_TIM5_Init+0x134>)
 810255c:	f004 fc2a 	bl	8106db4 <HAL_TIM_IC_Init>
 8102560:	4603      	mov	r3, r0
 8102562:	2b00      	cmp	r3, #0
 8102564:	d001      	beq.n	810256a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8102566:	f000 f9fb 	bl	8102960 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 810256a:	2304      	movs	r3, #4
 810256c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 810256e:	2350      	movs	r3, #80	; 0x50
 8102570:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8102572:	2300      	movs	r3, #0
 8102574:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8102576:	2300      	movs	r3, #0
 8102578:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 810257a:	2300      	movs	r3, #0
 810257c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 810257e:	f107 031c 	add.w	r3, r7, #28
 8102582:	4619      	mov	r1, r3
 8102584:	481e      	ldr	r0, [pc, #120]	; (8102600 <MX_TIM5_Init+0x134>)
 8102586:	f005 fa7b 	bl	8107a80 <HAL_TIM_SlaveConfigSynchro>
 810258a:	4603      	mov	r3, r0
 810258c:	2b00      	cmp	r3, #0
 810258e:	d001      	beq.n	8102594 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8102590:	f000 f9e6 	bl	8102960 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8102594:	2300      	movs	r3, #0
 8102596:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8102598:	2301      	movs	r3, #1
 810259a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 810259c:	2300      	movs	r3, #0
 810259e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 81025a0:	2300      	movs	r3, #0
 81025a2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 81025a4:	f107 030c 	add.w	r3, r7, #12
 81025a8:	2200      	movs	r2, #0
 81025aa:	4619      	mov	r1, r3
 81025ac:	4814      	ldr	r0, [pc, #80]	; (8102600 <MX_TIM5_Init+0x134>)
 81025ae:	f004 ffbe 	bl	810752e <HAL_TIM_IC_ConfigChannel>
 81025b2:	4603      	mov	r3, r0
 81025b4:	2b00      	cmp	r3, #0
 81025b6:	d001      	beq.n	81025bc <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 81025b8:	f000 f9d2 	bl	8102960 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 81025bc:	2302      	movs	r3, #2
 81025be:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 81025c0:	2302      	movs	r3, #2
 81025c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 81025c4:	f107 030c 	add.w	r3, r7, #12
 81025c8:	2204      	movs	r2, #4
 81025ca:	4619      	mov	r1, r3
 81025cc:	480c      	ldr	r0, [pc, #48]	; (8102600 <MX_TIM5_Init+0x134>)
 81025ce:	f004 ffae 	bl	810752e <HAL_TIM_IC_ConfigChannel>
 81025d2:	4603      	mov	r3, r0
 81025d4:	2b00      	cmp	r3, #0
 81025d6:	d001      	beq.n	81025dc <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 81025d8:	f000 f9c2 	bl	8102960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81025dc:	2300      	movs	r3, #0
 81025de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81025e0:	2300      	movs	r3, #0
 81025e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 81025e4:	463b      	mov	r3, r7
 81025e6:	4619      	mov	r1, r3
 81025e8:	4805      	ldr	r0, [pc, #20]	; (8102600 <MX_TIM5_Init+0x134>)
 81025ea:	f006 f93f 	bl	810886c <HAL_TIMEx_MasterConfigSynchronization>
 81025ee:	4603      	mov	r3, r0
 81025f0:	2b00      	cmp	r3, #0
 81025f2:	d001      	beq.n	81025f8 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 81025f4:	f000 f9b4 	bl	8102960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 81025f8:	bf00      	nop
 81025fa:	3740      	adds	r7, #64	; 0x40
 81025fc:	46bd      	mov	sp, r7
 81025fe:	bd80      	pop	{r7, pc}
 8102600:	100003c0 	.word	0x100003c0
 8102604:	40000c00 	.word	0x40000c00

08102608 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8102608:	b580      	push	{r7, lr}
 810260a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810260c:	4b22      	ldr	r3, [pc, #136]	; (8102698 <MX_USART3_UART_Init+0x90>)
 810260e:	4a23      	ldr	r2, [pc, #140]	; (810269c <MX_USART3_UART_Init+0x94>)
 8102610:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102612:	4b21      	ldr	r3, [pc, #132]	; (8102698 <MX_USART3_UART_Init+0x90>)
 8102614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102618:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810261a:	4b1f      	ldr	r3, [pc, #124]	; (8102698 <MX_USART3_UART_Init+0x90>)
 810261c:	2200      	movs	r2, #0
 810261e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102620:	4b1d      	ldr	r3, [pc, #116]	; (8102698 <MX_USART3_UART_Init+0x90>)
 8102622:	2200      	movs	r2, #0
 8102624:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102626:	4b1c      	ldr	r3, [pc, #112]	; (8102698 <MX_USART3_UART_Init+0x90>)
 8102628:	2200      	movs	r2, #0
 810262a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810262c:	4b1a      	ldr	r3, [pc, #104]	; (8102698 <MX_USART3_UART_Init+0x90>)
 810262e:	220c      	movs	r2, #12
 8102630:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102632:	4b19      	ldr	r3, [pc, #100]	; (8102698 <MX_USART3_UART_Init+0x90>)
 8102634:	2200      	movs	r2, #0
 8102636:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102638:	4b17      	ldr	r3, [pc, #92]	; (8102698 <MX_USART3_UART_Init+0x90>)
 810263a:	2200      	movs	r2, #0
 810263c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810263e:	4b16      	ldr	r3, [pc, #88]	; (8102698 <MX_USART3_UART_Init+0x90>)
 8102640:	2200      	movs	r2, #0
 8102642:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102644:	4b14      	ldr	r3, [pc, #80]	; (8102698 <MX_USART3_UART_Init+0x90>)
 8102646:	2200      	movs	r2, #0
 8102648:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810264a:	4b13      	ldr	r3, [pc, #76]	; (8102698 <MX_USART3_UART_Init+0x90>)
 810264c:	2200      	movs	r2, #0
 810264e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102650:	4811      	ldr	r0, [pc, #68]	; (8102698 <MX_USART3_UART_Init+0x90>)
 8102652:	f006 f9b7 	bl	81089c4 <HAL_UART_Init>
 8102656:	4603      	mov	r3, r0
 8102658:	2b00      	cmp	r3, #0
 810265a:	d001      	beq.n	8102660 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810265c:	f000 f980 	bl	8102960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102660:	2100      	movs	r1, #0
 8102662:	480d      	ldr	r0, [pc, #52]	; (8102698 <MX_USART3_UART_Init+0x90>)
 8102664:	f007 fa4c 	bl	8109b00 <HAL_UARTEx_SetTxFifoThreshold>
 8102668:	4603      	mov	r3, r0
 810266a:	2b00      	cmp	r3, #0
 810266c:	d001      	beq.n	8102672 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810266e:	f000 f977 	bl	8102960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102672:	2100      	movs	r1, #0
 8102674:	4808      	ldr	r0, [pc, #32]	; (8102698 <MX_USART3_UART_Init+0x90>)
 8102676:	f007 fa81 	bl	8109b7c <HAL_UARTEx_SetRxFifoThreshold>
 810267a:	4603      	mov	r3, r0
 810267c:	2b00      	cmp	r3, #0
 810267e:	d001      	beq.n	8102684 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102680:	f000 f96e 	bl	8102960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102684:	4804      	ldr	r0, [pc, #16]	; (8102698 <MX_USART3_UART_Init+0x90>)
 8102686:	f007 fa02 	bl	8109a8e <HAL_UARTEx_DisableFifoMode>
 810268a:	4603      	mov	r3, r0
 810268c:	2b00      	cmp	r3, #0
 810268e:	d001      	beq.n	8102694 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102690:	f000 f966 	bl	8102960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102694:	bf00      	nop
 8102696:	bd80      	pop	{r7, pc}
 8102698:	1000040c 	.word	0x1000040c
 810269c:	40004800 	.word	0x40004800

081026a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81026a0:	b580      	push	{r7, lr}
 81026a2:	b08a      	sub	sp, #40	; 0x28
 81026a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81026a6:	f107 0314 	add.w	r3, r7, #20
 81026aa:	2200      	movs	r2, #0
 81026ac:	601a      	str	r2, [r3, #0]
 81026ae:	605a      	str	r2, [r3, #4]
 81026b0:	609a      	str	r2, [r3, #8]
 81026b2:	60da      	str	r2, [r3, #12]
 81026b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81026b6:	4b46      	ldr	r3, [pc, #280]	; (81027d0 <MX_GPIO_Init+0x130>)
 81026b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026bc:	4a44      	ldr	r2, [pc, #272]	; (81027d0 <MX_GPIO_Init+0x130>)
 81026be:	f043 0301 	orr.w	r3, r3, #1
 81026c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81026c6:	4b42      	ldr	r3, [pc, #264]	; (81027d0 <MX_GPIO_Init+0x130>)
 81026c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026cc:	f003 0301 	and.w	r3, r3, #1
 81026d0:	613b      	str	r3, [r7, #16]
 81026d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81026d4:	4b3e      	ldr	r3, [pc, #248]	; (81027d0 <MX_GPIO_Init+0x130>)
 81026d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026da:	4a3d      	ldr	r2, [pc, #244]	; (81027d0 <MX_GPIO_Init+0x130>)
 81026dc:	f043 0302 	orr.w	r3, r3, #2
 81026e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81026e4:	4b3a      	ldr	r3, [pc, #232]	; (81027d0 <MX_GPIO_Init+0x130>)
 81026e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026ea:	f003 0302 	and.w	r3, r3, #2
 81026ee:	60fb      	str	r3, [r7, #12]
 81026f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81026f2:	4b37      	ldr	r3, [pc, #220]	; (81027d0 <MX_GPIO_Init+0x130>)
 81026f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026f8:	4a35      	ldr	r2, [pc, #212]	; (81027d0 <MX_GPIO_Init+0x130>)
 81026fa:	f043 0308 	orr.w	r3, r3, #8
 81026fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102702:	4b33      	ldr	r3, [pc, #204]	; (81027d0 <MX_GPIO_Init+0x130>)
 8102704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102708:	f003 0308 	and.w	r3, r3, #8
 810270c:	60bb      	str	r3, [r7, #8]
 810270e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8102710:	4b2f      	ldr	r3, [pc, #188]	; (81027d0 <MX_GPIO_Init+0x130>)
 8102712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102716:	4a2e      	ldr	r2, [pc, #184]	; (81027d0 <MX_GPIO_Init+0x130>)
 8102718:	f043 0304 	orr.w	r3, r3, #4
 810271c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102720:	4b2b      	ldr	r3, [pc, #172]	; (81027d0 <MX_GPIO_Init+0x130>)
 8102722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102726:	f003 0304 	and.w	r3, r3, #4
 810272a:	607b      	str	r3, [r7, #4]
 810272c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810272e:	4b28      	ldr	r3, [pc, #160]	; (81027d0 <MX_GPIO_Init+0x130>)
 8102730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102734:	4a26      	ldr	r2, [pc, #152]	; (81027d0 <MX_GPIO_Init+0x130>)
 8102736:	f043 0310 	orr.w	r3, r3, #16
 810273a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810273e:	4b24      	ldr	r3, [pc, #144]	; (81027d0 <MX_GPIO_Init+0x130>)
 8102740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102744:	f003 0310 	and.w	r3, r3, #16
 8102748:	603b      	str	r3, [r7, #0]
 810274a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 810274c:	2200      	movs	r2, #0
 810274e:	f244 0101 	movw	r1, #16385	; 0x4001
 8102752:	4820      	ldr	r0, [pc, #128]	; (81027d4 <MX_GPIO_Init+0x134>)
 8102754:	f001 fa12 	bl	8103b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8102758:	2200      	movs	r2, #0
 810275a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 810275e:	481e      	ldr	r0, [pc, #120]	; (81027d8 <MX_GPIO_Init+0x138>)
 8102760:	f001 fa0c 	bl	8103b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8102764:	2200      	movs	r2, #0
 8102766:	2102      	movs	r1, #2
 8102768:	481c      	ldr	r0, [pc, #112]	; (81027dc <MX_GPIO_Init+0x13c>)
 810276a:	f001 fa07 	bl	8103b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 810276e:	f244 0301 	movw	r3, #16385	; 0x4001
 8102772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102774:	2301      	movs	r3, #1
 8102776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102778:	2300      	movs	r3, #0
 810277a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810277c:	2300      	movs	r3, #0
 810277e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102780:	f107 0314 	add.w	r3, r7, #20
 8102784:	4619      	mov	r1, r3
 8102786:	4813      	ldr	r0, [pc, #76]	; (81027d4 <MX_GPIO_Init+0x134>)
 8102788:	f001 f848 	bl	810381c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 810278c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8102790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102792:	2301      	movs	r3, #1
 8102794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102796:	2300      	movs	r3, #0
 8102798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810279a:	2300      	movs	r3, #0
 810279c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 810279e:	f107 0314 	add.w	r3, r7, #20
 81027a2:	4619      	mov	r1, r3
 81027a4:	480c      	ldr	r0, [pc, #48]	; (81027d8 <MX_GPIO_Init+0x138>)
 81027a6:	f001 f839 	bl	810381c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 81027aa:	2302      	movs	r3, #2
 81027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81027ae:	2301      	movs	r3, #1
 81027b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027b2:	2300      	movs	r3, #0
 81027b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81027b6:	2300      	movs	r3, #0
 81027b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 81027ba:	f107 0314 	add.w	r3, r7, #20
 81027be:	4619      	mov	r1, r3
 81027c0:	4806      	ldr	r0, [pc, #24]	; (81027dc <MX_GPIO_Init+0x13c>)
 81027c2:	f001 f82b 	bl	810381c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81027c6:	bf00      	nop
 81027c8:	3728      	adds	r7, #40	; 0x28
 81027ca:	46bd      	mov	sp, r7
 81027cc:	bd80      	pop	{r7, pc}
 81027ce:	bf00      	nop
 81027d0:	58024400 	.word	0x58024400
 81027d4:	58020400 	.word	0x58020400
 81027d8:	58020c00 	.word	0x58020c00
 81027dc:	58021000 	.word	0x58021000

081027e0 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) //Function to redirect stdout
{
 81027e0:	b580      	push	{r7, lr}
 81027e2:	b082      	sub	sp, #8
 81027e4:	af00      	add	r7, sp, #0
 81027e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xffff); //0xFFFF is the Max Timeout in hexadecimal
 81027e8:	1d39      	adds	r1, r7, #4
 81027ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81027ee:	2201      	movs	r2, #1
 81027f0:	4803      	ldr	r0, [pc, #12]	; (8102800 <__io_putchar+0x20>)
 81027f2:	f006 f937 	bl	8108a64 <HAL_UART_Transmit>
	return ch;
 81027f6:	687b      	ldr	r3, [r7, #4]
}
 81027f8:	4618      	mov	r0, r3
 81027fa:	3708      	adds	r7, #8
 81027fc:	46bd      	mov	sp, r7
 81027fe:	bd80      	pop	{r7, pc}
 8102800:	1000040c 	.word	0x1000040c

08102804 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8102804:	b480      	push	{r7}
 8102806:	b083      	sub	sp, #12
 8102808:	af00      	add	r7, sp, #0
 810280a:	6078      	str	r0, [r7, #4]
	flagTim1 = 1; //Flag per far partire la prima volta in assoluto il codice nel while
 810280c:	4b0e      	ldr	r3, [pc, #56]	; (8102848 <HAL_TIM_PeriodElapsedCallback+0x44>)
 810280e:	2201      	movs	r2, #1
 8102810:	601a      	str	r2, [r3, #0]
	if(htim == &htim1)
 8102812:	687b      	ldr	r3, [r7, #4]
 8102814:	4a0d      	ldr	r2, [pc, #52]	; (810284c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102816:	4293      	cmp	r3, r2
 8102818:	d10f      	bne.n	810283a <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		//Tutto questo codice serve per definire la velocità di stampa del printf che è 10 volte minore del periodo di TIM1
		// periodo TIM1 = 10ms, periodo di stampa di 1 singolo carattere = 100ms
		if(cont == 10)
 810281a:	4b0d      	ldr	r3, [pc, #52]	; (8102850 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	2b0a      	cmp	r3, #10
 8102820:	d106      	bne.n	8102830 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			cont = 0; //riazzera il contatore dopo aver stampato un singolo carattere nel while(1)
 8102822:	4b0b      	ldr	r3, [pc, #44]	; (8102850 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102824:	2200      	movs	r2, #0
 8102826:	601a      	str	r2, [r3, #0]
			flag_print = 1;
 8102828:	4b0a      	ldr	r3, [pc, #40]	; (8102854 <HAL_TIM_PeriodElapsedCallback+0x50>)
 810282a:	2201      	movs	r2, #1
 810282c:	601a      	str	r2, [r3, #0]
		}
		else
			cont++;
	}
}
 810282e:	e004      	b.n	810283a <HAL_TIM_PeriodElapsedCallback+0x36>
			cont++;
 8102830:	4b07      	ldr	r3, [pc, #28]	; (8102850 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102832:	681b      	ldr	r3, [r3, #0]
 8102834:	3301      	adds	r3, #1
 8102836:	4a06      	ldr	r2, [pc, #24]	; (8102850 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102838:	6013      	str	r3, [r2, #0]
}
 810283a:	bf00      	nop
 810283c:	370c      	adds	r7, #12
 810283e:	46bd      	mov	sp, r7
 8102840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102844:	4770      	bx	lr
 8102846:	bf00      	nop
 8102848:	100004a4 	.word	0x100004a4
 810284c:	100002dc 	.word	0x100002dc
 8102850:	100004ac 	.word	0x100004ac
 8102854:	100004a8 	.word	0x100004a8

08102858 <HAL_TIM_IC_CaptureCallback>:



//Radiocomando
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8102858:	b580      	push	{r7, lr}
 810285a:	b086      	sub	sp, #24
 810285c:	af00      	add	r7, sp, #0
 810285e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	4a38      	ldr	r2, [pc, #224]	; (8102944 <HAL_TIM_IC_CaptureCallback+0xec>)
 8102864:	4293      	cmp	r3, r2
 8102866:	d128      	bne.n	81028ba <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 8102868:	687b      	ldr	r3, [r7, #4]
 810286a:	7f1b      	ldrb	r3, [r3, #28]
 810286c:	2b01      	cmp	r3, #1
 810286e:	d124      	bne.n	81028ba <HAL_TIM_IC_CaptureCallback+0x62>
		{
			// Read the IC value
			uint32_t ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8102870:	2100      	movs	r1, #0
 8102872:	6878      	ldr	r0, [r7, #4]
 8102874:	f005 f946 	bl	8107b04 <HAL_TIM_ReadCapturedValue>
 8102878:	6178      	str	r0, [r7, #20]

			if (ICValue != 0)
 810287a:	697b      	ldr	r3, [r7, #20]
 810287c:	2b00      	cmp	r3, #0
 810287e:	d01c      	beq.n	81028ba <HAL_TIM_IC_CaptureCallback+0x62>
			{
				// calculate the Duty Cycle
				uint32_t duty_received = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 8102880:	2104      	movs	r1, #4
 8102882:	6878      	ldr	r0, [r7, #4]
 8102884:	f005 f93e 	bl	8107b04 <HAL_TIM_ReadCapturedValue>
 8102888:	4603      	mov	r3, r0
 810288a:	2264      	movs	r2, #100	; 0x64
 810288c:	fb03 f202 	mul.w	r2, r3, r2
 8102890:	697b      	ldr	r3, [r7, #20]
 8102892:	fbb2 f3f3 	udiv	r3, r2, r3
 8102896:	613b      	str	r3, [r7, #16]

				if(duty_received >= 11)
 8102898:	693b      	ldr	r3, [r7, #16]
 810289a:	2b0a      	cmp	r3, #10
 810289c:	d903      	bls.n	81028a6 <HAL_TIM_IC_CaptureCallback+0x4e>
					i = 0;
 810289e:	4b2a      	ldr	r3, [pc, #168]	; (8102948 <HAL_TIM_IC_CaptureCallback+0xf0>)
 81028a0:	2200      	movs	r2, #0
 81028a2:	601a      	str	r2, [r3, #0]
 81028a4:	e009      	b.n	81028ba <HAL_TIM_IC_CaptureCallback+0x62>
				else if (duty_received <= 8)
 81028a6:	693b      	ldr	r3, [r7, #16]
 81028a8:	2b08      	cmp	r3, #8
 81028aa:	d803      	bhi.n	81028b4 <HAL_TIM_IC_CaptureCallback+0x5c>
					i = 2;
 81028ac:	4b26      	ldr	r3, [pc, #152]	; (8102948 <HAL_TIM_IC_CaptureCallback+0xf0>)
 81028ae:	2202      	movs	r2, #2
 81028b0:	601a      	str	r2, [r3, #0]
 81028b2:	e002      	b.n	81028ba <HAL_TIM_IC_CaptureCallback+0x62>
				else
					i = 1;
 81028b4:	4b24      	ldr	r3, [pc, #144]	; (8102948 <HAL_TIM_IC_CaptureCallback+0xf0>)
 81028b6:	2201      	movs	r2, #1
 81028b8:	601a      	str	r2, [r3, #0]
			}
		}
	}


	if(htim == &htim2)
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	4a23      	ldr	r2, [pc, #140]	; (810294c <HAL_TIM_IC_CaptureCallback+0xf4>)
 81028be:	4293      	cmp	r3, r2
 81028c0:	d13c      	bne.n	810293c <HAL_TIM_IC_CaptureCallback+0xe4>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	7f1b      	ldrb	r3, [r3, #28]
 81028c6:	2b01      	cmp	r3, #1
 81028c8:	d138      	bne.n	810293c <HAL_TIM_IC_CaptureCallback+0xe4>
		{
			// Read the IC value
			uint32_t ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 81028ca:	2100      	movs	r1, #0
 81028cc:	6878      	ldr	r0, [r7, #4]
 81028ce:	f005 f919 	bl	8107b04 <HAL_TIM_ReadCapturedValue>
 81028d2:	60f8      	str	r0, [r7, #12]

			if (ICValue != 0)
 81028d4:	68fb      	ldr	r3, [r7, #12]
 81028d6:	2b00      	cmp	r3, #0
 81028d8:	d030      	beq.n	810293c <HAL_TIM_IC_CaptureCallback+0xe4>
			{
				// calculate the Duty Cycle
				uint32_t duty_received = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 81028da:	2104      	movs	r1, #4
 81028dc:	6878      	ldr	r0, [r7, #4]
 81028de:	f005 f911 	bl	8107b04 <HAL_TIM_ReadCapturedValue>
 81028e2:	4603      	mov	r3, r0
 81028e4:	2264      	movs	r2, #100	; 0x64
 81028e6:	fb03 f202 	mul.w	r2, r3, r2
 81028ea:	68fb      	ldr	r3, [r7, #12]
 81028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 81028f0:	60bb      	str	r3, [r7, #8]

				if(duty_received >= 14)
 81028f2:	68bb      	ldr	r3, [r7, #8]
 81028f4:	2b0d      	cmp	r3, #13
 81028f6:	d909      	bls.n	810290c <HAL_TIM_IC_CaptureCallback+0xb4>
				{
					rif_yaw = 1;
 81028f8:	4b15      	ldr	r3, [pc, #84]	; (8102950 <HAL_TIM_IC_CaptureCallback+0xf8>)
 81028fa:	2201      	movs	r2, #1
 81028fc:	601a      	str	r2, [r3, #0]
					yaw_angolo = 20; //In sostituzione a rif_yaw
 81028fe:	4915      	ldr	r1, [pc, #84]	; (8102954 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8102900:	f04f 0200 	mov.w	r2, #0
 8102904:	4b14      	ldr	r3, [pc, #80]	; (8102958 <HAL_TIM_IC_CaptureCallback+0x100>)
 8102906:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
		}
	}

}
 810290a:	e017      	b.n	810293c <HAL_TIM_IC_CaptureCallback+0xe4>
				else if (duty_received <= 7)
 810290c:	68bb      	ldr	r3, [r7, #8]
 810290e:	2b07      	cmp	r3, #7
 8102910:	d80a      	bhi.n	8102928 <HAL_TIM_IC_CaptureCallback+0xd0>
					rif_yaw = -1;
 8102912:	4b0f      	ldr	r3, [pc, #60]	; (8102950 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8102914:	f04f 32ff 	mov.w	r2, #4294967295
 8102918:	601a      	str	r2, [r3, #0]
					yaw_angolo = -20;
 810291a:	490e      	ldr	r1, [pc, #56]	; (8102954 <HAL_TIM_IC_CaptureCallback+0xfc>)
 810291c:	f04f 0200 	mov.w	r2, #0
 8102920:	4b0e      	ldr	r3, [pc, #56]	; (810295c <HAL_TIM_IC_CaptureCallback+0x104>)
 8102922:	e9c1 2300 	strd	r2, r3, [r1]
}
 8102926:	e009      	b.n	810293c <HAL_TIM_IC_CaptureCallback+0xe4>
					rif_yaw = 0;
 8102928:	4b09      	ldr	r3, [pc, #36]	; (8102950 <HAL_TIM_IC_CaptureCallback+0xf8>)
 810292a:	2200      	movs	r2, #0
 810292c:	601a      	str	r2, [r3, #0]
					yaw_angolo = 0;
 810292e:	4909      	ldr	r1, [pc, #36]	; (8102954 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8102930:	f04f 0200 	mov.w	r2, #0
 8102934:	f04f 0300 	mov.w	r3, #0
 8102938:	e9c1 2300 	strd	r2, r3, [r1]
}
 810293c:	bf00      	nop
 810293e:	3718      	adds	r7, #24
 8102940:	46bd      	mov	sp, r7
 8102942:	bd80      	pop	{r7, pc}
 8102944:	100003c0 	.word	0x100003c0
 8102948:	100004b0 	.word	0x100004b0
 810294c:	10000328 	.word	0x10000328
 8102950:	100004b4 	.word	0x100004b4
 8102954:	10000548 	.word	0x10000548
 8102958:	40340000 	.word	0x40340000
 810295c:	c0340000 	.word	0xc0340000

08102960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102960:	b480      	push	{r7}
 8102962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102964:	b672      	cpsid	i
}
 8102966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102968:	e7fe      	b.n	8102968 <Error_Handler+0x8>
 810296a:	0000      	movs	r0, r0
 810296c:	0000      	movs	r0, r0
	...

08102970 <setPwm>:
#include "IMU.h"
#include "PID.h"

//Funzione che dati i duty cycle per ogni canale del timer associa i 4 rispettivi valori ai registri CCR per creare i segnali PWM
void setPwm(float pwm1, float pwm2, float pwm3, float pwm4)
{
 8102970:	b580      	push	{r7, lr}
 8102972:	b084      	sub	sp, #16
 8102974:	af00      	add	r7, sp, #0
 8102976:	ed87 0a03 	vstr	s0, [r7, #12]
 810297a:	edc7 0a02 	vstr	s1, [r7, #8]
 810297e:	ed87 1a01 	vstr	s2, [r7, #4]
 8102982:	edc7 1a00 	vstr	s3, [r7]
	//pwmX è un duty cycle in percentuale
	pwm1 = pwm1 > MAX_DUTY ? MAX_DUTY : pwm1 < MIN_DUTY ? MIN_DUTY : pwm1; //Condizione con operatore ternario
 8102986:	68f8      	ldr	r0, [r7, #12]
 8102988:	f7fd fe66 	bl	8100658 <__aeabi_f2d>
 810298c:	a362      	add	r3, pc, #392	; (adr r3, 8102b18 <setPwm+0x1a8>)
 810298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102992:	f7fe f949 	bl	8100c28 <__aeabi_dcmpgt>
 8102996:	4603      	mov	r3, r0
 8102998:	2b00      	cmp	r3, #0
 810299a:	d001      	beq.n	81029a0 <setPwm+0x30>
 810299c:	4b60      	ldr	r3, [pc, #384]	; (8102b20 <setPwm+0x1b0>)
 810299e:	e00d      	b.n	81029bc <setPwm+0x4c>
 81029a0:	68f8      	ldr	r0, [r7, #12]
 81029a2:	f7fd fe59 	bl	8100658 <__aeabi_f2d>
 81029a6:	a35a      	add	r3, pc, #360	; (adr r3, 8102b10 <setPwm+0x1a0>)
 81029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029ac:	f7fe f91e 	bl	8100bec <__aeabi_dcmplt>
 81029b0:	4603      	mov	r3, r0
 81029b2:	2b00      	cmp	r3, #0
 81029b4:	d001      	beq.n	81029ba <setPwm+0x4a>
 81029b6:	4b5b      	ldr	r3, [pc, #364]	; (8102b24 <setPwm+0x1b4>)
 81029b8:	e000      	b.n	81029bc <setPwm+0x4c>
 81029ba:	68fb      	ldr	r3, [r7, #12]
 81029bc:	60fb      	str	r3, [r7, #12]
	pwm2 = pwm2 > MAX_DUTY ? MAX_DUTY : pwm2 < MIN_DUTY ? MIN_DUTY : pwm2;
 81029be:	68b8      	ldr	r0, [r7, #8]
 81029c0:	f7fd fe4a 	bl	8100658 <__aeabi_f2d>
 81029c4:	a354      	add	r3, pc, #336	; (adr r3, 8102b18 <setPwm+0x1a8>)
 81029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029ca:	f7fe f92d 	bl	8100c28 <__aeabi_dcmpgt>
 81029ce:	4603      	mov	r3, r0
 81029d0:	2b00      	cmp	r3, #0
 81029d2:	d001      	beq.n	81029d8 <setPwm+0x68>
 81029d4:	4b52      	ldr	r3, [pc, #328]	; (8102b20 <setPwm+0x1b0>)
 81029d6:	e00d      	b.n	81029f4 <setPwm+0x84>
 81029d8:	68b8      	ldr	r0, [r7, #8]
 81029da:	f7fd fe3d 	bl	8100658 <__aeabi_f2d>
 81029de:	a34c      	add	r3, pc, #304	; (adr r3, 8102b10 <setPwm+0x1a0>)
 81029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029e4:	f7fe f902 	bl	8100bec <__aeabi_dcmplt>
 81029e8:	4603      	mov	r3, r0
 81029ea:	2b00      	cmp	r3, #0
 81029ec:	d001      	beq.n	81029f2 <setPwm+0x82>
 81029ee:	4b4d      	ldr	r3, [pc, #308]	; (8102b24 <setPwm+0x1b4>)
 81029f0:	e000      	b.n	81029f4 <setPwm+0x84>
 81029f2:	68bb      	ldr	r3, [r7, #8]
 81029f4:	60bb      	str	r3, [r7, #8]
	pwm3 = pwm3 > MAX_DUTY ? MAX_DUTY : pwm3 < MIN_DUTY ? MIN_DUTY : pwm3;
 81029f6:	6878      	ldr	r0, [r7, #4]
 81029f8:	f7fd fe2e 	bl	8100658 <__aeabi_f2d>
 81029fc:	a346      	add	r3, pc, #280	; (adr r3, 8102b18 <setPwm+0x1a8>)
 81029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a02:	f7fe f911 	bl	8100c28 <__aeabi_dcmpgt>
 8102a06:	4603      	mov	r3, r0
 8102a08:	2b00      	cmp	r3, #0
 8102a0a:	d001      	beq.n	8102a10 <setPwm+0xa0>
 8102a0c:	4b44      	ldr	r3, [pc, #272]	; (8102b20 <setPwm+0x1b0>)
 8102a0e:	e00d      	b.n	8102a2c <setPwm+0xbc>
 8102a10:	6878      	ldr	r0, [r7, #4]
 8102a12:	f7fd fe21 	bl	8100658 <__aeabi_f2d>
 8102a16:	a33e      	add	r3, pc, #248	; (adr r3, 8102b10 <setPwm+0x1a0>)
 8102a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a1c:	f7fe f8e6 	bl	8100bec <__aeabi_dcmplt>
 8102a20:	4603      	mov	r3, r0
 8102a22:	2b00      	cmp	r3, #0
 8102a24:	d001      	beq.n	8102a2a <setPwm+0xba>
 8102a26:	4b3f      	ldr	r3, [pc, #252]	; (8102b24 <setPwm+0x1b4>)
 8102a28:	e000      	b.n	8102a2c <setPwm+0xbc>
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	607b      	str	r3, [r7, #4]
	pwm4 = pwm4 > MAX_DUTY ? MAX_DUTY : pwm4 < MIN_DUTY ? MIN_DUTY : pwm4;
 8102a2e:	6838      	ldr	r0, [r7, #0]
 8102a30:	f7fd fe12 	bl	8100658 <__aeabi_f2d>
 8102a34:	a338      	add	r3, pc, #224	; (adr r3, 8102b18 <setPwm+0x1a8>)
 8102a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a3a:	f7fe f8f5 	bl	8100c28 <__aeabi_dcmpgt>
 8102a3e:	4603      	mov	r3, r0
 8102a40:	2b00      	cmp	r3, #0
 8102a42:	d001      	beq.n	8102a48 <setPwm+0xd8>
 8102a44:	4b36      	ldr	r3, [pc, #216]	; (8102b20 <setPwm+0x1b0>)
 8102a46:	e00d      	b.n	8102a64 <setPwm+0xf4>
 8102a48:	6838      	ldr	r0, [r7, #0]
 8102a4a:	f7fd fe05 	bl	8100658 <__aeabi_f2d>
 8102a4e:	a330      	add	r3, pc, #192	; (adr r3, 8102b10 <setPwm+0x1a0>)
 8102a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a54:	f7fe f8ca 	bl	8100bec <__aeabi_dcmplt>
 8102a58:	4603      	mov	r3, r0
 8102a5a:	2b00      	cmp	r3, #0
 8102a5c:	d001      	beq.n	8102a62 <setPwm+0xf2>
 8102a5e:	4b31      	ldr	r3, [pc, #196]	; (8102b24 <setPwm+0x1b4>)
 8102a60:	e000      	b.n	8102a64 <setPwm+0xf4>
 8102a62:	683b      	ldr	r3, [r7, #0]
 8102a64:	603b      	str	r3, [r7, #0]

	TIM3->CCR1 = (uint32_t)(TIM3->ARR * pwm1/100);
 8102a66:	4b30      	ldr	r3, [pc, #192]	; (8102b28 <setPwm+0x1b8>)
 8102a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a6a:	ee07 3a90 	vmov	s15, r3
 8102a6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102a72:	edd7 7a03 	vldr	s15, [r7, #12]
 8102a76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102a7a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8102b2c <setPwm+0x1bc>
 8102a7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102a82:	4b29      	ldr	r3, [pc, #164]	; (8102b28 <setPwm+0x1b8>)
 8102a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a88:	ee17 2a90 	vmov	r2, s15
 8102a8c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint32_t)(TIM3->ARR * pwm2/100);
 8102a8e:	4b26      	ldr	r3, [pc, #152]	; (8102b28 <setPwm+0x1b8>)
 8102a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a92:	ee07 3a90 	vmov	s15, r3
 8102a96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8102a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102aa2:	eddf 6a22 	vldr	s13, [pc, #136]	; 8102b2c <setPwm+0x1bc>
 8102aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102aaa:	4b1f      	ldr	r3, [pc, #124]	; (8102b28 <setPwm+0x1b8>)
 8102aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102ab0:	ee17 2a90 	vmov	r2, s15
 8102ab4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = (uint32_t)(TIM3->ARR * pwm3/100);
 8102ab6:	4b1c      	ldr	r3, [pc, #112]	; (8102b28 <setPwm+0x1b8>)
 8102ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102aba:	ee07 3a90 	vmov	s15, r3
 8102abe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102ac2:	edd7 7a01 	vldr	s15, [r7, #4]
 8102ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102aca:	eddf 6a18 	vldr	s13, [pc, #96]	; 8102b2c <setPwm+0x1bc>
 8102ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102ad2:	4b15      	ldr	r3, [pc, #84]	; (8102b28 <setPwm+0x1b8>)
 8102ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102ad8:	ee17 2a90 	vmov	r2, s15
 8102adc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = (uint32_t)(TIM3->ARR * pwm4/100);
 8102ade:	4b12      	ldr	r3, [pc, #72]	; (8102b28 <setPwm+0x1b8>)
 8102ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ae2:	ee07 3a90 	vmov	s15, r3
 8102ae6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102aea:	edd7 7a00 	vldr	s15, [r7]
 8102aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102af2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8102b2c <setPwm+0x1bc>
 8102af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102afa:	4b0b      	ldr	r3, [pc, #44]	; (8102b28 <setPwm+0x1b8>)
 8102afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102b00:	ee17 2a90 	vmov	r2, s15
 8102b04:	641a      	str	r2, [r3, #64]	; 0x40
}
 8102b06:	bf00      	nop
 8102b08:	3710      	adds	r7, #16
 8102b0a:	46bd      	mov	sp, r7
 8102b0c:	bd80      	pop	{r7, pc}
 8102b0e:	bf00      	nop
 8102b10:	9999999a 	.word	0x9999999a
 8102b14:	40159999 	.word	0x40159999
 8102b18:	66666666 	.word	0x66666666
 8102b1c:	401a6666 	.word	0x401a6666
 8102b20:	40d33333 	.word	0x40d33333
 8102b24:	40accccd 	.word	0x40accccd
 8102b28:	40000400 	.word	0x40000400
 8102b2c:	42c80000 	.word	0x42c80000

08102b30 <setPwmNoControl>:

//Stessa funzione di prima, senza il controllo, per calibrare correttamente i motori
void setPwmNoControl(float pwm1, float pwm2, float pwm3, float pwm4)
{
 8102b30:	b480      	push	{r7}
 8102b32:	b085      	sub	sp, #20
 8102b34:	af00      	add	r7, sp, #0
 8102b36:	ed87 0a03 	vstr	s0, [r7, #12]
 8102b3a:	edc7 0a02 	vstr	s1, [r7, #8]
 8102b3e:	ed87 1a01 	vstr	s2, [r7, #4]
 8102b42:	edc7 1a00 	vstr	s3, [r7]
	TIM3->CCR1 = (uint32_t)(TIM3->ARR * pwm1/100);
 8102b46:	4b2b      	ldr	r3, [pc, #172]	; (8102bf4 <setPwmNoControl+0xc4>)
 8102b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b4a:	ee07 3a90 	vmov	s15, r3
 8102b4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102b52:	edd7 7a03 	vldr	s15, [r7, #12]
 8102b56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102b5a:	eddf 6a27 	vldr	s13, [pc, #156]	; 8102bf8 <setPwmNoControl+0xc8>
 8102b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102b62:	4b24      	ldr	r3, [pc, #144]	; (8102bf4 <setPwmNoControl+0xc4>)
 8102b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102b68:	ee17 2a90 	vmov	r2, s15
 8102b6c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint32_t)(TIM3->ARR * pwm2/100);
 8102b6e:	4b21      	ldr	r3, [pc, #132]	; (8102bf4 <setPwmNoControl+0xc4>)
 8102b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b72:	ee07 3a90 	vmov	s15, r3
 8102b76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102b7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8102b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102b82:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8102bf8 <setPwmNoControl+0xc8>
 8102b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102b8a:	4b1a      	ldr	r3, [pc, #104]	; (8102bf4 <setPwmNoControl+0xc4>)
 8102b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102b90:	ee17 2a90 	vmov	r2, s15
 8102b94:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = (uint32_t)(TIM3->ARR * pwm3/100);
 8102b96:	4b17      	ldr	r3, [pc, #92]	; (8102bf4 <setPwmNoControl+0xc4>)
 8102b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b9a:	ee07 3a90 	vmov	s15, r3
 8102b9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8102ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102baa:	eddf 6a13 	vldr	s13, [pc, #76]	; 8102bf8 <setPwmNoControl+0xc8>
 8102bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102bb2:	4b10      	ldr	r3, [pc, #64]	; (8102bf4 <setPwmNoControl+0xc4>)
 8102bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102bb8:	ee17 2a90 	vmov	r2, s15
 8102bbc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = (uint32_t)(TIM3->ARR * pwm4/100);
 8102bbe:	4b0d      	ldr	r3, [pc, #52]	; (8102bf4 <setPwmNoControl+0xc4>)
 8102bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bc2:	ee07 3a90 	vmov	s15, r3
 8102bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102bca:	edd7 7a00 	vldr	s15, [r7]
 8102bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102bd2:	eddf 6a09 	vldr	s13, [pc, #36]	; 8102bf8 <setPwmNoControl+0xc8>
 8102bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102bda:	4b06      	ldr	r3, [pc, #24]	; (8102bf4 <setPwmNoControl+0xc4>)
 8102bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102be0:	ee17 2a90 	vmov	r2, s15
 8102be4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8102be6:	bf00      	nop
 8102be8:	3714      	adds	r7, #20
 8102bea:	46bd      	mov	sp, r7
 8102bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bf0:	4770      	bx	lr
 8102bf2:	bf00      	nop
 8102bf4:	40000400 	.word	0x40000400
 8102bf8:	42c80000 	.word	0x42c80000

08102bfc <ESC_Calibrate>:

void ESC_Calibrate()
{
 8102bfc:	b580      	push	{r7, lr}
 8102bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //Led verde
 8102c00:	2201      	movs	r2, #1
 8102c02:	2101      	movs	r1, #1
 8102c04:	4810      	ldr	r0, [pc, #64]	; (8102c48 <ESC_Calibrate+0x4c>)
 8102c06:	f000 ffb9 	bl	8103b7c <HAL_GPIO_WritePin>
	setPwmNoControl(MAX_CALIB_DUTY, MAX_CALIB_DUTY, MAX_CALIB_DUTY, MAX_CALIB_DUTY); //10
 8102c0a:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8102c0e:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8102c12:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8102c16:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8102c1a:	f7ff ff89 	bl	8102b30 <setPwmNoControl>
	HAL_Delay(3000); //ATTACCARE BATTERIA PRIMA CHE SI SPENGA IL LED VERDE
 8102c1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8102c22:	f000 fcb3 	bl	810358c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8102c26:	2200      	movs	r2, #0
 8102c28:	2101      	movs	r1, #1
 8102c2a:	4807      	ldr	r0, [pc, #28]	; (8102c48 <ESC_Calibrate+0x4c>)
 8102c2c:	f000 ffa6 	bl	8103b7c <HAL_GPIO_WritePin>
	setPwmNoControl(MIN_CALIB_DUTY, MIN_CALIB_DUTY, MIN_CALIB_DUTY, MIN_CALIB_DUTY); //5
 8102c30:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8102c34:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8102c38:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8102c3c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8102c40:	f7ff ff76 	bl	8102b30 <setPwmNoControl>
}
 8102c44:	bf00      	nop
 8102c46:	bd80      	pop	{r7, pc}
 8102c48:	58020400 	.word	0x58020400
 8102c4c:	00000000 	.word	0x00000000

08102c50 <calcoloDuty>:

float calcoloDuty(float speed)
{
 8102c50:	b580      	push	{r7, lr}
 8102c52:	b084      	sub	sp, #16
 8102c54:	af00      	add	r7, sp, #0
 8102c56:	ed87 0a01 	vstr	s0, [r7, #4]
	float duty = (((MAX_DUTY - MIN_DUTY)*speed) + ((MIN_DUTY * MAX_SPEED)-(MAX_DUTY * MIN_SPEED)))/(MAX_SPEED - MIN_SPEED);
 8102c5a:	6878      	ldr	r0, [r7, #4]
 8102c5c:	f7fd fcfc 	bl	8100658 <__aeabi_f2d>
 8102c60:	a325      	add	r3, pc, #148	; (adr r3, 8102cf8 <calcoloDuty+0xa8>)
 8102c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c66:	f7fd fd4f 	bl	8100708 <__aeabi_dmul>
 8102c6a:	4602      	mov	r2, r0
 8102c6c:	460b      	mov	r3, r1
 8102c6e:	4610      	mov	r0, r2
 8102c70:	4619      	mov	r1, r3
 8102c72:	a323      	add	r3, pc, #140	; (adr r3, 8102d00 <calcoloDuty+0xb0>)
 8102c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c78:	f7fd fb90 	bl	810039c <__adddf3>
 8102c7c:	4602      	mov	r2, r0
 8102c7e:	460b      	mov	r3, r1
 8102c80:	4610      	mov	r0, r2
 8102c82:	4619      	mov	r1, r3
 8102c84:	a320      	add	r3, pc, #128	; (adr r3, 8102d08 <calcoloDuty+0xb8>)
 8102c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c8a:	f7fd fe67 	bl	810095c <__aeabi_ddiv>
 8102c8e:	4602      	mov	r2, r0
 8102c90:	460b      	mov	r3, r1
 8102c92:	4610      	mov	r0, r2
 8102c94:	4619      	mov	r1, r3
 8102c96:	f7fe f82f 	bl	8100cf8 <__aeabi_d2f>
 8102c9a:	4603      	mov	r3, r0
 8102c9c:	60fb      	str	r3, [r7, #12]

	if (duty < MIN_DUTY) duty = MIN_DUTY;
 8102c9e:	68f8      	ldr	r0, [r7, #12]
 8102ca0:	f7fd fcda 	bl	8100658 <__aeabi_f2d>
 8102ca4:	a31a      	add	r3, pc, #104	; (adr r3, 8102d10 <calcoloDuty+0xc0>)
 8102ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102caa:	f7fd ff9f 	bl	8100bec <__aeabi_dcmplt>
 8102cae:	4603      	mov	r3, r0
 8102cb0:	2b00      	cmp	r3, #0
 8102cb2:	d002      	beq.n	8102cba <calcoloDuty+0x6a>
 8102cb4:	4b0e      	ldr	r3, [pc, #56]	; (8102cf0 <calcoloDuty+0xa0>)
 8102cb6:	60fb      	str	r3, [r7, #12]
 8102cb8:	e00c      	b.n	8102cd4 <calcoloDuty+0x84>
	else if (duty > MAX_DUTY) duty = MAX_DUTY;
 8102cba:	68f8      	ldr	r0, [r7, #12]
 8102cbc:	f7fd fccc 	bl	8100658 <__aeabi_f2d>
 8102cc0:	a309      	add	r3, pc, #36	; (adr r3, 8102ce8 <calcoloDuty+0x98>)
 8102cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cc6:	f7fd ffaf 	bl	8100c28 <__aeabi_dcmpgt>
 8102cca:	4603      	mov	r3, r0
 8102ccc:	2b00      	cmp	r3, #0
 8102cce:	d001      	beq.n	8102cd4 <calcoloDuty+0x84>
 8102cd0:	4b08      	ldr	r3, [pc, #32]	; (8102cf4 <calcoloDuty+0xa4>)
 8102cd2:	60fb      	str	r3, [r7, #12]
	return duty;
 8102cd4:	68fb      	ldr	r3, [r7, #12]
 8102cd6:	ee07 3a90 	vmov	s15, r3
}
 8102cda:	eeb0 0a67 	vmov.f32	s0, s15
 8102cde:	3710      	adds	r7, #16
 8102ce0:	46bd      	mov	sp, r7
 8102ce2:	bd80      	pop	{r7, pc}
 8102ce4:	f3af 8000 	nop.w
 8102ce8:	66666666 	.word	0x66666666
 8102cec:	401a6666 	.word	0x401a6666
 8102cf0:	40accccd 	.word	0x40accccd
 8102cf4:	40d33333 	.word	0x40d33333
 8102cf8:	33333330 	.word	0x33333330
 8102cfc:	3ff33333 	.word	0x3ff33333
 8102d00:	9999999a 	.word	0x9999999a
 8102d04:	409dc199 	.word	0x409dc199
 8102d08:	00000000 	.word	0x00000000
 8102d0c:	407b2000 	.word	0x407b2000
 8102d10:	9999999a 	.word	0x9999999a
 8102d14:	40159999 	.word	0x40159999

08102d18 <armMotors>:

void armMotors()
{
 8102d18:	b580      	push	{r7, lr}
 8102d1a:	af00      	add	r7, sp, #0
	setPwmNoControl(ARM_DUTY, ARM_DUTY, ARM_DUTY, ARM_DUTY);
 8102d1c:	eddf 1a05 	vldr	s3, [pc, #20]	; 8102d34 <armMotors+0x1c>
 8102d20:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8102d34 <armMotors+0x1c>
 8102d24:	eddf 0a03 	vldr	s1, [pc, #12]	; 8102d34 <armMotors+0x1c>
 8102d28:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8102d34 <armMotors+0x1c>
 8102d2c:	f7ff ff00 	bl	8102b30 <setPwmNoControl>
}
 8102d30:	bf00      	nop
 8102d32:	bd80      	pop	{r7, pc}
 8102d34:	40a9999a 	.word	0x40a9999a

08102d38 <stopMotors>:


void stopMotors()
{
 8102d38:	b580      	push	{r7, lr}
 8102d3a:	af00      	add	r7, sp, #0
	setPwmNoControl(MIN_CALIB_DUTY, MIN_CALIB_DUTY, MIN_CALIB_DUTY, MIN_CALIB_DUTY);
 8102d3c:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8102d40:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8102d44:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8102d48:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8102d4c:	f7ff fef0 	bl	8102b30 <setPwmNoControl>
}
 8102d50:	bf00      	nop
 8102d52:	bd80      	pop	{r7, pc}

08102d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102d54:	b480      	push	{r7}
 8102d56:	b083      	sub	sp, #12
 8102d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102d5a:	4b0a      	ldr	r3, [pc, #40]	; (8102d84 <HAL_MspInit+0x30>)
 8102d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102d60:	4a08      	ldr	r2, [pc, #32]	; (8102d84 <HAL_MspInit+0x30>)
 8102d62:	f043 0302 	orr.w	r3, r3, #2
 8102d66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102d6a:	4b06      	ldr	r3, [pc, #24]	; (8102d84 <HAL_MspInit+0x30>)
 8102d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102d70:	f003 0302 	and.w	r3, r3, #2
 8102d74:	607b      	str	r3, [r7, #4]
 8102d76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102d78:	bf00      	nop
 8102d7a:	370c      	adds	r7, #12
 8102d7c:	46bd      	mov	sp, r7
 8102d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d82:	4770      	bx	lr
 8102d84:	58024400 	.word	0x58024400

08102d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8102d88:	b580      	push	{r7, lr}
 8102d8a:	b0ba      	sub	sp, #232	; 0xe8
 8102d8c:	af00      	add	r7, sp, #0
 8102d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102d90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102d94:	2200      	movs	r2, #0
 8102d96:	601a      	str	r2, [r3, #0]
 8102d98:	605a      	str	r2, [r3, #4]
 8102d9a:	609a      	str	r2, [r3, #8]
 8102d9c:	60da      	str	r2, [r3, #12]
 8102d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102da0:	f107 0310 	add.w	r3, r7, #16
 8102da4:	22c0      	movs	r2, #192	; 0xc0
 8102da6:	2100      	movs	r1, #0
 8102da8:	4618      	mov	r0, r3
 8102daa:	f007 ff20 	bl	810abee <memset>
  if(hi2c->Instance==I2C1)
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	681b      	ldr	r3, [r3, #0]
 8102db2:	4a26      	ldr	r2, [pc, #152]	; (8102e4c <HAL_I2C_MspInit+0xc4>)
 8102db4:	4293      	cmp	r3, r2
 8102db6:	d145      	bne.n	8102e44 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8102db8:	f04f 0208 	mov.w	r2, #8
 8102dbc:	f04f 0300 	mov.w	r3, #0
 8102dc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102dc4:	2300      	movs	r3, #0
 8102dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102dca:	f107 0310 	add.w	r3, r7, #16
 8102dce:	4618      	mov	r0, r3
 8102dd0:	f001 ff84 	bl	8104cdc <HAL_RCCEx_PeriphCLKConfig>
 8102dd4:	4603      	mov	r3, r0
 8102dd6:	2b00      	cmp	r3, #0
 8102dd8:	d001      	beq.n	8102dde <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8102dda:	f7ff fdc1 	bl	8102960 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102dde:	4b1c      	ldr	r3, [pc, #112]	; (8102e50 <HAL_I2C_MspInit+0xc8>)
 8102de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102de4:	4a1a      	ldr	r2, [pc, #104]	; (8102e50 <HAL_I2C_MspInit+0xc8>)
 8102de6:	f043 0302 	orr.w	r3, r3, #2
 8102dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102dee:	4b18      	ldr	r3, [pc, #96]	; (8102e50 <HAL_I2C_MspInit+0xc8>)
 8102df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102df4:	f003 0302 	and.w	r3, r3, #2
 8102df8:	60fb      	str	r3, [r7, #12]
 8102dfa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8102dfc:	23c0      	movs	r3, #192	; 0xc0
 8102dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102e02:	2312      	movs	r3, #18
 8102e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102e08:	2300      	movs	r3, #0
 8102e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102e0e:	2300      	movs	r3, #0
 8102e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102e14:	2304      	movs	r3, #4
 8102e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102e1a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102e1e:	4619      	mov	r1, r3
 8102e20:	480c      	ldr	r0, [pc, #48]	; (8102e54 <HAL_I2C_MspInit+0xcc>)
 8102e22:	f000 fcfb 	bl	810381c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102e26:	4b0a      	ldr	r3, [pc, #40]	; (8102e50 <HAL_I2C_MspInit+0xc8>)
 8102e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102e2c:	4a08      	ldr	r2, [pc, #32]	; (8102e50 <HAL_I2C_MspInit+0xc8>)
 8102e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102e32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102e36:	4b06      	ldr	r3, [pc, #24]	; (8102e50 <HAL_I2C_MspInit+0xc8>)
 8102e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102e40:	60bb      	str	r3, [r7, #8]
 8102e42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8102e44:	bf00      	nop
 8102e46:	37e8      	adds	r7, #232	; 0xe8
 8102e48:	46bd      	mov	sp, r7
 8102e4a:	bd80      	pop	{r7, pc}
 8102e4c:	40005400 	.word	0x40005400
 8102e50:	58024400 	.word	0x58024400
 8102e54:	58020400 	.word	0x58020400

08102e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102e58:	b580      	push	{r7, lr}
 8102e5a:	b08e      	sub	sp, #56	; 0x38
 8102e5c:	af00      	add	r7, sp, #0
 8102e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8102e64:	2200      	movs	r2, #0
 8102e66:	601a      	str	r2, [r3, #0]
 8102e68:	605a      	str	r2, [r3, #4]
 8102e6a:	609a      	str	r2, [r3, #8]
 8102e6c:	60da      	str	r2, [r3, #12]
 8102e6e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	4a55      	ldr	r2, [pc, #340]	; (8102fcc <HAL_TIM_Base_MspInit+0x174>)
 8102e76:	4293      	cmp	r3, r2
 8102e78:	d117      	bne.n	8102eaa <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8102e7a:	4b55      	ldr	r3, [pc, #340]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102e80:	4a53      	ldr	r2, [pc, #332]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102e82:	f043 0301 	orr.w	r3, r3, #1
 8102e86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102e8a:	4b51      	ldr	r3, [pc, #324]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102e90:	f003 0301 	and.w	r3, r3, #1
 8102e94:	623b      	str	r3, [r7, #32]
 8102e96:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8102e98:	2200      	movs	r2, #0
 8102e9a:	2100      	movs	r1, #0
 8102e9c:	2019      	movs	r0, #25
 8102e9e:	f000 fc74 	bl	810378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8102ea2:	2019      	movs	r0, #25
 8102ea4:	f000 fc8b 	bl	81037be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8102ea8:	e08b      	b.n	8102fc2 <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM2)
 8102eaa:	687b      	ldr	r3, [r7, #4]
 8102eac:	681b      	ldr	r3, [r3, #0]
 8102eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102eb2:	d136      	bne.n	8102f22 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8102eb4:	4b46      	ldr	r3, [pc, #280]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102eba:	4a45      	ldr	r2, [pc, #276]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102ebc:	f043 0301 	orr.w	r3, r3, #1
 8102ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102ec4:	4b42      	ldr	r3, [pc, #264]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102eca:	f003 0301 	and.w	r3, r3, #1
 8102ece:	61fb      	str	r3, [r7, #28]
 8102ed0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102ed2:	4b3f      	ldr	r3, [pc, #252]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102ed8:	4a3d      	ldr	r2, [pc, #244]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102eda:	f043 0301 	orr.w	r3, r3, #1
 8102ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102ee2:	4b3b      	ldr	r3, [pc, #236]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102ee8:	f003 0301 	and.w	r3, r3, #1
 8102eec:	61bb      	str	r3, [r7, #24]
 8102eee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8102ef0:	2320      	movs	r3, #32
 8102ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ef4:	2302      	movs	r3, #2
 8102ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102ef8:	2300      	movs	r3, #0
 8102efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102efc:	2300      	movs	r3, #0
 8102efe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8102f00:	2301      	movs	r3, #1
 8102f02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8102f08:	4619      	mov	r1, r3
 8102f0a:	4832      	ldr	r0, [pc, #200]	; (8102fd4 <HAL_TIM_Base_MspInit+0x17c>)
 8102f0c:	f000 fc86 	bl	810381c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8102f10:	2200      	movs	r2, #0
 8102f12:	2100      	movs	r1, #0
 8102f14:	201c      	movs	r0, #28
 8102f16:	f000 fc38 	bl	810378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8102f1a:	201c      	movs	r0, #28
 8102f1c:	f000 fc4f 	bl	81037be <HAL_NVIC_EnableIRQ>
}
 8102f20:	e04f      	b.n	8102fc2 <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM3)
 8102f22:	687b      	ldr	r3, [r7, #4]
 8102f24:	681b      	ldr	r3, [r3, #0]
 8102f26:	4a2c      	ldr	r2, [pc, #176]	; (8102fd8 <HAL_TIM_Base_MspInit+0x180>)
 8102f28:	4293      	cmp	r3, r2
 8102f2a:	d10f      	bne.n	8102f4c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102f2c:	4b28      	ldr	r3, [pc, #160]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102f32:	4a27      	ldr	r2, [pc, #156]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102f34:	f043 0302 	orr.w	r3, r3, #2
 8102f38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102f3c:	4b24      	ldr	r3, [pc, #144]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102f42:	f003 0302 	and.w	r3, r3, #2
 8102f46:	617b      	str	r3, [r7, #20]
 8102f48:	697b      	ldr	r3, [r7, #20]
}
 8102f4a:	e03a      	b.n	8102fc2 <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM5)
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	4a22      	ldr	r2, [pc, #136]	; (8102fdc <HAL_TIM_Base_MspInit+0x184>)
 8102f52:	4293      	cmp	r3, r2
 8102f54:	d135      	bne.n	8102fc2 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8102f56:	4b1e      	ldr	r3, [pc, #120]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102f5c:	4a1c      	ldr	r2, [pc, #112]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102f5e:	f043 0308 	orr.w	r3, r3, #8
 8102f62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102f66:	4b1a      	ldr	r3, [pc, #104]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102f6c:	f003 0308 	and.w	r3, r3, #8
 8102f70:	613b      	str	r3, [r7, #16]
 8102f72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102f74:	4b16      	ldr	r3, [pc, #88]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102f7a:	4a15      	ldr	r2, [pc, #84]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102f7c:	f043 0301 	orr.w	r3, r3, #1
 8102f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102f84:	4b12      	ldr	r3, [pc, #72]	; (8102fd0 <HAL_TIM_Base_MspInit+0x178>)
 8102f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102f8a:	f003 0301 	and.w	r3, r3, #1
 8102f8e:	60fb      	str	r3, [r7, #12]
 8102f90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8102f92:	2301      	movs	r3, #1
 8102f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102f96:	2302      	movs	r3, #2
 8102f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102f9a:	2300      	movs	r3, #0
 8102f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102f9e:	2300      	movs	r3, #0
 8102fa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8102fa2:	2302      	movs	r3, #2
 8102fa4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8102faa:	4619      	mov	r1, r3
 8102fac:	4809      	ldr	r0, [pc, #36]	; (8102fd4 <HAL_TIM_Base_MspInit+0x17c>)
 8102fae:	f000 fc35 	bl	810381c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8102fb2:	2200      	movs	r2, #0
 8102fb4:	2100      	movs	r1, #0
 8102fb6:	2032      	movs	r0, #50	; 0x32
 8102fb8:	f000 fbe7 	bl	810378a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8102fbc:	2032      	movs	r0, #50	; 0x32
 8102fbe:	f000 fbfe 	bl	81037be <HAL_NVIC_EnableIRQ>
}
 8102fc2:	bf00      	nop
 8102fc4:	3738      	adds	r7, #56	; 0x38
 8102fc6:	46bd      	mov	sp, r7
 8102fc8:	bd80      	pop	{r7, pc}
 8102fca:	bf00      	nop
 8102fcc:	40010000 	.word	0x40010000
 8102fd0:	58024400 	.word	0x58024400
 8102fd4:	58020000 	.word	0x58020000
 8102fd8:	40000400 	.word	0x40000400
 8102fdc:	40000c00 	.word	0x40000c00

08102fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102fe0:	b580      	push	{r7, lr}
 8102fe2:	b08a      	sub	sp, #40	; 0x28
 8102fe4:	af00      	add	r7, sp, #0
 8102fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102fe8:	f107 0314 	add.w	r3, r7, #20
 8102fec:	2200      	movs	r2, #0
 8102fee:	601a      	str	r2, [r3, #0]
 8102ff0:	605a      	str	r2, [r3, #4]
 8102ff2:	609a      	str	r2, [r3, #8]
 8102ff4:	60da      	str	r2, [r3, #12]
 8102ff6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	4a32      	ldr	r2, [pc, #200]	; (81030c8 <HAL_TIM_MspPostInit+0xe8>)
 8102ffe:	4293      	cmp	r3, r2
 8103000:	d15d      	bne.n	81030be <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8103002:	4b32      	ldr	r3, [pc, #200]	; (81030cc <HAL_TIM_MspPostInit+0xec>)
 8103004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103008:	4a30      	ldr	r2, [pc, #192]	; (81030cc <HAL_TIM_MspPostInit+0xec>)
 810300a:	f043 0301 	orr.w	r3, r3, #1
 810300e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103012:	4b2e      	ldr	r3, [pc, #184]	; (81030cc <HAL_TIM_MspPostInit+0xec>)
 8103014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103018:	f003 0301 	and.w	r3, r3, #1
 810301c:	613b      	str	r3, [r7, #16]
 810301e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8103020:	4b2a      	ldr	r3, [pc, #168]	; (81030cc <HAL_TIM_MspPostInit+0xec>)
 8103022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103026:	4a29      	ldr	r2, [pc, #164]	; (81030cc <HAL_TIM_MspPostInit+0xec>)
 8103028:	f043 0302 	orr.w	r3, r3, #2
 810302c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103030:	4b26      	ldr	r3, [pc, #152]	; (81030cc <HAL_TIM_MspPostInit+0xec>)
 8103032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103036:	f003 0302 	and.w	r3, r3, #2
 810303a:	60fb      	str	r3, [r7, #12]
 810303c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810303e:	4b23      	ldr	r3, [pc, #140]	; (81030cc <HAL_TIM_MspPostInit+0xec>)
 8103040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103044:	4a21      	ldr	r2, [pc, #132]	; (81030cc <HAL_TIM_MspPostInit+0xec>)
 8103046:	f043 0304 	orr.w	r3, r3, #4
 810304a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810304e:	4b1f      	ldr	r3, [pc, #124]	; (81030cc <HAL_TIM_MspPostInit+0xec>)
 8103050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103054:	f003 0304 	and.w	r3, r3, #4
 8103058:	60bb      	str	r3, [r7, #8]
 810305a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 810305c:	2340      	movs	r3, #64	; 0x40
 810305e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103060:	2302      	movs	r3, #2
 8103062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103064:	2300      	movs	r3, #0
 8103066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103068:	2300      	movs	r3, #0
 810306a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 810306c:	2302      	movs	r3, #2
 810306e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103070:	f107 0314 	add.w	r3, r7, #20
 8103074:	4619      	mov	r1, r3
 8103076:	4816      	ldr	r0, [pc, #88]	; (81030d0 <HAL_TIM_MspPostInit+0xf0>)
 8103078:	f000 fbd0 	bl	810381c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 810307c:	2302      	movs	r3, #2
 810307e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103080:	2302      	movs	r3, #2
 8103082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103084:	2300      	movs	r3, #0
 8103086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103088:	2300      	movs	r3, #0
 810308a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 810308c:	2302      	movs	r3, #2
 810308e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8103090:	f107 0314 	add.w	r3, r7, #20
 8103094:	4619      	mov	r1, r3
 8103096:	480f      	ldr	r0, [pc, #60]	; (81030d4 <HAL_TIM_MspPostInit+0xf4>)
 8103098:	f000 fbc0 	bl	810381c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 810309c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 81030a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81030a2:	2302      	movs	r3, #2
 81030a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81030a6:	2300      	movs	r3, #0
 81030a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81030aa:	2300      	movs	r3, #0
 81030ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 81030ae:	2302      	movs	r3, #2
 81030b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81030b2:	f107 0314 	add.w	r3, r7, #20
 81030b6:	4619      	mov	r1, r3
 81030b8:	4807      	ldr	r0, [pc, #28]	; (81030d8 <HAL_TIM_MspPostInit+0xf8>)
 81030ba:	f000 fbaf 	bl	810381c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 81030be:	bf00      	nop
 81030c0:	3728      	adds	r7, #40	; 0x28
 81030c2:	46bd      	mov	sp, r7
 81030c4:	bd80      	pop	{r7, pc}
 81030c6:	bf00      	nop
 81030c8:	40000400 	.word	0x40000400
 81030cc:	58024400 	.word	0x58024400
 81030d0:	58020000 	.word	0x58020000
 81030d4:	58020400 	.word	0x58020400
 81030d8:	58020800 	.word	0x58020800

081030dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81030dc:	b580      	push	{r7, lr}
 81030de:	b0ba      	sub	sp, #232	; 0xe8
 81030e0:	af00      	add	r7, sp, #0
 81030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81030e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81030e8:	2200      	movs	r2, #0
 81030ea:	601a      	str	r2, [r3, #0]
 81030ec:	605a      	str	r2, [r3, #4]
 81030ee:	609a      	str	r2, [r3, #8]
 81030f0:	60da      	str	r2, [r3, #12]
 81030f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81030f4:	f107 0310 	add.w	r3, r7, #16
 81030f8:	22c0      	movs	r2, #192	; 0xc0
 81030fa:	2100      	movs	r1, #0
 81030fc:	4618      	mov	r0, r3
 81030fe:	f007 fd76 	bl	810abee <memset>
  if(huart->Instance==USART3)
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	681b      	ldr	r3, [r3, #0]
 8103106:	4a27      	ldr	r2, [pc, #156]	; (81031a4 <HAL_UART_MspInit+0xc8>)
 8103108:	4293      	cmp	r3, r2
 810310a:	d146      	bne.n	810319a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810310c:	f04f 0202 	mov.w	r2, #2
 8103110:	f04f 0300 	mov.w	r3, #0
 8103114:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8103118:	2300      	movs	r3, #0
 810311a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810311e:	f107 0310 	add.w	r3, r7, #16
 8103122:	4618      	mov	r0, r3
 8103124:	f001 fdda 	bl	8104cdc <HAL_RCCEx_PeriphCLKConfig>
 8103128:	4603      	mov	r3, r0
 810312a:	2b00      	cmp	r3, #0
 810312c:	d001      	beq.n	8103132 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 810312e:	f7ff fc17 	bl	8102960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8103132:	4b1d      	ldr	r3, [pc, #116]	; (81031a8 <HAL_UART_MspInit+0xcc>)
 8103134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103138:	4a1b      	ldr	r2, [pc, #108]	; (81031a8 <HAL_UART_MspInit+0xcc>)
 810313a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810313e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8103142:	4b19      	ldr	r3, [pc, #100]	; (81031a8 <HAL_UART_MspInit+0xcc>)
 8103144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810314c:	60fb      	str	r3, [r7, #12]
 810314e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103150:	4b15      	ldr	r3, [pc, #84]	; (81031a8 <HAL_UART_MspInit+0xcc>)
 8103152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103156:	4a14      	ldr	r2, [pc, #80]	; (81031a8 <HAL_UART_MspInit+0xcc>)
 8103158:	f043 0308 	orr.w	r3, r3, #8
 810315c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103160:	4b11      	ldr	r3, [pc, #68]	; (81031a8 <HAL_UART_MspInit+0xcc>)
 8103162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103166:	f003 0308 	and.w	r3, r3, #8
 810316a:	60bb      	str	r3, [r7, #8]
 810316c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 810316e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8103172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103176:	2302      	movs	r3, #2
 8103178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810317c:	2300      	movs	r3, #0
 810317e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103182:	2300      	movs	r3, #0
 8103184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8103188:	2307      	movs	r3, #7
 810318a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810318e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8103192:	4619      	mov	r1, r3
 8103194:	4805      	ldr	r0, [pc, #20]	; (81031ac <HAL_UART_MspInit+0xd0>)
 8103196:	f000 fb41 	bl	810381c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 810319a:	bf00      	nop
 810319c:	37e8      	adds	r7, #232	; 0xe8
 810319e:	46bd      	mov	sp, r7
 81031a0:	bd80      	pop	{r7, pc}
 81031a2:	bf00      	nop
 81031a4:	40004800 	.word	0x40004800
 81031a8:	58024400 	.word	0x58024400
 81031ac:	58020c00 	.word	0x58020c00

081031b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81031b0:	b480      	push	{r7}
 81031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81031b4:	e7fe      	b.n	81031b4 <NMI_Handler+0x4>

081031b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81031b6:	b480      	push	{r7}
 81031b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81031ba:	e7fe      	b.n	81031ba <HardFault_Handler+0x4>

081031bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81031bc:	b480      	push	{r7}
 81031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81031c0:	e7fe      	b.n	81031c0 <MemManage_Handler+0x4>

081031c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81031c2:	b480      	push	{r7}
 81031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81031c6:	e7fe      	b.n	81031c6 <BusFault_Handler+0x4>

081031c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81031c8:	b480      	push	{r7}
 81031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81031cc:	e7fe      	b.n	81031cc <UsageFault_Handler+0x4>

081031ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81031ce:	b480      	push	{r7}
 81031d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81031d2:	bf00      	nop
 81031d4:	46bd      	mov	sp, r7
 81031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031da:	4770      	bx	lr

081031dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81031dc:	b480      	push	{r7}
 81031de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81031e0:	bf00      	nop
 81031e2:	46bd      	mov	sp, r7
 81031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031e8:	4770      	bx	lr

081031ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81031ea:	b480      	push	{r7}
 81031ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81031ee:	bf00      	nop
 81031f0:	46bd      	mov	sp, r7
 81031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031f6:	4770      	bx	lr

081031f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81031f8:	b580      	push	{r7, lr}
 81031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81031fc:	f000 f9a6 	bl	810354c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8103200:	bf00      	nop
 8103202:	bd80      	pop	{r7, pc}

08103204 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8103204:	b580      	push	{r7, lr}
 8103206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8103208:	4802      	ldr	r0, [pc, #8]	; (8103214 <TIM1_UP_IRQHandler+0x10>)
 810320a:	f004 f889 	bl	8107320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 810320e:	bf00      	nop
 8103210:	bd80      	pop	{r7, pc}
 8103212:	bf00      	nop
 8103214:	100002dc 	.word	0x100002dc

08103218 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8103218:	b580      	push	{r7, lr}
 810321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 810321c:	4802      	ldr	r0, [pc, #8]	; (8103228 <TIM2_IRQHandler+0x10>)
 810321e:	f004 f87f 	bl	8107320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8103222:	bf00      	nop
 8103224:	bd80      	pop	{r7, pc}
 8103226:	bf00      	nop
 8103228:	10000328 	.word	0x10000328

0810322c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 810322c:	b580      	push	{r7, lr}
 810322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8103230:	4802      	ldr	r0, [pc, #8]	; (810323c <TIM5_IRQHandler+0x10>)
 8103232:	f004 f875 	bl	8107320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8103236:	bf00      	nop
 8103238:	bd80      	pop	{r7, pc}
 810323a:	bf00      	nop
 810323c:	100003c0 	.word	0x100003c0

08103240 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8103240:	b480      	push	{r7}
 8103242:	af00      	add	r7, sp, #0
  return 1;
 8103244:	2301      	movs	r3, #1
}
 8103246:	4618      	mov	r0, r3
 8103248:	46bd      	mov	sp, r7
 810324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810324e:	4770      	bx	lr

08103250 <_kill>:

int _kill(int pid, int sig)
{
 8103250:	b580      	push	{r7, lr}
 8103252:	b082      	sub	sp, #8
 8103254:	af00      	add	r7, sp, #0
 8103256:	6078      	str	r0, [r7, #4]
 8103258:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 810325a:	f007 fd1b 	bl	810ac94 <__errno>
 810325e:	4603      	mov	r3, r0
 8103260:	2216      	movs	r2, #22
 8103262:	601a      	str	r2, [r3, #0]
  return -1;
 8103264:	f04f 33ff 	mov.w	r3, #4294967295
}
 8103268:	4618      	mov	r0, r3
 810326a:	3708      	adds	r7, #8
 810326c:	46bd      	mov	sp, r7
 810326e:	bd80      	pop	{r7, pc}

08103270 <_exit>:

void _exit (int status)
{
 8103270:	b580      	push	{r7, lr}
 8103272:	b082      	sub	sp, #8
 8103274:	af00      	add	r7, sp, #0
 8103276:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8103278:	f04f 31ff 	mov.w	r1, #4294967295
 810327c:	6878      	ldr	r0, [r7, #4]
 810327e:	f7ff ffe7 	bl	8103250 <_kill>
  while (1) {}    /* Make sure we hang here */
 8103282:	e7fe      	b.n	8103282 <_exit+0x12>

08103284 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8103284:	b580      	push	{r7, lr}
 8103286:	b086      	sub	sp, #24
 8103288:	af00      	add	r7, sp, #0
 810328a:	60f8      	str	r0, [r7, #12]
 810328c:	60b9      	str	r1, [r7, #8]
 810328e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  len = 1;
 8103290:	2301      	movs	r3, #1
 8103292:	607b      	str	r3, [r7, #4]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8103294:	2300      	movs	r3, #0
 8103296:	617b      	str	r3, [r7, #20]
 8103298:	e00a      	b.n	81032b0 <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 810329a:	f3af 8000 	nop.w
 810329e:	4601      	mov	r1, r0
 81032a0:	68bb      	ldr	r3, [r7, #8]
 81032a2:	1c5a      	adds	r2, r3, #1
 81032a4:	60ba      	str	r2, [r7, #8]
 81032a6:	b2ca      	uxtb	r2, r1
 81032a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81032aa:	697b      	ldr	r3, [r7, #20]
 81032ac:	3301      	adds	r3, #1
 81032ae:	617b      	str	r3, [r7, #20]
 81032b0:	697a      	ldr	r2, [r7, #20]
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	429a      	cmp	r2, r3
 81032b6:	dbf0      	blt.n	810329a <_read+0x16>
  }

  return len;
 81032b8:	687b      	ldr	r3, [r7, #4]
}
 81032ba:	4618      	mov	r0, r3
 81032bc:	3718      	adds	r7, #24
 81032be:	46bd      	mov	sp, r7
 81032c0:	bd80      	pop	{r7, pc}

081032c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81032c2:	b580      	push	{r7, lr}
 81032c4:	b086      	sub	sp, #24
 81032c6:	af00      	add	r7, sp, #0
 81032c8:	60f8      	str	r0, [r7, #12]
 81032ca:	60b9      	str	r1, [r7, #8]
 81032cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81032ce:	2300      	movs	r3, #0
 81032d0:	617b      	str	r3, [r7, #20]
 81032d2:	e009      	b.n	81032e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 81032d4:	68bb      	ldr	r3, [r7, #8]
 81032d6:	1c5a      	adds	r2, r3, #1
 81032d8:	60ba      	str	r2, [r7, #8]
 81032da:	781b      	ldrb	r3, [r3, #0]
 81032dc:	4618      	mov	r0, r3
 81032de:	f7ff fa7f 	bl	81027e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81032e2:	697b      	ldr	r3, [r7, #20]
 81032e4:	3301      	adds	r3, #1
 81032e6:	617b      	str	r3, [r7, #20]
 81032e8:	697a      	ldr	r2, [r7, #20]
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	429a      	cmp	r2, r3
 81032ee:	dbf1      	blt.n	81032d4 <_write+0x12>
  }
  return len;
 81032f0:	687b      	ldr	r3, [r7, #4]
}
 81032f2:	4618      	mov	r0, r3
 81032f4:	3718      	adds	r7, #24
 81032f6:	46bd      	mov	sp, r7
 81032f8:	bd80      	pop	{r7, pc}

081032fa <_close>:

int _close(int file)
{
 81032fa:	b480      	push	{r7}
 81032fc:	b083      	sub	sp, #12
 81032fe:	af00      	add	r7, sp, #0
 8103300:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8103302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8103306:	4618      	mov	r0, r3
 8103308:	370c      	adds	r7, #12
 810330a:	46bd      	mov	sp, r7
 810330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103310:	4770      	bx	lr

08103312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8103312:	b480      	push	{r7}
 8103314:	b083      	sub	sp, #12
 8103316:	af00      	add	r7, sp, #0
 8103318:	6078      	str	r0, [r7, #4]
 810331a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 810331c:	683b      	ldr	r3, [r7, #0]
 810331e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8103322:	605a      	str	r2, [r3, #4]
  return 0;
 8103324:	2300      	movs	r3, #0
}
 8103326:	4618      	mov	r0, r3
 8103328:	370c      	adds	r7, #12
 810332a:	46bd      	mov	sp, r7
 810332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103330:	4770      	bx	lr

08103332 <_isatty>:

int _isatty(int file)
{
 8103332:	b480      	push	{r7}
 8103334:	b083      	sub	sp, #12
 8103336:	af00      	add	r7, sp, #0
 8103338:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 810333a:	2301      	movs	r3, #1
}
 810333c:	4618      	mov	r0, r3
 810333e:	370c      	adds	r7, #12
 8103340:	46bd      	mov	sp, r7
 8103342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103346:	4770      	bx	lr

08103348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8103348:	b480      	push	{r7}
 810334a:	b085      	sub	sp, #20
 810334c:	af00      	add	r7, sp, #0
 810334e:	60f8      	str	r0, [r7, #12]
 8103350:	60b9      	str	r1, [r7, #8]
 8103352:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8103354:	2300      	movs	r3, #0
}
 8103356:	4618      	mov	r0, r3
 8103358:	3714      	adds	r7, #20
 810335a:	46bd      	mov	sp, r7
 810335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103360:	4770      	bx	lr
	...

08103364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8103364:	b580      	push	{r7, lr}
 8103366:	b086      	sub	sp, #24
 8103368:	af00      	add	r7, sp, #0
 810336a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810336c:	4a14      	ldr	r2, [pc, #80]	; (81033c0 <_sbrk+0x5c>)
 810336e:	4b15      	ldr	r3, [pc, #84]	; (81033c4 <_sbrk+0x60>)
 8103370:	1ad3      	subs	r3, r2, r3
 8103372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8103374:	697b      	ldr	r3, [r7, #20]
 8103376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8103378:	4b13      	ldr	r3, [pc, #76]	; (81033c8 <_sbrk+0x64>)
 810337a:	681b      	ldr	r3, [r3, #0]
 810337c:	2b00      	cmp	r3, #0
 810337e:	d102      	bne.n	8103386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8103380:	4b11      	ldr	r3, [pc, #68]	; (81033c8 <_sbrk+0x64>)
 8103382:	4a12      	ldr	r2, [pc, #72]	; (81033cc <_sbrk+0x68>)
 8103384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8103386:	4b10      	ldr	r3, [pc, #64]	; (81033c8 <_sbrk+0x64>)
 8103388:	681a      	ldr	r2, [r3, #0]
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	4413      	add	r3, r2
 810338e:	693a      	ldr	r2, [r7, #16]
 8103390:	429a      	cmp	r2, r3
 8103392:	d207      	bcs.n	81033a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8103394:	f007 fc7e 	bl	810ac94 <__errno>
 8103398:	4603      	mov	r3, r0
 810339a:	220c      	movs	r2, #12
 810339c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810339e:	f04f 33ff 	mov.w	r3, #4294967295
 81033a2:	e009      	b.n	81033b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81033a4:	4b08      	ldr	r3, [pc, #32]	; (81033c8 <_sbrk+0x64>)
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81033aa:	4b07      	ldr	r3, [pc, #28]	; (81033c8 <_sbrk+0x64>)
 81033ac:	681a      	ldr	r2, [r3, #0]
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	4413      	add	r3, r2
 81033b2:	4a05      	ldr	r2, [pc, #20]	; (81033c8 <_sbrk+0x64>)
 81033b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81033b6:	68fb      	ldr	r3, [r7, #12]
}
 81033b8:	4618      	mov	r0, r3
 81033ba:	3718      	adds	r7, #24
 81033bc:	46bd      	mov	sp, r7
 81033be:	bd80      	pop	{r7, pc}
 81033c0:	10048000 	.word	0x10048000
 81033c4:	00000400 	.word	0x00000400
 81033c8:	10000560 	.word	0x10000560
 81033cc:	100006b8 	.word	0x100006b8

081033d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81033d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8103408 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81033d4:	f7fd fe94 	bl	8101100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81033d8:	480c      	ldr	r0, [pc, #48]	; (810340c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81033da:	490d      	ldr	r1, [pc, #52]	; (8103410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81033dc:	4a0d      	ldr	r2, [pc, #52]	; (8103414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81033de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81033e0:	e002      	b.n	81033e8 <LoopCopyDataInit>

081033e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81033e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81033e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81033e6:	3304      	adds	r3, #4

081033e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81033e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81033ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81033ec:	d3f9      	bcc.n	81033e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81033ee:	4a0a      	ldr	r2, [pc, #40]	; (8103418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81033f0:	4c0a      	ldr	r4, [pc, #40]	; (810341c <LoopFillZerobss+0x22>)
  movs r3, #0
 81033f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81033f4:	e001      	b.n	81033fa <LoopFillZerobss>

081033f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81033f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81033f8:	3204      	adds	r2, #4

081033fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81033fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81033fc:	d3fb      	bcc.n	81033f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81033fe:	f007 fc4f 	bl	810aca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8103402:	f7fe fd0b 	bl	8101e1c <main>
  bx  lr
 8103406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103408:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810340c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8103410:	10000248 	.word	0x10000248
  ldr r2, =_sidata
 8103414:	0810eca0 	.word	0x0810eca0
  ldr r2, =_sbss
 8103418:	10000248 	.word	0x10000248
  ldr r4, =_ebss
 810341c:	100006b4 	.word	0x100006b4

08103420 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8103420:	e7fe      	b.n	8103420 <ADC3_IRQHandler>
	...

08103424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8103424:	b580      	push	{r7, lr}
 8103426:	b082      	sub	sp, #8
 8103428:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810342a:	4b28      	ldr	r3, [pc, #160]	; (81034cc <HAL_Init+0xa8>)
 810342c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103430:	4a26      	ldr	r2, [pc, #152]	; (81034cc <HAL_Init+0xa8>)
 8103432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8103436:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810343a:	4b24      	ldr	r3, [pc, #144]	; (81034cc <HAL_Init+0xa8>)
 810343c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103444:	603b      	str	r3, [r7, #0]
 8103446:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103448:	4b21      	ldr	r3, [pc, #132]	; (81034d0 <HAL_Init+0xac>)
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8103450:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103454:	4a1e      	ldr	r2, [pc, #120]	; (81034d0 <HAL_Init+0xac>)
 8103456:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810345a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810345c:	4b1c      	ldr	r3, [pc, #112]	; (81034d0 <HAL_Init+0xac>)
 810345e:	681b      	ldr	r3, [r3, #0]
 8103460:	4a1b      	ldr	r2, [pc, #108]	; (81034d0 <HAL_Init+0xac>)
 8103462:	f043 0301 	orr.w	r3, r3, #1
 8103466:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103468:	2003      	movs	r0, #3
 810346a:	f000 f983 	bl	8103774 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810346e:	f001 fa5d 	bl	810492c <HAL_RCC_GetSysClockFreq>
 8103472:	4602      	mov	r2, r0
 8103474:	4b15      	ldr	r3, [pc, #84]	; (81034cc <HAL_Init+0xa8>)
 8103476:	699b      	ldr	r3, [r3, #24]
 8103478:	0a1b      	lsrs	r3, r3, #8
 810347a:	f003 030f 	and.w	r3, r3, #15
 810347e:	4915      	ldr	r1, [pc, #84]	; (81034d4 <HAL_Init+0xb0>)
 8103480:	5ccb      	ldrb	r3, [r1, r3]
 8103482:	f003 031f 	and.w	r3, r3, #31
 8103486:	fa22 f303 	lsr.w	r3, r2, r3
 810348a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810348c:	4b0f      	ldr	r3, [pc, #60]	; (81034cc <HAL_Init+0xa8>)
 810348e:	699b      	ldr	r3, [r3, #24]
 8103490:	f003 030f 	and.w	r3, r3, #15
 8103494:	4a0f      	ldr	r2, [pc, #60]	; (81034d4 <HAL_Init+0xb0>)
 8103496:	5cd3      	ldrb	r3, [r2, r3]
 8103498:	f003 031f 	and.w	r3, r3, #31
 810349c:	687a      	ldr	r2, [r7, #4]
 810349e:	fa22 f303 	lsr.w	r3, r2, r3
 81034a2:	4a0d      	ldr	r2, [pc, #52]	; (81034d8 <HAL_Init+0xb4>)
 81034a4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81034a6:	4b0c      	ldr	r3, [pc, #48]	; (81034d8 <HAL_Init+0xb4>)
 81034a8:	681b      	ldr	r3, [r3, #0]
 81034aa:	4a0c      	ldr	r2, [pc, #48]	; (81034dc <HAL_Init+0xb8>)
 81034ac:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81034ae:	2000      	movs	r0, #0
 81034b0:	f000 f816 	bl	81034e0 <HAL_InitTick>
 81034b4:	4603      	mov	r3, r0
 81034b6:	2b00      	cmp	r3, #0
 81034b8:	d001      	beq.n	81034be <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81034ba:	2301      	movs	r3, #1
 81034bc:	e002      	b.n	81034c4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81034be:	f7ff fc49 	bl	8102d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81034c2:	2300      	movs	r3, #0
}
 81034c4:	4618      	mov	r0, r3
 81034c6:	3708      	adds	r7, #8
 81034c8:	46bd      	mov	sp, r7
 81034ca:	bd80      	pop	{r7, pc}
 81034cc:	58024400 	.word	0x58024400
 81034d0:	40024400 	.word	0x40024400
 81034d4:	0810e830 	.word	0x0810e830
 81034d8:	10000004 	.word	0x10000004
 81034dc:	10000000 	.word	0x10000000

081034e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81034e0:	b580      	push	{r7, lr}
 81034e2:	b082      	sub	sp, #8
 81034e4:	af00      	add	r7, sp, #0
 81034e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81034e8:	4b15      	ldr	r3, [pc, #84]	; (8103540 <HAL_InitTick+0x60>)
 81034ea:	781b      	ldrb	r3, [r3, #0]
 81034ec:	2b00      	cmp	r3, #0
 81034ee:	d101      	bne.n	81034f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81034f0:	2301      	movs	r3, #1
 81034f2:	e021      	b.n	8103538 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81034f4:	4b13      	ldr	r3, [pc, #76]	; (8103544 <HAL_InitTick+0x64>)
 81034f6:	681a      	ldr	r2, [r3, #0]
 81034f8:	4b11      	ldr	r3, [pc, #68]	; (8103540 <HAL_InitTick+0x60>)
 81034fa:	781b      	ldrb	r3, [r3, #0]
 81034fc:	4619      	mov	r1, r3
 81034fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8103502:	fbb3 f3f1 	udiv	r3, r3, r1
 8103506:	fbb2 f3f3 	udiv	r3, r2, r3
 810350a:	4618      	mov	r0, r3
 810350c:	f000 f965 	bl	81037da <HAL_SYSTICK_Config>
 8103510:	4603      	mov	r3, r0
 8103512:	2b00      	cmp	r3, #0
 8103514:	d001      	beq.n	810351a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103516:	2301      	movs	r3, #1
 8103518:	e00e      	b.n	8103538 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810351a:	687b      	ldr	r3, [r7, #4]
 810351c:	2b0f      	cmp	r3, #15
 810351e:	d80a      	bhi.n	8103536 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103520:	2200      	movs	r2, #0
 8103522:	6879      	ldr	r1, [r7, #4]
 8103524:	f04f 30ff 	mov.w	r0, #4294967295
 8103528:	f000 f92f 	bl	810378a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810352c:	4a06      	ldr	r2, [pc, #24]	; (8103548 <HAL_InitTick+0x68>)
 810352e:	687b      	ldr	r3, [r7, #4]
 8103530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8103532:	2300      	movs	r3, #0
 8103534:	e000      	b.n	8103538 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103536:	2301      	movs	r3, #1
}
 8103538:	4618      	mov	r0, r3
 810353a:	3708      	adds	r7, #8
 810353c:	46bd      	mov	sp, r7
 810353e:	bd80      	pop	{r7, pc}
 8103540:	1000006c 	.word	0x1000006c
 8103544:	10000000 	.word	0x10000000
 8103548:	10000068 	.word	0x10000068

0810354c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810354c:	b480      	push	{r7}
 810354e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103550:	4b06      	ldr	r3, [pc, #24]	; (810356c <HAL_IncTick+0x20>)
 8103552:	781b      	ldrb	r3, [r3, #0]
 8103554:	461a      	mov	r2, r3
 8103556:	4b06      	ldr	r3, [pc, #24]	; (8103570 <HAL_IncTick+0x24>)
 8103558:	681b      	ldr	r3, [r3, #0]
 810355a:	4413      	add	r3, r2
 810355c:	4a04      	ldr	r2, [pc, #16]	; (8103570 <HAL_IncTick+0x24>)
 810355e:	6013      	str	r3, [r2, #0]
}
 8103560:	bf00      	nop
 8103562:	46bd      	mov	sp, r7
 8103564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103568:	4770      	bx	lr
 810356a:	bf00      	nop
 810356c:	1000006c 	.word	0x1000006c
 8103570:	10000564 	.word	0x10000564

08103574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103574:	b480      	push	{r7}
 8103576:	af00      	add	r7, sp, #0
  return uwTick;
 8103578:	4b03      	ldr	r3, [pc, #12]	; (8103588 <HAL_GetTick+0x14>)
 810357a:	681b      	ldr	r3, [r3, #0]
}
 810357c:	4618      	mov	r0, r3
 810357e:	46bd      	mov	sp, r7
 8103580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103584:	4770      	bx	lr
 8103586:	bf00      	nop
 8103588:	10000564 	.word	0x10000564

0810358c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810358c:	b580      	push	{r7, lr}
 810358e:	b084      	sub	sp, #16
 8103590:	af00      	add	r7, sp, #0
 8103592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8103594:	f7ff ffee 	bl	8103574 <HAL_GetTick>
 8103598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810359e:	68fb      	ldr	r3, [r7, #12]
 81035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81035a4:	d005      	beq.n	81035b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81035a6:	4b0a      	ldr	r3, [pc, #40]	; (81035d0 <HAL_Delay+0x44>)
 81035a8:	781b      	ldrb	r3, [r3, #0]
 81035aa:	461a      	mov	r2, r3
 81035ac:	68fb      	ldr	r3, [r7, #12]
 81035ae:	4413      	add	r3, r2
 81035b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81035b2:	bf00      	nop
 81035b4:	f7ff ffde 	bl	8103574 <HAL_GetTick>
 81035b8:	4602      	mov	r2, r0
 81035ba:	68bb      	ldr	r3, [r7, #8]
 81035bc:	1ad3      	subs	r3, r2, r3
 81035be:	68fa      	ldr	r2, [r7, #12]
 81035c0:	429a      	cmp	r2, r3
 81035c2:	d8f7      	bhi.n	81035b4 <HAL_Delay+0x28>
  {
  }
}
 81035c4:	bf00      	nop
 81035c6:	bf00      	nop
 81035c8:	3710      	adds	r7, #16
 81035ca:	46bd      	mov	sp, r7
 81035cc:	bd80      	pop	{r7, pc}
 81035ce:	bf00      	nop
 81035d0:	1000006c 	.word	0x1000006c

081035d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81035d4:	b480      	push	{r7}
 81035d6:	b085      	sub	sp, #20
 81035d8:	af00      	add	r7, sp, #0
 81035da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	f003 0307 	and.w	r3, r3, #7
 81035e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81035e4:	4b0c      	ldr	r3, [pc, #48]	; (8103618 <__NVIC_SetPriorityGrouping+0x44>)
 81035e6:	68db      	ldr	r3, [r3, #12]
 81035e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81035ea:	68ba      	ldr	r2, [r7, #8]
 81035ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81035f0:	4013      	ands	r3, r2
 81035f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81035f4:	68fb      	ldr	r3, [r7, #12]
 81035f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81035f8:	68bb      	ldr	r3, [r7, #8]
 81035fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81035fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103606:	4a04      	ldr	r2, [pc, #16]	; (8103618 <__NVIC_SetPriorityGrouping+0x44>)
 8103608:	68bb      	ldr	r3, [r7, #8]
 810360a:	60d3      	str	r3, [r2, #12]
}
 810360c:	bf00      	nop
 810360e:	3714      	adds	r7, #20
 8103610:	46bd      	mov	sp, r7
 8103612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103616:	4770      	bx	lr
 8103618:	e000ed00 	.word	0xe000ed00

0810361c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810361c:	b480      	push	{r7}
 810361e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103620:	4b04      	ldr	r3, [pc, #16]	; (8103634 <__NVIC_GetPriorityGrouping+0x18>)
 8103622:	68db      	ldr	r3, [r3, #12]
 8103624:	0a1b      	lsrs	r3, r3, #8
 8103626:	f003 0307 	and.w	r3, r3, #7
}
 810362a:	4618      	mov	r0, r3
 810362c:	46bd      	mov	sp, r7
 810362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103632:	4770      	bx	lr
 8103634:	e000ed00 	.word	0xe000ed00

08103638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103638:	b480      	push	{r7}
 810363a:	b083      	sub	sp, #12
 810363c:	af00      	add	r7, sp, #0
 810363e:	4603      	mov	r3, r0
 8103640:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103646:	2b00      	cmp	r3, #0
 8103648:	db0b      	blt.n	8103662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810364a:	88fb      	ldrh	r3, [r7, #6]
 810364c:	f003 021f 	and.w	r2, r3, #31
 8103650:	4907      	ldr	r1, [pc, #28]	; (8103670 <__NVIC_EnableIRQ+0x38>)
 8103652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103656:	095b      	lsrs	r3, r3, #5
 8103658:	2001      	movs	r0, #1
 810365a:	fa00 f202 	lsl.w	r2, r0, r2
 810365e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103662:	bf00      	nop
 8103664:	370c      	adds	r7, #12
 8103666:	46bd      	mov	sp, r7
 8103668:	f85d 7b04 	ldr.w	r7, [sp], #4
 810366c:	4770      	bx	lr
 810366e:	bf00      	nop
 8103670:	e000e100 	.word	0xe000e100

08103674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103674:	b480      	push	{r7}
 8103676:	b083      	sub	sp, #12
 8103678:	af00      	add	r7, sp, #0
 810367a:	4603      	mov	r3, r0
 810367c:	6039      	str	r1, [r7, #0]
 810367e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103684:	2b00      	cmp	r3, #0
 8103686:	db0a      	blt.n	810369e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103688:	683b      	ldr	r3, [r7, #0]
 810368a:	b2da      	uxtb	r2, r3
 810368c:	490c      	ldr	r1, [pc, #48]	; (81036c0 <__NVIC_SetPriority+0x4c>)
 810368e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103692:	0112      	lsls	r2, r2, #4
 8103694:	b2d2      	uxtb	r2, r2
 8103696:	440b      	add	r3, r1
 8103698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810369c:	e00a      	b.n	81036b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810369e:	683b      	ldr	r3, [r7, #0]
 81036a0:	b2da      	uxtb	r2, r3
 81036a2:	4908      	ldr	r1, [pc, #32]	; (81036c4 <__NVIC_SetPriority+0x50>)
 81036a4:	88fb      	ldrh	r3, [r7, #6]
 81036a6:	f003 030f 	and.w	r3, r3, #15
 81036aa:	3b04      	subs	r3, #4
 81036ac:	0112      	lsls	r2, r2, #4
 81036ae:	b2d2      	uxtb	r2, r2
 81036b0:	440b      	add	r3, r1
 81036b2:	761a      	strb	r2, [r3, #24]
}
 81036b4:	bf00      	nop
 81036b6:	370c      	adds	r7, #12
 81036b8:	46bd      	mov	sp, r7
 81036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036be:	4770      	bx	lr
 81036c0:	e000e100 	.word	0xe000e100
 81036c4:	e000ed00 	.word	0xe000ed00

081036c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81036c8:	b480      	push	{r7}
 81036ca:	b089      	sub	sp, #36	; 0x24
 81036cc:	af00      	add	r7, sp, #0
 81036ce:	60f8      	str	r0, [r7, #12]
 81036d0:	60b9      	str	r1, [r7, #8]
 81036d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81036d4:	68fb      	ldr	r3, [r7, #12]
 81036d6:	f003 0307 	and.w	r3, r3, #7
 81036da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81036dc:	69fb      	ldr	r3, [r7, #28]
 81036de:	f1c3 0307 	rsb	r3, r3, #7
 81036e2:	2b04      	cmp	r3, #4
 81036e4:	bf28      	it	cs
 81036e6:	2304      	movcs	r3, #4
 81036e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81036ea:	69fb      	ldr	r3, [r7, #28]
 81036ec:	3304      	adds	r3, #4
 81036ee:	2b06      	cmp	r3, #6
 81036f0:	d902      	bls.n	81036f8 <NVIC_EncodePriority+0x30>
 81036f2:	69fb      	ldr	r3, [r7, #28]
 81036f4:	3b03      	subs	r3, #3
 81036f6:	e000      	b.n	81036fa <NVIC_EncodePriority+0x32>
 81036f8:	2300      	movs	r3, #0
 81036fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81036fc:	f04f 32ff 	mov.w	r2, #4294967295
 8103700:	69bb      	ldr	r3, [r7, #24]
 8103702:	fa02 f303 	lsl.w	r3, r2, r3
 8103706:	43da      	mvns	r2, r3
 8103708:	68bb      	ldr	r3, [r7, #8]
 810370a:	401a      	ands	r2, r3
 810370c:	697b      	ldr	r3, [r7, #20]
 810370e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103710:	f04f 31ff 	mov.w	r1, #4294967295
 8103714:	697b      	ldr	r3, [r7, #20]
 8103716:	fa01 f303 	lsl.w	r3, r1, r3
 810371a:	43d9      	mvns	r1, r3
 810371c:	687b      	ldr	r3, [r7, #4]
 810371e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103720:	4313      	orrs	r3, r2
         );
}
 8103722:	4618      	mov	r0, r3
 8103724:	3724      	adds	r7, #36	; 0x24
 8103726:	46bd      	mov	sp, r7
 8103728:	f85d 7b04 	ldr.w	r7, [sp], #4
 810372c:	4770      	bx	lr
	...

08103730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103730:	b580      	push	{r7, lr}
 8103732:	b082      	sub	sp, #8
 8103734:	af00      	add	r7, sp, #0
 8103736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103738:	687b      	ldr	r3, [r7, #4]
 810373a:	3b01      	subs	r3, #1
 810373c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103740:	d301      	bcc.n	8103746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103742:	2301      	movs	r3, #1
 8103744:	e00f      	b.n	8103766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103746:	4a0a      	ldr	r2, [pc, #40]	; (8103770 <SysTick_Config+0x40>)
 8103748:	687b      	ldr	r3, [r7, #4]
 810374a:	3b01      	subs	r3, #1
 810374c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810374e:	210f      	movs	r1, #15
 8103750:	f04f 30ff 	mov.w	r0, #4294967295
 8103754:	f7ff ff8e 	bl	8103674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103758:	4b05      	ldr	r3, [pc, #20]	; (8103770 <SysTick_Config+0x40>)
 810375a:	2200      	movs	r2, #0
 810375c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810375e:	4b04      	ldr	r3, [pc, #16]	; (8103770 <SysTick_Config+0x40>)
 8103760:	2207      	movs	r2, #7
 8103762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103764:	2300      	movs	r3, #0
}
 8103766:	4618      	mov	r0, r3
 8103768:	3708      	adds	r7, #8
 810376a:	46bd      	mov	sp, r7
 810376c:	bd80      	pop	{r7, pc}
 810376e:	bf00      	nop
 8103770:	e000e010 	.word	0xe000e010

08103774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103774:	b580      	push	{r7, lr}
 8103776:	b082      	sub	sp, #8
 8103778:	af00      	add	r7, sp, #0
 810377a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810377c:	6878      	ldr	r0, [r7, #4]
 810377e:	f7ff ff29 	bl	81035d4 <__NVIC_SetPriorityGrouping>
}
 8103782:	bf00      	nop
 8103784:	3708      	adds	r7, #8
 8103786:	46bd      	mov	sp, r7
 8103788:	bd80      	pop	{r7, pc}

0810378a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810378a:	b580      	push	{r7, lr}
 810378c:	b086      	sub	sp, #24
 810378e:	af00      	add	r7, sp, #0
 8103790:	4603      	mov	r3, r0
 8103792:	60b9      	str	r1, [r7, #8]
 8103794:	607a      	str	r2, [r7, #4]
 8103796:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103798:	f7ff ff40 	bl	810361c <__NVIC_GetPriorityGrouping>
 810379c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810379e:	687a      	ldr	r2, [r7, #4]
 81037a0:	68b9      	ldr	r1, [r7, #8]
 81037a2:	6978      	ldr	r0, [r7, #20]
 81037a4:	f7ff ff90 	bl	81036c8 <NVIC_EncodePriority>
 81037a8:	4602      	mov	r2, r0
 81037aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81037ae:	4611      	mov	r1, r2
 81037b0:	4618      	mov	r0, r3
 81037b2:	f7ff ff5f 	bl	8103674 <__NVIC_SetPriority>
}
 81037b6:	bf00      	nop
 81037b8:	3718      	adds	r7, #24
 81037ba:	46bd      	mov	sp, r7
 81037bc:	bd80      	pop	{r7, pc}

081037be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81037be:	b580      	push	{r7, lr}
 81037c0:	b082      	sub	sp, #8
 81037c2:	af00      	add	r7, sp, #0
 81037c4:	4603      	mov	r3, r0
 81037c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81037c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81037cc:	4618      	mov	r0, r3
 81037ce:	f7ff ff33 	bl	8103638 <__NVIC_EnableIRQ>
}
 81037d2:	bf00      	nop
 81037d4:	3708      	adds	r7, #8
 81037d6:	46bd      	mov	sp, r7
 81037d8:	bd80      	pop	{r7, pc}

081037da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81037da:	b580      	push	{r7, lr}
 81037dc:	b082      	sub	sp, #8
 81037de:	af00      	add	r7, sp, #0
 81037e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81037e2:	6878      	ldr	r0, [r7, #4]
 81037e4:	f7ff ffa4 	bl	8103730 <SysTick_Config>
 81037e8:	4603      	mov	r3, r0
}
 81037ea:	4618      	mov	r0, r3
 81037ec:	3708      	adds	r7, #8
 81037ee:	46bd      	mov	sp, r7
 81037f0:	bd80      	pop	{r7, pc}
	...

081037f4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81037f4:	b480      	push	{r7}
 81037f6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81037f8:	4b07      	ldr	r3, [pc, #28]	; (8103818 <HAL_GetCurrentCPUID+0x24>)
 81037fa:	681b      	ldr	r3, [r3, #0]
 81037fc:	091b      	lsrs	r3, r3, #4
 81037fe:	f003 030f 	and.w	r3, r3, #15
 8103802:	2b07      	cmp	r3, #7
 8103804:	d101      	bne.n	810380a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103806:	2303      	movs	r3, #3
 8103808:	e000      	b.n	810380c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810380a:	2301      	movs	r3, #1
  }
}
 810380c:	4618      	mov	r0, r3
 810380e:	46bd      	mov	sp, r7
 8103810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103814:	4770      	bx	lr
 8103816:	bf00      	nop
 8103818:	e000ed00 	.word	0xe000ed00

0810381c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810381c:	b480      	push	{r7}
 810381e:	b089      	sub	sp, #36	; 0x24
 8103820:	af00      	add	r7, sp, #0
 8103822:	6078      	str	r0, [r7, #4]
 8103824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103826:	2300      	movs	r3, #0
 8103828:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810382a:	4b89      	ldr	r3, [pc, #548]	; (8103a50 <HAL_GPIO_Init+0x234>)
 810382c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810382e:	e194      	b.n	8103b5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103830:	683b      	ldr	r3, [r7, #0]
 8103832:	681a      	ldr	r2, [r3, #0]
 8103834:	2101      	movs	r1, #1
 8103836:	69fb      	ldr	r3, [r7, #28]
 8103838:	fa01 f303 	lsl.w	r3, r1, r3
 810383c:	4013      	ands	r3, r2
 810383e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103840:	693b      	ldr	r3, [r7, #16]
 8103842:	2b00      	cmp	r3, #0
 8103844:	f000 8186 	beq.w	8103b54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103848:	683b      	ldr	r3, [r7, #0]
 810384a:	685b      	ldr	r3, [r3, #4]
 810384c:	f003 0303 	and.w	r3, r3, #3
 8103850:	2b01      	cmp	r3, #1
 8103852:	d005      	beq.n	8103860 <HAL_GPIO_Init+0x44>
 8103854:	683b      	ldr	r3, [r7, #0]
 8103856:	685b      	ldr	r3, [r3, #4]
 8103858:	f003 0303 	and.w	r3, r3, #3
 810385c:	2b02      	cmp	r3, #2
 810385e:	d130      	bne.n	81038c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	689b      	ldr	r3, [r3, #8]
 8103864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103866:	69fb      	ldr	r3, [r7, #28]
 8103868:	005b      	lsls	r3, r3, #1
 810386a:	2203      	movs	r2, #3
 810386c:	fa02 f303 	lsl.w	r3, r2, r3
 8103870:	43db      	mvns	r3, r3
 8103872:	69ba      	ldr	r2, [r7, #24]
 8103874:	4013      	ands	r3, r2
 8103876:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103878:	683b      	ldr	r3, [r7, #0]
 810387a:	68da      	ldr	r2, [r3, #12]
 810387c:	69fb      	ldr	r3, [r7, #28]
 810387e:	005b      	lsls	r3, r3, #1
 8103880:	fa02 f303 	lsl.w	r3, r2, r3
 8103884:	69ba      	ldr	r2, [r7, #24]
 8103886:	4313      	orrs	r3, r2
 8103888:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810388a:	687b      	ldr	r3, [r7, #4]
 810388c:	69ba      	ldr	r2, [r7, #24]
 810388e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103890:	687b      	ldr	r3, [r7, #4]
 8103892:	685b      	ldr	r3, [r3, #4]
 8103894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103896:	2201      	movs	r2, #1
 8103898:	69fb      	ldr	r3, [r7, #28]
 810389a:	fa02 f303 	lsl.w	r3, r2, r3
 810389e:	43db      	mvns	r3, r3
 81038a0:	69ba      	ldr	r2, [r7, #24]
 81038a2:	4013      	ands	r3, r2
 81038a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81038a6:	683b      	ldr	r3, [r7, #0]
 81038a8:	685b      	ldr	r3, [r3, #4]
 81038aa:	091b      	lsrs	r3, r3, #4
 81038ac:	f003 0201 	and.w	r2, r3, #1
 81038b0:	69fb      	ldr	r3, [r7, #28]
 81038b2:	fa02 f303 	lsl.w	r3, r2, r3
 81038b6:	69ba      	ldr	r2, [r7, #24]
 81038b8:	4313      	orrs	r3, r2
 81038ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	69ba      	ldr	r2, [r7, #24]
 81038c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81038c2:	683b      	ldr	r3, [r7, #0]
 81038c4:	685b      	ldr	r3, [r3, #4]
 81038c6:	f003 0303 	and.w	r3, r3, #3
 81038ca:	2b03      	cmp	r3, #3
 81038cc:	d017      	beq.n	81038fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81038ce:	687b      	ldr	r3, [r7, #4]
 81038d0:	68db      	ldr	r3, [r3, #12]
 81038d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81038d4:	69fb      	ldr	r3, [r7, #28]
 81038d6:	005b      	lsls	r3, r3, #1
 81038d8:	2203      	movs	r2, #3
 81038da:	fa02 f303 	lsl.w	r3, r2, r3
 81038de:	43db      	mvns	r3, r3
 81038e0:	69ba      	ldr	r2, [r7, #24]
 81038e2:	4013      	ands	r3, r2
 81038e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81038e6:	683b      	ldr	r3, [r7, #0]
 81038e8:	689a      	ldr	r2, [r3, #8]
 81038ea:	69fb      	ldr	r3, [r7, #28]
 81038ec:	005b      	lsls	r3, r3, #1
 81038ee:	fa02 f303 	lsl.w	r3, r2, r3
 81038f2:	69ba      	ldr	r2, [r7, #24]
 81038f4:	4313      	orrs	r3, r2
 81038f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	69ba      	ldr	r2, [r7, #24]
 81038fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81038fe:	683b      	ldr	r3, [r7, #0]
 8103900:	685b      	ldr	r3, [r3, #4]
 8103902:	f003 0303 	and.w	r3, r3, #3
 8103906:	2b02      	cmp	r3, #2
 8103908:	d123      	bne.n	8103952 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810390a:	69fb      	ldr	r3, [r7, #28]
 810390c:	08da      	lsrs	r2, r3, #3
 810390e:	687b      	ldr	r3, [r7, #4]
 8103910:	3208      	adds	r2, #8
 8103912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103918:	69fb      	ldr	r3, [r7, #28]
 810391a:	f003 0307 	and.w	r3, r3, #7
 810391e:	009b      	lsls	r3, r3, #2
 8103920:	220f      	movs	r2, #15
 8103922:	fa02 f303 	lsl.w	r3, r2, r3
 8103926:	43db      	mvns	r3, r3
 8103928:	69ba      	ldr	r2, [r7, #24]
 810392a:	4013      	ands	r3, r2
 810392c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810392e:	683b      	ldr	r3, [r7, #0]
 8103930:	691a      	ldr	r2, [r3, #16]
 8103932:	69fb      	ldr	r3, [r7, #28]
 8103934:	f003 0307 	and.w	r3, r3, #7
 8103938:	009b      	lsls	r3, r3, #2
 810393a:	fa02 f303 	lsl.w	r3, r2, r3
 810393e:	69ba      	ldr	r2, [r7, #24]
 8103940:	4313      	orrs	r3, r2
 8103942:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103944:	69fb      	ldr	r3, [r7, #28]
 8103946:	08da      	lsrs	r2, r3, #3
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	3208      	adds	r2, #8
 810394c:	69b9      	ldr	r1, [r7, #24]
 810394e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	681b      	ldr	r3, [r3, #0]
 8103956:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103958:	69fb      	ldr	r3, [r7, #28]
 810395a:	005b      	lsls	r3, r3, #1
 810395c:	2203      	movs	r2, #3
 810395e:	fa02 f303 	lsl.w	r3, r2, r3
 8103962:	43db      	mvns	r3, r3
 8103964:	69ba      	ldr	r2, [r7, #24]
 8103966:	4013      	ands	r3, r2
 8103968:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810396a:	683b      	ldr	r3, [r7, #0]
 810396c:	685b      	ldr	r3, [r3, #4]
 810396e:	f003 0203 	and.w	r2, r3, #3
 8103972:	69fb      	ldr	r3, [r7, #28]
 8103974:	005b      	lsls	r3, r3, #1
 8103976:	fa02 f303 	lsl.w	r3, r2, r3
 810397a:	69ba      	ldr	r2, [r7, #24]
 810397c:	4313      	orrs	r3, r2
 810397e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	69ba      	ldr	r2, [r7, #24]
 8103984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8103986:	683b      	ldr	r3, [r7, #0]
 8103988:	685b      	ldr	r3, [r3, #4]
 810398a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810398e:	2b00      	cmp	r3, #0
 8103990:	f000 80e0 	beq.w	8103b54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103994:	4b2f      	ldr	r3, [pc, #188]	; (8103a54 <HAL_GPIO_Init+0x238>)
 8103996:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810399a:	4a2e      	ldr	r2, [pc, #184]	; (8103a54 <HAL_GPIO_Init+0x238>)
 810399c:	f043 0302 	orr.w	r3, r3, #2
 81039a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81039a4:	4b2b      	ldr	r3, [pc, #172]	; (8103a54 <HAL_GPIO_Init+0x238>)
 81039a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81039aa:	f003 0302 	and.w	r3, r3, #2
 81039ae:	60fb      	str	r3, [r7, #12]
 81039b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81039b2:	4a29      	ldr	r2, [pc, #164]	; (8103a58 <HAL_GPIO_Init+0x23c>)
 81039b4:	69fb      	ldr	r3, [r7, #28]
 81039b6:	089b      	lsrs	r3, r3, #2
 81039b8:	3302      	adds	r3, #2
 81039ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81039be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81039c0:	69fb      	ldr	r3, [r7, #28]
 81039c2:	f003 0303 	and.w	r3, r3, #3
 81039c6:	009b      	lsls	r3, r3, #2
 81039c8:	220f      	movs	r2, #15
 81039ca:	fa02 f303 	lsl.w	r3, r2, r3
 81039ce:	43db      	mvns	r3, r3
 81039d0:	69ba      	ldr	r2, [r7, #24]
 81039d2:	4013      	ands	r3, r2
 81039d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	4a20      	ldr	r2, [pc, #128]	; (8103a5c <HAL_GPIO_Init+0x240>)
 81039da:	4293      	cmp	r3, r2
 81039dc:	d052      	beq.n	8103a84 <HAL_GPIO_Init+0x268>
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	4a1f      	ldr	r2, [pc, #124]	; (8103a60 <HAL_GPIO_Init+0x244>)
 81039e2:	4293      	cmp	r3, r2
 81039e4:	d031      	beq.n	8103a4a <HAL_GPIO_Init+0x22e>
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	4a1e      	ldr	r2, [pc, #120]	; (8103a64 <HAL_GPIO_Init+0x248>)
 81039ea:	4293      	cmp	r3, r2
 81039ec:	d02b      	beq.n	8103a46 <HAL_GPIO_Init+0x22a>
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	4a1d      	ldr	r2, [pc, #116]	; (8103a68 <HAL_GPIO_Init+0x24c>)
 81039f2:	4293      	cmp	r3, r2
 81039f4:	d025      	beq.n	8103a42 <HAL_GPIO_Init+0x226>
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	4a1c      	ldr	r2, [pc, #112]	; (8103a6c <HAL_GPIO_Init+0x250>)
 81039fa:	4293      	cmp	r3, r2
 81039fc:	d01f      	beq.n	8103a3e <HAL_GPIO_Init+0x222>
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	4a1b      	ldr	r2, [pc, #108]	; (8103a70 <HAL_GPIO_Init+0x254>)
 8103a02:	4293      	cmp	r3, r2
 8103a04:	d019      	beq.n	8103a3a <HAL_GPIO_Init+0x21e>
 8103a06:	687b      	ldr	r3, [r7, #4]
 8103a08:	4a1a      	ldr	r2, [pc, #104]	; (8103a74 <HAL_GPIO_Init+0x258>)
 8103a0a:	4293      	cmp	r3, r2
 8103a0c:	d013      	beq.n	8103a36 <HAL_GPIO_Init+0x21a>
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	4a19      	ldr	r2, [pc, #100]	; (8103a78 <HAL_GPIO_Init+0x25c>)
 8103a12:	4293      	cmp	r3, r2
 8103a14:	d00d      	beq.n	8103a32 <HAL_GPIO_Init+0x216>
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	4a18      	ldr	r2, [pc, #96]	; (8103a7c <HAL_GPIO_Init+0x260>)
 8103a1a:	4293      	cmp	r3, r2
 8103a1c:	d007      	beq.n	8103a2e <HAL_GPIO_Init+0x212>
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	4a17      	ldr	r2, [pc, #92]	; (8103a80 <HAL_GPIO_Init+0x264>)
 8103a22:	4293      	cmp	r3, r2
 8103a24:	d101      	bne.n	8103a2a <HAL_GPIO_Init+0x20e>
 8103a26:	2309      	movs	r3, #9
 8103a28:	e02d      	b.n	8103a86 <HAL_GPIO_Init+0x26a>
 8103a2a:	230a      	movs	r3, #10
 8103a2c:	e02b      	b.n	8103a86 <HAL_GPIO_Init+0x26a>
 8103a2e:	2308      	movs	r3, #8
 8103a30:	e029      	b.n	8103a86 <HAL_GPIO_Init+0x26a>
 8103a32:	2307      	movs	r3, #7
 8103a34:	e027      	b.n	8103a86 <HAL_GPIO_Init+0x26a>
 8103a36:	2306      	movs	r3, #6
 8103a38:	e025      	b.n	8103a86 <HAL_GPIO_Init+0x26a>
 8103a3a:	2305      	movs	r3, #5
 8103a3c:	e023      	b.n	8103a86 <HAL_GPIO_Init+0x26a>
 8103a3e:	2304      	movs	r3, #4
 8103a40:	e021      	b.n	8103a86 <HAL_GPIO_Init+0x26a>
 8103a42:	2303      	movs	r3, #3
 8103a44:	e01f      	b.n	8103a86 <HAL_GPIO_Init+0x26a>
 8103a46:	2302      	movs	r3, #2
 8103a48:	e01d      	b.n	8103a86 <HAL_GPIO_Init+0x26a>
 8103a4a:	2301      	movs	r3, #1
 8103a4c:	e01b      	b.n	8103a86 <HAL_GPIO_Init+0x26a>
 8103a4e:	bf00      	nop
 8103a50:	580000c0 	.word	0x580000c0
 8103a54:	58024400 	.word	0x58024400
 8103a58:	58000400 	.word	0x58000400
 8103a5c:	58020000 	.word	0x58020000
 8103a60:	58020400 	.word	0x58020400
 8103a64:	58020800 	.word	0x58020800
 8103a68:	58020c00 	.word	0x58020c00
 8103a6c:	58021000 	.word	0x58021000
 8103a70:	58021400 	.word	0x58021400
 8103a74:	58021800 	.word	0x58021800
 8103a78:	58021c00 	.word	0x58021c00
 8103a7c:	58022000 	.word	0x58022000
 8103a80:	58022400 	.word	0x58022400
 8103a84:	2300      	movs	r3, #0
 8103a86:	69fa      	ldr	r2, [r7, #28]
 8103a88:	f002 0203 	and.w	r2, r2, #3
 8103a8c:	0092      	lsls	r2, r2, #2
 8103a8e:	4093      	lsls	r3, r2
 8103a90:	69ba      	ldr	r2, [r7, #24]
 8103a92:	4313      	orrs	r3, r2
 8103a94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103a96:	4938      	ldr	r1, [pc, #224]	; (8103b78 <HAL_GPIO_Init+0x35c>)
 8103a98:	69fb      	ldr	r3, [r7, #28]
 8103a9a:	089b      	lsrs	r3, r3, #2
 8103a9c:	3302      	adds	r3, #2
 8103a9e:	69ba      	ldr	r2, [r7, #24]
 8103aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103aa8:	681b      	ldr	r3, [r3, #0]
 8103aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103aac:	693b      	ldr	r3, [r7, #16]
 8103aae:	43db      	mvns	r3, r3
 8103ab0:	69ba      	ldr	r2, [r7, #24]
 8103ab2:	4013      	ands	r3, r2
 8103ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103ab6:	683b      	ldr	r3, [r7, #0]
 8103ab8:	685b      	ldr	r3, [r3, #4]
 8103aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103abe:	2b00      	cmp	r3, #0
 8103ac0:	d003      	beq.n	8103aca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103ac2:	69ba      	ldr	r2, [r7, #24]
 8103ac4:	693b      	ldr	r3, [r7, #16]
 8103ac6:	4313      	orrs	r3, r2
 8103ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103ace:	69bb      	ldr	r3, [r7, #24]
 8103ad0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103ad6:	685b      	ldr	r3, [r3, #4]
 8103ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103ada:	693b      	ldr	r3, [r7, #16]
 8103adc:	43db      	mvns	r3, r3
 8103ade:	69ba      	ldr	r2, [r7, #24]
 8103ae0:	4013      	ands	r3, r2
 8103ae2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103ae4:	683b      	ldr	r3, [r7, #0]
 8103ae6:	685b      	ldr	r3, [r3, #4]
 8103ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103aec:	2b00      	cmp	r3, #0
 8103aee:	d003      	beq.n	8103af8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103af0:	69ba      	ldr	r2, [r7, #24]
 8103af2:	693b      	ldr	r3, [r7, #16]
 8103af4:	4313      	orrs	r3, r2
 8103af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103afc:	69bb      	ldr	r3, [r7, #24]
 8103afe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103b00:	697b      	ldr	r3, [r7, #20]
 8103b02:	685b      	ldr	r3, [r3, #4]
 8103b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103b06:	693b      	ldr	r3, [r7, #16]
 8103b08:	43db      	mvns	r3, r3
 8103b0a:	69ba      	ldr	r2, [r7, #24]
 8103b0c:	4013      	ands	r3, r2
 8103b0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103b10:	683b      	ldr	r3, [r7, #0]
 8103b12:	685b      	ldr	r3, [r3, #4]
 8103b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103b18:	2b00      	cmp	r3, #0
 8103b1a:	d003      	beq.n	8103b24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103b1c:	69ba      	ldr	r2, [r7, #24]
 8103b1e:	693b      	ldr	r3, [r7, #16]
 8103b20:	4313      	orrs	r3, r2
 8103b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103b24:	697b      	ldr	r3, [r7, #20]
 8103b26:	69ba      	ldr	r2, [r7, #24]
 8103b28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103b2a:	697b      	ldr	r3, [r7, #20]
 8103b2c:	681b      	ldr	r3, [r3, #0]
 8103b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103b30:	693b      	ldr	r3, [r7, #16]
 8103b32:	43db      	mvns	r3, r3
 8103b34:	69ba      	ldr	r2, [r7, #24]
 8103b36:	4013      	ands	r3, r2
 8103b38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103b3a:	683b      	ldr	r3, [r7, #0]
 8103b3c:	685b      	ldr	r3, [r3, #4]
 8103b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103b42:	2b00      	cmp	r3, #0
 8103b44:	d003      	beq.n	8103b4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103b46:	69ba      	ldr	r2, [r7, #24]
 8103b48:	693b      	ldr	r3, [r7, #16]
 8103b4a:	4313      	orrs	r3, r2
 8103b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103b4e:	697b      	ldr	r3, [r7, #20]
 8103b50:	69ba      	ldr	r2, [r7, #24]
 8103b52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103b54:	69fb      	ldr	r3, [r7, #28]
 8103b56:	3301      	adds	r3, #1
 8103b58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103b5a:	683b      	ldr	r3, [r7, #0]
 8103b5c:	681a      	ldr	r2, [r3, #0]
 8103b5e:	69fb      	ldr	r3, [r7, #28]
 8103b60:	fa22 f303 	lsr.w	r3, r2, r3
 8103b64:	2b00      	cmp	r3, #0
 8103b66:	f47f ae63 	bne.w	8103830 <HAL_GPIO_Init+0x14>
  }
}
 8103b6a:	bf00      	nop
 8103b6c:	bf00      	nop
 8103b6e:	3724      	adds	r7, #36	; 0x24
 8103b70:	46bd      	mov	sp, r7
 8103b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b76:	4770      	bx	lr
 8103b78:	58000400 	.word	0x58000400

08103b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103b7c:	b480      	push	{r7}
 8103b7e:	b083      	sub	sp, #12
 8103b80:	af00      	add	r7, sp, #0
 8103b82:	6078      	str	r0, [r7, #4]
 8103b84:	460b      	mov	r3, r1
 8103b86:	807b      	strh	r3, [r7, #2]
 8103b88:	4613      	mov	r3, r2
 8103b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103b8c:	787b      	ldrb	r3, [r7, #1]
 8103b8e:	2b00      	cmp	r3, #0
 8103b90:	d003      	beq.n	8103b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103b92:	887a      	ldrh	r2, [r7, #2]
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103b98:	e003      	b.n	8103ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103b9a:	887b      	ldrh	r3, [r7, #2]
 8103b9c:	041a      	lsls	r2, r3, #16
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	619a      	str	r2, [r3, #24]
}
 8103ba2:	bf00      	nop
 8103ba4:	370c      	adds	r7, #12
 8103ba6:	46bd      	mov	sp, r7
 8103ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bac:	4770      	bx	lr
	...

08103bb0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103bb0:	b480      	push	{r7}
 8103bb2:	b083      	sub	sp, #12
 8103bb4:	af00      	add	r7, sp, #0
 8103bb6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103bb8:	4b05      	ldr	r3, [pc, #20]	; (8103bd0 <HAL_HSEM_ActivateNotification+0x20>)
 8103bba:	681a      	ldr	r2, [r3, #0]
 8103bbc:	4904      	ldr	r1, [pc, #16]	; (8103bd0 <HAL_HSEM_ActivateNotification+0x20>)
 8103bbe:	687b      	ldr	r3, [r7, #4]
 8103bc0:	4313      	orrs	r3, r2
 8103bc2:	600b      	str	r3, [r1, #0]
#endif
}
 8103bc4:	bf00      	nop
 8103bc6:	370c      	adds	r7, #12
 8103bc8:	46bd      	mov	sp, r7
 8103bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bce:	4770      	bx	lr
 8103bd0:	58026510 	.word	0x58026510

08103bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8103bd4:	b580      	push	{r7, lr}
 8103bd6:	b082      	sub	sp, #8
 8103bd8:	af00      	add	r7, sp, #0
 8103bda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	2b00      	cmp	r3, #0
 8103be0:	d101      	bne.n	8103be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8103be2:	2301      	movs	r3, #1
 8103be4:	e08d      	b.n	8103d02 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8103be6:	687b      	ldr	r3, [r7, #4]
 8103be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103bec:	b2db      	uxtb	r3, r3
 8103bee:	2b00      	cmp	r3, #0
 8103bf0:	d106      	bne.n	8103c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	2200      	movs	r2, #0
 8103bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8103bfa:	6878      	ldr	r0, [r7, #4]
 8103bfc:	f7ff f8c4 	bl	8102d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8103c00:	687b      	ldr	r3, [r7, #4]
 8103c02:	2224      	movs	r2, #36	; 0x24
 8103c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	681b      	ldr	r3, [r3, #0]
 8103c0c:	681a      	ldr	r2, [r3, #0]
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	f022 0201 	bic.w	r2, r2, #1
 8103c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	685a      	ldr	r2, [r3, #4]
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	681b      	ldr	r3, [r3, #0]
 8103c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8103c24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8103c26:	687b      	ldr	r3, [r7, #4]
 8103c28:	681b      	ldr	r3, [r3, #0]
 8103c2a:	689a      	ldr	r2, [r3, #8]
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103c34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	68db      	ldr	r3, [r3, #12]
 8103c3a:	2b01      	cmp	r3, #1
 8103c3c:	d107      	bne.n	8103c4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	689a      	ldr	r2, [r3, #8]
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	681b      	ldr	r3, [r3, #0]
 8103c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103c4a:	609a      	str	r2, [r3, #8]
 8103c4c:	e006      	b.n	8103c5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8103c4e:	687b      	ldr	r3, [r7, #4]
 8103c50:	689a      	ldr	r2, [r3, #8]
 8103c52:	687b      	ldr	r3, [r7, #4]
 8103c54:	681b      	ldr	r3, [r3, #0]
 8103c56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8103c5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	68db      	ldr	r3, [r3, #12]
 8103c60:	2b02      	cmp	r3, #2
 8103c62:	d108      	bne.n	8103c76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	685a      	ldr	r2, [r3, #4]
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	681b      	ldr	r3, [r3, #0]
 8103c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103c72:	605a      	str	r2, [r3, #4]
 8103c74:	e007      	b.n	8103c86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8103c76:	687b      	ldr	r3, [r7, #4]
 8103c78:	681b      	ldr	r3, [r3, #0]
 8103c7a:	685a      	ldr	r2, [r3, #4]
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	681b      	ldr	r3, [r3, #0]
 8103c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8103c84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	685b      	ldr	r3, [r3, #4]
 8103c8c:	687a      	ldr	r2, [r7, #4]
 8103c8e:	6812      	ldr	r2, [r2, #0]
 8103c90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8103c98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	681b      	ldr	r3, [r3, #0]
 8103c9e:	68da      	ldr	r2, [r3, #12]
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103ca8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	691a      	ldr	r2, [r3, #16]
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	695b      	ldr	r3, [r3, #20]
 8103cb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8103cb6:	687b      	ldr	r3, [r7, #4]
 8103cb8:	699b      	ldr	r3, [r3, #24]
 8103cba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	681b      	ldr	r3, [r3, #0]
 8103cc0:	430a      	orrs	r2, r1
 8103cc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	69d9      	ldr	r1, [r3, #28]
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	6a1a      	ldr	r2, [r3, #32]
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	681b      	ldr	r3, [r3, #0]
 8103cd0:	430a      	orrs	r2, r1
 8103cd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	681b      	ldr	r3, [r3, #0]
 8103cd8:	681a      	ldr	r2, [r3, #0]
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	681b      	ldr	r3, [r3, #0]
 8103cde:	f042 0201 	orr.w	r2, r2, #1
 8103ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103ce4:	687b      	ldr	r3, [r7, #4]
 8103ce6:	2200      	movs	r2, #0
 8103ce8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	2220      	movs	r2, #32
 8103cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	2200      	movs	r2, #0
 8103cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	2200      	movs	r2, #0
 8103cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8103d00:	2300      	movs	r3, #0
}
 8103d02:	4618      	mov	r0, r3
 8103d04:	3708      	adds	r7, #8
 8103d06:	46bd      	mov	sp, r7
 8103d08:	bd80      	pop	{r7, pc}
	...

08103d0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103d0c:	b580      	push	{r7, lr}
 8103d0e:	b088      	sub	sp, #32
 8103d10:	af02      	add	r7, sp, #8
 8103d12:	60f8      	str	r0, [r7, #12]
 8103d14:	4608      	mov	r0, r1
 8103d16:	4611      	mov	r1, r2
 8103d18:	461a      	mov	r2, r3
 8103d1a:	4603      	mov	r3, r0
 8103d1c:	817b      	strh	r3, [r7, #10]
 8103d1e:	460b      	mov	r3, r1
 8103d20:	813b      	strh	r3, [r7, #8]
 8103d22:	4613      	mov	r3, r2
 8103d24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103d26:	68fb      	ldr	r3, [r7, #12]
 8103d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103d2c:	b2db      	uxtb	r3, r3
 8103d2e:	2b20      	cmp	r3, #32
 8103d30:	f040 80f9 	bne.w	8103f26 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8103d34:	6a3b      	ldr	r3, [r7, #32]
 8103d36:	2b00      	cmp	r3, #0
 8103d38:	d002      	beq.n	8103d40 <HAL_I2C_Mem_Write+0x34>
 8103d3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8103d3c:	2b00      	cmp	r3, #0
 8103d3e:	d105      	bne.n	8103d4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8103d40:	68fb      	ldr	r3, [r7, #12]
 8103d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103d46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8103d48:	2301      	movs	r3, #1
 8103d4a:	e0ed      	b.n	8103f28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103d4c:	68fb      	ldr	r3, [r7, #12]
 8103d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103d52:	2b01      	cmp	r3, #1
 8103d54:	d101      	bne.n	8103d5a <HAL_I2C_Mem_Write+0x4e>
 8103d56:	2302      	movs	r3, #2
 8103d58:	e0e6      	b.n	8103f28 <HAL_I2C_Mem_Write+0x21c>
 8103d5a:	68fb      	ldr	r3, [r7, #12]
 8103d5c:	2201      	movs	r2, #1
 8103d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103d62:	f7ff fc07 	bl	8103574 <HAL_GetTick>
 8103d66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103d68:	697b      	ldr	r3, [r7, #20]
 8103d6a:	9300      	str	r3, [sp, #0]
 8103d6c:	2319      	movs	r3, #25
 8103d6e:	2201      	movs	r2, #1
 8103d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103d74:	68f8      	ldr	r0, [r7, #12]
 8103d76:	f000 fac3 	bl	8104300 <I2C_WaitOnFlagUntilTimeout>
 8103d7a:	4603      	mov	r3, r0
 8103d7c:	2b00      	cmp	r3, #0
 8103d7e:	d001      	beq.n	8103d84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8103d80:	2301      	movs	r3, #1
 8103d82:	e0d1      	b.n	8103f28 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8103d84:	68fb      	ldr	r3, [r7, #12]
 8103d86:	2221      	movs	r2, #33	; 0x21
 8103d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8103d8c:	68fb      	ldr	r3, [r7, #12]
 8103d8e:	2240      	movs	r2, #64	; 0x40
 8103d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103d94:	68fb      	ldr	r3, [r7, #12]
 8103d96:	2200      	movs	r2, #0
 8103d98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103d9a:	68fb      	ldr	r3, [r7, #12]
 8103d9c:	6a3a      	ldr	r2, [r7, #32]
 8103d9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103da0:	68fb      	ldr	r3, [r7, #12]
 8103da2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8103da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103da6:	68fb      	ldr	r3, [r7, #12]
 8103da8:	2200      	movs	r2, #0
 8103daa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8103dac:	88f8      	ldrh	r0, [r7, #6]
 8103dae:	893a      	ldrh	r2, [r7, #8]
 8103db0:	8979      	ldrh	r1, [r7, #10]
 8103db2:	697b      	ldr	r3, [r7, #20]
 8103db4:	9301      	str	r3, [sp, #4]
 8103db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103db8:	9300      	str	r3, [sp, #0]
 8103dba:	4603      	mov	r3, r0
 8103dbc:	68f8      	ldr	r0, [r7, #12]
 8103dbe:	f000 f9d3 	bl	8104168 <I2C_RequestMemoryWrite>
 8103dc2:	4603      	mov	r3, r0
 8103dc4:	2b00      	cmp	r3, #0
 8103dc6:	d005      	beq.n	8103dd4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103dc8:	68fb      	ldr	r3, [r7, #12]
 8103dca:	2200      	movs	r2, #0
 8103dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8103dd0:	2301      	movs	r3, #1
 8103dd2:	e0a9      	b.n	8103f28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103dd4:	68fb      	ldr	r3, [r7, #12]
 8103dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103dd8:	b29b      	uxth	r3, r3
 8103dda:	2bff      	cmp	r3, #255	; 0xff
 8103ddc:	d90e      	bls.n	8103dfc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103dde:	68fb      	ldr	r3, [r7, #12]
 8103de0:	22ff      	movs	r2, #255	; 0xff
 8103de2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8103de4:	68fb      	ldr	r3, [r7, #12]
 8103de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103de8:	b2da      	uxtb	r2, r3
 8103dea:	8979      	ldrh	r1, [r7, #10]
 8103dec:	2300      	movs	r3, #0
 8103dee:	9300      	str	r3, [sp, #0]
 8103df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103df4:	68f8      	ldr	r0, [r7, #12]
 8103df6:	f000 fc47 	bl	8104688 <I2C_TransferConfig>
 8103dfa:	e00f      	b.n	8103e1c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103dfc:	68fb      	ldr	r3, [r7, #12]
 8103dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e00:	b29a      	uxth	r2, r3
 8103e02:	68fb      	ldr	r3, [r7, #12]
 8103e04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8103e06:	68fb      	ldr	r3, [r7, #12]
 8103e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103e0a:	b2da      	uxtb	r2, r3
 8103e0c:	8979      	ldrh	r1, [r7, #10]
 8103e0e:	2300      	movs	r3, #0
 8103e10:	9300      	str	r3, [sp, #0]
 8103e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103e16:	68f8      	ldr	r0, [r7, #12]
 8103e18:	f000 fc36 	bl	8104688 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103e1c:	697a      	ldr	r2, [r7, #20]
 8103e1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8103e20:	68f8      	ldr	r0, [r7, #12]
 8103e22:	f000 fac6 	bl	81043b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8103e26:	4603      	mov	r3, r0
 8103e28:	2b00      	cmp	r3, #0
 8103e2a:	d001      	beq.n	8103e30 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8103e2c:	2301      	movs	r3, #1
 8103e2e:	e07b      	b.n	8103f28 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8103e30:	68fb      	ldr	r3, [r7, #12]
 8103e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e34:	781a      	ldrb	r2, [r3, #0]
 8103e36:	68fb      	ldr	r3, [r7, #12]
 8103e38:	681b      	ldr	r3, [r3, #0]
 8103e3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103e3c:	68fb      	ldr	r3, [r7, #12]
 8103e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e40:	1c5a      	adds	r2, r3, #1
 8103e42:	68fb      	ldr	r3, [r7, #12]
 8103e44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8103e46:	68fb      	ldr	r3, [r7, #12]
 8103e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e4a:	b29b      	uxth	r3, r3
 8103e4c:	3b01      	subs	r3, #1
 8103e4e:	b29a      	uxth	r2, r3
 8103e50:	68fb      	ldr	r3, [r7, #12]
 8103e52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8103e54:	68fb      	ldr	r3, [r7, #12]
 8103e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103e58:	3b01      	subs	r3, #1
 8103e5a:	b29a      	uxth	r2, r3
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103e60:	68fb      	ldr	r3, [r7, #12]
 8103e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e64:	b29b      	uxth	r3, r3
 8103e66:	2b00      	cmp	r3, #0
 8103e68:	d034      	beq.n	8103ed4 <HAL_I2C_Mem_Write+0x1c8>
 8103e6a:	68fb      	ldr	r3, [r7, #12]
 8103e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103e6e:	2b00      	cmp	r3, #0
 8103e70:	d130      	bne.n	8103ed4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103e72:	697b      	ldr	r3, [r7, #20]
 8103e74:	9300      	str	r3, [sp, #0]
 8103e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103e78:	2200      	movs	r2, #0
 8103e7a:	2180      	movs	r1, #128	; 0x80
 8103e7c:	68f8      	ldr	r0, [r7, #12]
 8103e7e:	f000 fa3f 	bl	8104300 <I2C_WaitOnFlagUntilTimeout>
 8103e82:	4603      	mov	r3, r0
 8103e84:	2b00      	cmp	r3, #0
 8103e86:	d001      	beq.n	8103e8c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8103e88:	2301      	movs	r3, #1
 8103e8a:	e04d      	b.n	8103f28 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103e8c:	68fb      	ldr	r3, [r7, #12]
 8103e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e90:	b29b      	uxth	r3, r3
 8103e92:	2bff      	cmp	r3, #255	; 0xff
 8103e94:	d90e      	bls.n	8103eb4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103e96:	68fb      	ldr	r3, [r7, #12]
 8103e98:	22ff      	movs	r2, #255	; 0xff
 8103e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103e9c:	68fb      	ldr	r3, [r7, #12]
 8103e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103ea0:	b2da      	uxtb	r2, r3
 8103ea2:	8979      	ldrh	r1, [r7, #10]
 8103ea4:	2300      	movs	r3, #0
 8103ea6:	9300      	str	r3, [sp, #0]
 8103ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103eac:	68f8      	ldr	r0, [r7, #12]
 8103eae:	f000 fbeb 	bl	8104688 <I2C_TransferConfig>
 8103eb2:	e00f      	b.n	8103ed4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103eb4:	68fb      	ldr	r3, [r7, #12]
 8103eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103eb8:	b29a      	uxth	r2, r3
 8103eba:	68fb      	ldr	r3, [r7, #12]
 8103ebc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103ebe:	68fb      	ldr	r3, [r7, #12]
 8103ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103ec2:	b2da      	uxtb	r2, r3
 8103ec4:	8979      	ldrh	r1, [r7, #10]
 8103ec6:	2300      	movs	r3, #0
 8103ec8:	9300      	str	r3, [sp, #0]
 8103eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103ece:	68f8      	ldr	r0, [r7, #12]
 8103ed0:	f000 fbda 	bl	8104688 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8103ed4:	68fb      	ldr	r3, [r7, #12]
 8103ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103ed8:	b29b      	uxth	r3, r3
 8103eda:	2b00      	cmp	r3, #0
 8103edc:	d19e      	bne.n	8103e1c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103ede:	697a      	ldr	r2, [r7, #20]
 8103ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8103ee2:	68f8      	ldr	r0, [r7, #12]
 8103ee4:	f000 faac 	bl	8104440 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103ee8:	4603      	mov	r3, r0
 8103eea:	2b00      	cmp	r3, #0
 8103eec:	d001      	beq.n	8103ef2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8103eee:	2301      	movs	r3, #1
 8103ef0:	e01a      	b.n	8103f28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103ef2:	68fb      	ldr	r3, [r7, #12]
 8103ef4:	681b      	ldr	r3, [r3, #0]
 8103ef6:	2220      	movs	r2, #32
 8103ef8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103efa:	68fb      	ldr	r3, [r7, #12]
 8103efc:	681b      	ldr	r3, [r3, #0]
 8103efe:	6859      	ldr	r1, [r3, #4]
 8103f00:	68fb      	ldr	r3, [r7, #12]
 8103f02:	681a      	ldr	r2, [r3, #0]
 8103f04:	4b0a      	ldr	r3, [pc, #40]	; (8103f30 <HAL_I2C_Mem_Write+0x224>)
 8103f06:	400b      	ands	r3, r1
 8103f08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103f0a:	68fb      	ldr	r3, [r7, #12]
 8103f0c:	2220      	movs	r2, #32
 8103f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103f12:	68fb      	ldr	r3, [r7, #12]
 8103f14:	2200      	movs	r2, #0
 8103f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103f1a:	68fb      	ldr	r3, [r7, #12]
 8103f1c:	2200      	movs	r2, #0
 8103f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103f22:	2300      	movs	r3, #0
 8103f24:	e000      	b.n	8103f28 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8103f26:	2302      	movs	r3, #2
  }
}
 8103f28:	4618      	mov	r0, r3
 8103f2a:	3718      	adds	r7, #24
 8103f2c:	46bd      	mov	sp, r7
 8103f2e:	bd80      	pop	{r7, pc}
 8103f30:	fe00e800 	.word	0xfe00e800

08103f34 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103f34:	b580      	push	{r7, lr}
 8103f36:	b088      	sub	sp, #32
 8103f38:	af02      	add	r7, sp, #8
 8103f3a:	60f8      	str	r0, [r7, #12]
 8103f3c:	4608      	mov	r0, r1
 8103f3e:	4611      	mov	r1, r2
 8103f40:	461a      	mov	r2, r3
 8103f42:	4603      	mov	r3, r0
 8103f44:	817b      	strh	r3, [r7, #10]
 8103f46:	460b      	mov	r3, r1
 8103f48:	813b      	strh	r3, [r7, #8]
 8103f4a:	4613      	mov	r3, r2
 8103f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103f4e:	68fb      	ldr	r3, [r7, #12]
 8103f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103f54:	b2db      	uxtb	r3, r3
 8103f56:	2b20      	cmp	r3, #32
 8103f58:	f040 80fd 	bne.w	8104156 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8103f5c:	6a3b      	ldr	r3, [r7, #32]
 8103f5e:	2b00      	cmp	r3, #0
 8103f60:	d002      	beq.n	8103f68 <HAL_I2C_Mem_Read+0x34>
 8103f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8103f64:	2b00      	cmp	r3, #0
 8103f66:	d105      	bne.n	8103f74 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8103f68:	68fb      	ldr	r3, [r7, #12]
 8103f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103f6e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8103f70:	2301      	movs	r3, #1
 8103f72:	e0f1      	b.n	8104158 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103f74:	68fb      	ldr	r3, [r7, #12]
 8103f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103f7a:	2b01      	cmp	r3, #1
 8103f7c:	d101      	bne.n	8103f82 <HAL_I2C_Mem_Read+0x4e>
 8103f7e:	2302      	movs	r3, #2
 8103f80:	e0ea      	b.n	8104158 <HAL_I2C_Mem_Read+0x224>
 8103f82:	68fb      	ldr	r3, [r7, #12]
 8103f84:	2201      	movs	r2, #1
 8103f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103f8a:	f7ff faf3 	bl	8103574 <HAL_GetTick>
 8103f8e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103f90:	697b      	ldr	r3, [r7, #20]
 8103f92:	9300      	str	r3, [sp, #0]
 8103f94:	2319      	movs	r3, #25
 8103f96:	2201      	movs	r2, #1
 8103f98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103f9c:	68f8      	ldr	r0, [r7, #12]
 8103f9e:	f000 f9af 	bl	8104300 <I2C_WaitOnFlagUntilTimeout>
 8103fa2:	4603      	mov	r3, r0
 8103fa4:	2b00      	cmp	r3, #0
 8103fa6:	d001      	beq.n	8103fac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8103fa8:	2301      	movs	r3, #1
 8103faa:	e0d5      	b.n	8104158 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8103fac:	68fb      	ldr	r3, [r7, #12]
 8103fae:	2222      	movs	r2, #34	; 0x22
 8103fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8103fb4:	68fb      	ldr	r3, [r7, #12]
 8103fb6:	2240      	movs	r2, #64	; 0x40
 8103fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103fbc:	68fb      	ldr	r3, [r7, #12]
 8103fbe:	2200      	movs	r2, #0
 8103fc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103fc2:	68fb      	ldr	r3, [r7, #12]
 8103fc4:	6a3a      	ldr	r2, [r7, #32]
 8103fc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103fc8:	68fb      	ldr	r3, [r7, #12]
 8103fca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8103fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103fce:	68fb      	ldr	r3, [r7, #12]
 8103fd0:	2200      	movs	r2, #0
 8103fd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8103fd4:	88f8      	ldrh	r0, [r7, #6]
 8103fd6:	893a      	ldrh	r2, [r7, #8]
 8103fd8:	8979      	ldrh	r1, [r7, #10]
 8103fda:	697b      	ldr	r3, [r7, #20]
 8103fdc:	9301      	str	r3, [sp, #4]
 8103fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103fe0:	9300      	str	r3, [sp, #0]
 8103fe2:	4603      	mov	r3, r0
 8103fe4:	68f8      	ldr	r0, [r7, #12]
 8103fe6:	f000 f913 	bl	8104210 <I2C_RequestMemoryRead>
 8103fea:	4603      	mov	r3, r0
 8103fec:	2b00      	cmp	r3, #0
 8103fee:	d005      	beq.n	8103ffc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103ff0:	68fb      	ldr	r3, [r7, #12]
 8103ff2:	2200      	movs	r2, #0
 8103ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8103ff8:	2301      	movs	r3, #1
 8103ffa:	e0ad      	b.n	8104158 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103ffc:	68fb      	ldr	r3, [r7, #12]
 8103ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104000:	b29b      	uxth	r3, r3
 8104002:	2bff      	cmp	r3, #255	; 0xff
 8104004:	d90e      	bls.n	8104024 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104006:	68fb      	ldr	r3, [r7, #12]
 8104008:	22ff      	movs	r2, #255	; 0xff
 810400a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810400c:	68fb      	ldr	r3, [r7, #12]
 810400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104010:	b2da      	uxtb	r2, r3
 8104012:	8979      	ldrh	r1, [r7, #10]
 8104014:	4b52      	ldr	r3, [pc, #328]	; (8104160 <HAL_I2C_Mem_Read+0x22c>)
 8104016:	9300      	str	r3, [sp, #0]
 8104018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810401c:	68f8      	ldr	r0, [r7, #12]
 810401e:	f000 fb33 	bl	8104688 <I2C_TransferConfig>
 8104022:	e00f      	b.n	8104044 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104024:	68fb      	ldr	r3, [r7, #12]
 8104026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104028:	b29a      	uxth	r2, r3
 810402a:	68fb      	ldr	r3, [r7, #12]
 810402c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810402e:	68fb      	ldr	r3, [r7, #12]
 8104030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104032:	b2da      	uxtb	r2, r3
 8104034:	8979      	ldrh	r1, [r7, #10]
 8104036:	4b4a      	ldr	r3, [pc, #296]	; (8104160 <HAL_I2C_Mem_Read+0x22c>)
 8104038:	9300      	str	r3, [sp, #0]
 810403a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810403e:	68f8      	ldr	r0, [r7, #12]
 8104040:	f000 fb22 	bl	8104688 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8104044:	697b      	ldr	r3, [r7, #20]
 8104046:	9300      	str	r3, [sp, #0]
 8104048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810404a:	2200      	movs	r2, #0
 810404c:	2104      	movs	r1, #4
 810404e:	68f8      	ldr	r0, [r7, #12]
 8104050:	f000 f956 	bl	8104300 <I2C_WaitOnFlagUntilTimeout>
 8104054:	4603      	mov	r3, r0
 8104056:	2b00      	cmp	r3, #0
 8104058:	d001      	beq.n	810405e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 810405a:	2301      	movs	r3, #1
 810405c:	e07c      	b.n	8104158 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810405e:	68fb      	ldr	r3, [r7, #12]
 8104060:	681b      	ldr	r3, [r3, #0]
 8104062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104064:	68fb      	ldr	r3, [r7, #12]
 8104066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104068:	b2d2      	uxtb	r2, r2
 810406a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810406c:	68fb      	ldr	r3, [r7, #12]
 810406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104070:	1c5a      	adds	r2, r3, #1
 8104072:	68fb      	ldr	r3, [r7, #12]
 8104074:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8104076:	68fb      	ldr	r3, [r7, #12]
 8104078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810407a:	3b01      	subs	r3, #1
 810407c:	b29a      	uxth	r2, r3
 810407e:	68fb      	ldr	r3, [r7, #12]
 8104080:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104082:	68fb      	ldr	r3, [r7, #12]
 8104084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104086:	b29b      	uxth	r3, r3
 8104088:	3b01      	subs	r3, #1
 810408a:	b29a      	uxth	r2, r3
 810408c:	68fb      	ldr	r3, [r7, #12]
 810408e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104090:	68fb      	ldr	r3, [r7, #12]
 8104092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104094:	b29b      	uxth	r3, r3
 8104096:	2b00      	cmp	r3, #0
 8104098:	d034      	beq.n	8104104 <HAL_I2C_Mem_Read+0x1d0>
 810409a:	68fb      	ldr	r3, [r7, #12]
 810409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810409e:	2b00      	cmp	r3, #0
 81040a0:	d130      	bne.n	8104104 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81040a2:	697b      	ldr	r3, [r7, #20]
 81040a4:	9300      	str	r3, [sp, #0]
 81040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040a8:	2200      	movs	r2, #0
 81040aa:	2180      	movs	r1, #128	; 0x80
 81040ac:	68f8      	ldr	r0, [r7, #12]
 81040ae:	f000 f927 	bl	8104300 <I2C_WaitOnFlagUntilTimeout>
 81040b2:	4603      	mov	r3, r0
 81040b4:	2b00      	cmp	r3, #0
 81040b6:	d001      	beq.n	81040bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 81040b8:	2301      	movs	r3, #1
 81040ba:	e04d      	b.n	8104158 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81040bc:	68fb      	ldr	r3, [r7, #12]
 81040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81040c0:	b29b      	uxth	r3, r3
 81040c2:	2bff      	cmp	r3, #255	; 0xff
 81040c4:	d90e      	bls.n	81040e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81040c6:	68fb      	ldr	r3, [r7, #12]
 81040c8:	22ff      	movs	r2, #255	; 0xff
 81040ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 81040cc:	68fb      	ldr	r3, [r7, #12]
 81040ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81040d0:	b2da      	uxtb	r2, r3
 81040d2:	8979      	ldrh	r1, [r7, #10]
 81040d4:	2300      	movs	r3, #0
 81040d6:	9300      	str	r3, [sp, #0]
 81040d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81040dc:	68f8      	ldr	r0, [r7, #12]
 81040de:	f000 fad3 	bl	8104688 <I2C_TransferConfig>
 81040e2:	e00f      	b.n	8104104 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81040e4:	68fb      	ldr	r3, [r7, #12]
 81040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81040e8:	b29a      	uxth	r2, r3
 81040ea:	68fb      	ldr	r3, [r7, #12]
 81040ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81040ee:	68fb      	ldr	r3, [r7, #12]
 81040f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81040f2:	b2da      	uxtb	r2, r3
 81040f4:	8979      	ldrh	r1, [r7, #10]
 81040f6:	2300      	movs	r3, #0
 81040f8:	9300      	str	r3, [sp, #0]
 81040fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81040fe:	68f8      	ldr	r0, [r7, #12]
 8104100:	f000 fac2 	bl	8104688 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8104104:	68fb      	ldr	r3, [r7, #12]
 8104106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104108:	b29b      	uxth	r3, r3
 810410a:	2b00      	cmp	r3, #0
 810410c:	d19a      	bne.n	8104044 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810410e:	697a      	ldr	r2, [r7, #20]
 8104110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104112:	68f8      	ldr	r0, [r7, #12]
 8104114:	f000 f994 	bl	8104440 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104118:	4603      	mov	r3, r0
 810411a:	2b00      	cmp	r3, #0
 810411c:	d001      	beq.n	8104122 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810411e:	2301      	movs	r3, #1
 8104120:	e01a      	b.n	8104158 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104122:	68fb      	ldr	r3, [r7, #12]
 8104124:	681b      	ldr	r3, [r3, #0]
 8104126:	2220      	movs	r2, #32
 8104128:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810412a:	68fb      	ldr	r3, [r7, #12]
 810412c:	681b      	ldr	r3, [r3, #0]
 810412e:	6859      	ldr	r1, [r3, #4]
 8104130:	68fb      	ldr	r3, [r7, #12]
 8104132:	681a      	ldr	r2, [r3, #0]
 8104134:	4b0b      	ldr	r3, [pc, #44]	; (8104164 <HAL_I2C_Mem_Read+0x230>)
 8104136:	400b      	ands	r3, r1
 8104138:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810413a:	68fb      	ldr	r3, [r7, #12]
 810413c:	2220      	movs	r2, #32
 810413e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104142:	68fb      	ldr	r3, [r7, #12]
 8104144:	2200      	movs	r2, #0
 8104146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810414a:	68fb      	ldr	r3, [r7, #12]
 810414c:	2200      	movs	r2, #0
 810414e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104152:	2300      	movs	r3, #0
 8104154:	e000      	b.n	8104158 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8104156:	2302      	movs	r3, #2
  }
}
 8104158:	4618      	mov	r0, r3
 810415a:	3718      	adds	r7, #24
 810415c:	46bd      	mov	sp, r7
 810415e:	bd80      	pop	{r7, pc}
 8104160:	80002400 	.word	0x80002400
 8104164:	fe00e800 	.word	0xfe00e800

08104168 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8104168:	b580      	push	{r7, lr}
 810416a:	b086      	sub	sp, #24
 810416c:	af02      	add	r7, sp, #8
 810416e:	60f8      	str	r0, [r7, #12]
 8104170:	4608      	mov	r0, r1
 8104172:	4611      	mov	r1, r2
 8104174:	461a      	mov	r2, r3
 8104176:	4603      	mov	r3, r0
 8104178:	817b      	strh	r3, [r7, #10]
 810417a:	460b      	mov	r3, r1
 810417c:	813b      	strh	r3, [r7, #8]
 810417e:	4613      	mov	r3, r2
 8104180:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8104182:	88fb      	ldrh	r3, [r7, #6]
 8104184:	b2da      	uxtb	r2, r3
 8104186:	8979      	ldrh	r1, [r7, #10]
 8104188:	4b20      	ldr	r3, [pc, #128]	; (810420c <I2C_RequestMemoryWrite+0xa4>)
 810418a:	9300      	str	r3, [sp, #0]
 810418c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104190:	68f8      	ldr	r0, [r7, #12]
 8104192:	f000 fa79 	bl	8104688 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104196:	69fa      	ldr	r2, [r7, #28]
 8104198:	69b9      	ldr	r1, [r7, #24]
 810419a:	68f8      	ldr	r0, [r7, #12]
 810419c:	f000 f909 	bl	81043b2 <I2C_WaitOnTXISFlagUntilTimeout>
 81041a0:	4603      	mov	r3, r0
 81041a2:	2b00      	cmp	r3, #0
 81041a4:	d001      	beq.n	81041aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81041a6:	2301      	movs	r3, #1
 81041a8:	e02c      	b.n	8104204 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81041aa:	88fb      	ldrh	r3, [r7, #6]
 81041ac:	2b01      	cmp	r3, #1
 81041ae:	d105      	bne.n	81041bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81041b0:	893b      	ldrh	r3, [r7, #8]
 81041b2:	b2da      	uxtb	r2, r3
 81041b4:	68fb      	ldr	r3, [r7, #12]
 81041b6:	681b      	ldr	r3, [r3, #0]
 81041b8:	629a      	str	r2, [r3, #40]	; 0x28
 81041ba:	e015      	b.n	81041e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81041bc:	893b      	ldrh	r3, [r7, #8]
 81041be:	0a1b      	lsrs	r3, r3, #8
 81041c0:	b29b      	uxth	r3, r3
 81041c2:	b2da      	uxtb	r2, r3
 81041c4:	68fb      	ldr	r3, [r7, #12]
 81041c6:	681b      	ldr	r3, [r3, #0]
 81041c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81041ca:	69fa      	ldr	r2, [r7, #28]
 81041cc:	69b9      	ldr	r1, [r7, #24]
 81041ce:	68f8      	ldr	r0, [r7, #12]
 81041d0:	f000 f8ef 	bl	81043b2 <I2C_WaitOnTXISFlagUntilTimeout>
 81041d4:	4603      	mov	r3, r0
 81041d6:	2b00      	cmp	r3, #0
 81041d8:	d001      	beq.n	81041de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 81041da:	2301      	movs	r3, #1
 81041dc:	e012      	b.n	8104204 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81041de:	893b      	ldrh	r3, [r7, #8]
 81041e0:	b2da      	uxtb	r2, r3
 81041e2:	68fb      	ldr	r3, [r7, #12]
 81041e4:	681b      	ldr	r3, [r3, #0]
 81041e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81041e8:	69fb      	ldr	r3, [r7, #28]
 81041ea:	9300      	str	r3, [sp, #0]
 81041ec:	69bb      	ldr	r3, [r7, #24]
 81041ee:	2200      	movs	r2, #0
 81041f0:	2180      	movs	r1, #128	; 0x80
 81041f2:	68f8      	ldr	r0, [r7, #12]
 81041f4:	f000 f884 	bl	8104300 <I2C_WaitOnFlagUntilTimeout>
 81041f8:	4603      	mov	r3, r0
 81041fa:	2b00      	cmp	r3, #0
 81041fc:	d001      	beq.n	8104202 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81041fe:	2301      	movs	r3, #1
 8104200:	e000      	b.n	8104204 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8104202:	2300      	movs	r3, #0
}
 8104204:	4618      	mov	r0, r3
 8104206:	3710      	adds	r7, #16
 8104208:	46bd      	mov	sp, r7
 810420a:	bd80      	pop	{r7, pc}
 810420c:	80002000 	.word	0x80002000

08104210 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8104210:	b580      	push	{r7, lr}
 8104212:	b086      	sub	sp, #24
 8104214:	af02      	add	r7, sp, #8
 8104216:	60f8      	str	r0, [r7, #12]
 8104218:	4608      	mov	r0, r1
 810421a:	4611      	mov	r1, r2
 810421c:	461a      	mov	r2, r3
 810421e:	4603      	mov	r3, r0
 8104220:	817b      	strh	r3, [r7, #10]
 8104222:	460b      	mov	r3, r1
 8104224:	813b      	strh	r3, [r7, #8]
 8104226:	4613      	mov	r3, r2
 8104228:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810422a:	88fb      	ldrh	r3, [r7, #6]
 810422c:	b2da      	uxtb	r2, r3
 810422e:	8979      	ldrh	r1, [r7, #10]
 8104230:	4b20      	ldr	r3, [pc, #128]	; (81042b4 <I2C_RequestMemoryRead+0xa4>)
 8104232:	9300      	str	r3, [sp, #0]
 8104234:	2300      	movs	r3, #0
 8104236:	68f8      	ldr	r0, [r7, #12]
 8104238:	f000 fa26 	bl	8104688 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810423c:	69fa      	ldr	r2, [r7, #28]
 810423e:	69b9      	ldr	r1, [r7, #24]
 8104240:	68f8      	ldr	r0, [r7, #12]
 8104242:	f000 f8b6 	bl	81043b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8104246:	4603      	mov	r3, r0
 8104248:	2b00      	cmp	r3, #0
 810424a:	d001      	beq.n	8104250 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810424c:	2301      	movs	r3, #1
 810424e:	e02c      	b.n	81042aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104250:	88fb      	ldrh	r3, [r7, #6]
 8104252:	2b01      	cmp	r3, #1
 8104254:	d105      	bne.n	8104262 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104256:	893b      	ldrh	r3, [r7, #8]
 8104258:	b2da      	uxtb	r2, r3
 810425a:	68fb      	ldr	r3, [r7, #12]
 810425c:	681b      	ldr	r3, [r3, #0]
 810425e:	629a      	str	r2, [r3, #40]	; 0x28
 8104260:	e015      	b.n	810428e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104262:	893b      	ldrh	r3, [r7, #8]
 8104264:	0a1b      	lsrs	r3, r3, #8
 8104266:	b29b      	uxth	r3, r3
 8104268:	b2da      	uxtb	r2, r3
 810426a:	68fb      	ldr	r3, [r7, #12]
 810426c:	681b      	ldr	r3, [r3, #0]
 810426e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104270:	69fa      	ldr	r2, [r7, #28]
 8104272:	69b9      	ldr	r1, [r7, #24]
 8104274:	68f8      	ldr	r0, [r7, #12]
 8104276:	f000 f89c 	bl	81043b2 <I2C_WaitOnTXISFlagUntilTimeout>
 810427a:	4603      	mov	r3, r0
 810427c:	2b00      	cmp	r3, #0
 810427e:	d001      	beq.n	8104284 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8104280:	2301      	movs	r3, #1
 8104282:	e012      	b.n	81042aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104284:	893b      	ldrh	r3, [r7, #8]
 8104286:	b2da      	uxtb	r2, r3
 8104288:	68fb      	ldr	r3, [r7, #12]
 810428a:	681b      	ldr	r3, [r3, #0]
 810428c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810428e:	69fb      	ldr	r3, [r7, #28]
 8104290:	9300      	str	r3, [sp, #0]
 8104292:	69bb      	ldr	r3, [r7, #24]
 8104294:	2200      	movs	r2, #0
 8104296:	2140      	movs	r1, #64	; 0x40
 8104298:	68f8      	ldr	r0, [r7, #12]
 810429a:	f000 f831 	bl	8104300 <I2C_WaitOnFlagUntilTimeout>
 810429e:	4603      	mov	r3, r0
 81042a0:	2b00      	cmp	r3, #0
 81042a2:	d001      	beq.n	81042a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81042a4:	2301      	movs	r3, #1
 81042a6:	e000      	b.n	81042aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81042a8:	2300      	movs	r3, #0
}
 81042aa:	4618      	mov	r0, r3
 81042ac:	3710      	adds	r7, #16
 81042ae:	46bd      	mov	sp, r7
 81042b0:	bd80      	pop	{r7, pc}
 81042b2:	bf00      	nop
 81042b4:	80002000 	.word	0x80002000

081042b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81042b8:	b480      	push	{r7}
 81042ba:	b083      	sub	sp, #12
 81042bc:	af00      	add	r7, sp, #0
 81042be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81042c0:	687b      	ldr	r3, [r7, #4]
 81042c2:	681b      	ldr	r3, [r3, #0]
 81042c4:	699b      	ldr	r3, [r3, #24]
 81042c6:	f003 0302 	and.w	r3, r3, #2
 81042ca:	2b02      	cmp	r3, #2
 81042cc:	d103      	bne.n	81042d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	2200      	movs	r2, #0
 81042d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	681b      	ldr	r3, [r3, #0]
 81042da:	699b      	ldr	r3, [r3, #24]
 81042dc:	f003 0301 	and.w	r3, r3, #1
 81042e0:	2b01      	cmp	r3, #1
 81042e2:	d007      	beq.n	81042f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81042e4:	687b      	ldr	r3, [r7, #4]
 81042e6:	681b      	ldr	r3, [r3, #0]
 81042e8:	699a      	ldr	r2, [r3, #24]
 81042ea:	687b      	ldr	r3, [r7, #4]
 81042ec:	681b      	ldr	r3, [r3, #0]
 81042ee:	f042 0201 	orr.w	r2, r2, #1
 81042f2:	619a      	str	r2, [r3, #24]
  }
}
 81042f4:	bf00      	nop
 81042f6:	370c      	adds	r7, #12
 81042f8:	46bd      	mov	sp, r7
 81042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042fe:	4770      	bx	lr

08104300 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8104300:	b580      	push	{r7, lr}
 8104302:	b084      	sub	sp, #16
 8104304:	af00      	add	r7, sp, #0
 8104306:	60f8      	str	r0, [r7, #12]
 8104308:	60b9      	str	r1, [r7, #8]
 810430a:	603b      	str	r3, [r7, #0]
 810430c:	4613      	mov	r3, r2
 810430e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104310:	e03b      	b.n	810438a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8104312:	69ba      	ldr	r2, [r7, #24]
 8104314:	6839      	ldr	r1, [r7, #0]
 8104316:	68f8      	ldr	r0, [r7, #12]
 8104318:	f000 f8d6 	bl	81044c8 <I2C_IsErrorOccurred>
 810431c:	4603      	mov	r3, r0
 810431e:	2b00      	cmp	r3, #0
 8104320:	d001      	beq.n	8104326 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8104322:	2301      	movs	r3, #1
 8104324:	e041      	b.n	81043aa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104326:	683b      	ldr	r3, [r7, #0]
 8104328:	f1b3 3fff 	cmp.w	r3, #4294967295
 810432c:	d02d      	beq.n	810438a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810432e:	f7ff f921 	bl	8103574 <HAL_GetTick>
 8104332:	4602      	mov	r2, r0
 8104334:	69bb      	ldr	r3, [r7, #24]
 8104336:	1ad3      	subs	r3, r2, r3
 8104338:	683a      	ldr	r2, [r7, #0]
 810433a:	429a      	cmp	r2, r3
 810433c:	d302      	bcc.n	8104344 <I2C_WaitOnFlagUntilTimeout+0x44>
 810433e:	683b      	ldr	r3, [r7, #0]
 8104340:	2b00      	cmp	r3, #0
 8104342:	d122      	bne.n	810438a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8104344:	68fb      	ldr	r3, [r7, #12]
 8104346:	681b      	ldr	r3, [r3, #0]
 8104348:	699a      	ldr	r2, [r3, #24]
 810434a:	68bb      	ldr	r3, [r7, #8]
 810434c:	4013      	ands	r3, r2
 810434e:	68ba      	ldr	r2, [r7, #8]
 8104350:	429a      	cmp	r2, r3
 8104352:	bf0c      	ite	eq
 8104354:	2301      	moveq	r3, #1
 8104356:	2300      	movne	r3, #0
 8104358:	b2db      	uxtb	r3, r3
 810435a:	461a      	mov	r2, r3
 810435c:	79fb      	ldrb	r3, [r7, #7]
 810435e:	429a      	cmp	r2, r3
 8104360:	d113      	bne.n	810438a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104362:	68fb      	ldr	r3, [r7, #12]
 8104364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104366:	f043 0220 	orr.w	r2, r3, #32
 810436a:	68fb      	ldr	r3, [r7, #12]
 810436c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810436e:	68fb      	ldr	r3, [r7, #12]
 8104370:	2220      	movs	r2, #32
 8104372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8104376:	68fb      	ldr	r3, [r7, #12]
 8104378:	2200      	movs	r2, #0
 810437a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810437e:	68fb      	ldr	r3, [r7, #12]
 8104380:	2200      	movs	r2, #0
 8104382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8104386:	2301      	movs	r3, #1
 8104388:	e00f      	b.n	81043aa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810438a:	68fb      	ldr	r3, [r7, #12]
 810438c:	681b      	ldr	r3, [r3, #0]
 810438e:	699a      	ldr	r2, [r3, #24]
 8104390:	68bb      	ldr	r3, [r7, #8]
 8104392:	4013      	ands	r3, r2
 8104394:	68ba      	ldr	r2, [r7, #8]
 8104396:	429a      	cmp	r2, r3
 8104398:	bf0c      	ite	eq
 810439a:	2301      	moveq	r3, #1
 810439c:	2300      	movne	r3, #0
 810439e:	b2db      	uxtb	r3, r3
 81043a0:	461a      	mov	r2, r3
 81043a2:	79fb      	ldrb	r3, [r7, #7]
 81043a4:	429a      	cmp	r2, r3
 81043a6:	d0b4      	beq.n	8104312 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81043a8:	2300      	movs	r3, #0
}
 81043aa:	4618      	mov	r0, r3
 81043ac:	3710      	adds	r7, #16
 81043ae:	46bd      	mov	sp, r7
 81043b0:	bd80      	pop	{r7, pc}

081043b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81043b2:	b580      	push	{r7, lr}
 81043b4:	b084      	sub	sp, #16
 81043b6:	af00      	add	r7, sp, #0
 81043b8:	60f8      	str	r0, [r7, #12]
 81043ba:	60b9      	str	r1, [r7, #8]
 81043bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81043be:	e033      	b.n	8104428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81043c0:	687a      	ldr	r2, [r7, #4]
 81043c2:	68b9      	ldr	r1, [r7, #8]
 81043c4:	68f8      	ldr	r0, [r7, #12]
 81043c6:	f000 f87f 	bl	81044c8 <I2C_IsErrorOccurred>
 81043ca:	4603      	mov	r3, r0
 81043cc:	2b00      	cmp	r3, #0
 81043ce:	d001      	beq.n	81043d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81043d0:	2301      	movs	r3, #1
 81043d2:	e031      	b.n	8104438 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81043d4:	68bb      	ldr	r3, [r7, #8]
 81043d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81043da:	d025      	beq.n	8104428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81043dc:	f7ff f8ca 	bl	8103574 <HAL_GetTick>
 81043e0:	4602      	mov	r2, r0
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	1ad3      	subs	r3, r2, r3
 81043e6:	68ba      	ldr	r2, [r7, #8]
 81043e8:	429a      	cmp	r2, r3
 81043ea:	d302      	bcc.n	81043f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81043ec:	68bb      	ldr	r3, [r7, #8]
 81043ee:	2b00      	cmp	r3, #0
 81043f0:	d11a      	bne.n	8104428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 81043f2:	68fb      	ldr	r3, [r7, #12]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	699b      	ldr	r3, [r3, #24]
 81043f8:	f003 0302 	and.w	r3, r3, #2
 81043fc:	2b02      	cmp	r3, #2
 81043fe:	d013      	beq.n	8104428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104400:	68fb      	ldr	r3, [r7, #12]
 8104402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104404:	f043 0220 	orr.w	r2, r3, #32
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810440c:	68fb      	ldr	r3, [r7, #12]
 810440e:	2220      	movs	r2, #32
 8104410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8104414:	68fb      	ldr	r3, [r7, #12]
 8104416:	2200      	movs	r2, #0
 8104418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810441c:	68fb      	ldr	r3, [r7, #12]
 810441e:	2200      	movs	r2, #0
 8104420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8104424:	2301      	movs	r3, #1
 8104426:	e007      	b.n	8104438 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104428:	68fb      	ldr	r3, [r7, #12]
 810442a:	681b      	ldr	r3, [r3, #0]
 810442c:	699b      	ldr	r3, [r3, #24]
 810442e:	f003 0302 	and.w	r3, r3, #2
 8104432:	2b02      	cmp	r3, #2
 8104434:	d1c4      	bne.n	81043c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8104436:	2300      	movs	r3, #0
}
 8104438:	4618      	mov	r0, r3
 810443a:	3710      	adds	r7, #16
 810443c:	46bd      	mov	sp, r7
 810443e:	bd80      	pop	{r7, pc}

08104440 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8104440:	b580      	push	{r7, lr}
 8104442:	b084      	sub	sp, #16
 8104444:	af00      	add	r7, sp, #0
 8104446:	60f8      	str	r0, [r7, #12]
 8104448:	60b9      	str	r1, [r7, #8]
 810444a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810444c:	e02f      	b.n	81044ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810444e:	687a      	ldr	r2, [r7, #4]
 8104450:	68b9      	ldr	r1, [r7, #8]
 8104452:	68f8      	ldr	r0, [r7, #12]
 8104454:	f000 f838 	bl	81044c8 <I2C_IsErrorOccurred>
 8104458:	4603      	mov	r3, r0
 810445a:	2b00      	cmp	r3, #0
 810445c:	d001      	beq.n	8104462 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810445e:	2301      	movs	r3, #1
 8104460:	e02d      	b.n	81044be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104462:	f7ff f887 	bl	8103574 <HAL_GetTick>
 8104466:	4602      	mov	r2, r0
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	1ad3      	subs	r3, r2, r3
 810446c:	68ba      	ldr	r2, [r7, #8]
 810446e:	429a      	cmp	r2, r3
 8104470:	d302      	bcc.n	8104478 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8104472:	68bb      	ldr	r3, [r7, #8]
 8104474:	2b00      	cmp	r3, #0
 8104476:	d11a      	bne.n	81044ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8104478:	68fb      	ldr	r3, [r7, #12]
 810447a:	681b      	ldr	r3, [r3, #0]
 810447c:	699b      	ldr	r3, [r3, #24]
 810447e:	f003 0320 	and.w	r3, r3, #32
 8104482:	2b20      	cmp	r3, #32
 8104484:	d013      	beq.n	81044ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104486:	68fb      	ldr	r3, [r7, #12]
 8104488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810448a:	f043 0220 	orr.w	r2, r3, #32
 810448e:	68fb      	ldr	r3, [r7, #12]
 8104490:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104492:	68fb      	ldr	r3, [r7, #12]
 8104494:	2220      	movs	r2, #32
 8104496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810449a:	68fb      	ldr	r3, [r7, #12]
 810449c:	2200      	movs	r2, #0
 810449e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81044a2:	68fb      	ldr	r3, [r7, #12]
 81044a4:	2200      	movs	r2, #0
 81044a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81044aa:	2301      	movs	r3, #1
 81044ac:	e007      	b.n	81044be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81044ae:	68fb      	ldr	r3, [r7, #12]
 81044b0:	681b      	ldr	r3, [r3, #0]
 81044b2:	699b      	ldr	r3, [r3, #24]
 81044b4:	f003 0320 	and.w	r3, r3, #32
 81044b8:	2b20      	cmp	r3, #32
 81044ba:	d1c8      	bne.n	810444e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81044bc:	2300      	movs	r3, #0
}
 81044be:	4618      	mov	r0, r3
 81044c0:	3710      	adds	r7, #16
 81044c2:	46bd      	mov	sp, r7
 81044c4:	bd80      	pop	{r7, pc}
	...

081044c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81044c8:	b580      	push	{r7, lr}
 81044ca:	b08a      	sub	sp, #40	; 0x28
 81044cc:	af00      	add	r7, sp, #0
 81044ce:	60f8      	str	r0, [r7, #12]
 81044d0:	60b9      	str	r1, [r7, #8]
 81044d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81044d4:	2300      	movs	r3, #0
 81044d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81044da:	68fb      	ldr	r3, [r7, #12]
 81044dc:	681b      	ldr	r3, [r3, #0]
 81044de:	699b      	ldr	r3, [r3, #24]
 81044e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81044e2:	2300      	movs	r3, #0
 81044e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81044e6:	687b      	ldr	r3, [r7, #4]
 81044e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81044ea:	69bb      	ldr	r3, [r7, #24]
 81044ec:	f003 0310 	and.w	r3, r3, #16
 81044f0:	2b00      	cmp	r3, #0
 81044f2:	d068      	beq.n	81045c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81044f4:	68fb      	ldr	r3, [r7, #12]
 81044f6:	681b      	ldr	r3, [r3, #0]
 81044f8:	2210      	movs	r2, #16
 81044fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81044fc:	e049      	b.n	8104592 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81044fe:	68bb      	ldr	r3, [r7, #8]
 8104500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104504:	d045      	beq.n	8104592 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8104506:	f7ff f835 	bl	8103574 <HAL_GetTick>
 810450a:	4602      	mov	r2, r0
 810450c:	69fb      	ldr	r3, [r7, #28]
 810450e:	1ad3      	subs	r3, r2, r3
 8104510:	68ba      	ldr	r2, [r7, #8]
 8104512:	429a      	cmp	r2, r3
 8104514:	d302      	bcc.n	810451c <I2C_IsErrorOccurred+0x54>
 8104516:	68bb      	ldr	r3, [r7, #8]
 8104518:	2b00      	cmp	r3, #0
 810451a:	d13a      	bne.n	8104592 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810451c:	68fb      	ldr	r3, [r7, #12]
 810451e:	681b      	ldr	r3, [r3, #0]
 8104520:	685b      	ldr	r3, [r3, #4]
 8104522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8104526:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8104528:	68fb      	ldr	r3, [r7, #12]
 810452a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810452e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8104530:	68fb      	ldr	r3, [r7, #12]
 8104532:	681b      	ldr	r3, [r3, #0]
 8104534:	699b      	ldr	r3, [r3, #24]
 8104536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810453a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810453e:	d121      	bne.n	8104584 <I2C_IsErrorOccurred+0xbc>
 8104540:	697b      	ldr	r3, [r7, #20]
 8104542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104546:	d01d      	beq.n	8104584 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8104548:	7cfb      	ldrb	r3, [r7, #19]
 810454a:	2b20      	cmp	r3, #32
 810454c:	d01a      	beq.n	8104584 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810454e:	68fb      	ldr	r3, [r7, #12]
 8104550:	681b      	ldr	r3, [r3, #0]
 8104552:	685a      	ldr	r2, [r3, #4]
 8104554:	68fb      	ldr	r3, [r7, #12]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810455c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810455e:	f7ff f809 	bl	8103574 <HAL_GetTick>
 8104562:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104564:	e00e      	b.n	8104584 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8104566:	f7ff f805 	bl	8103574 <HAL_GetTick>
 810456a:	4602      	mov	r2, r0
 810456c:	69fb      	ldr	r3, [r7, #28]
 810456e:	1ad3      	subs	r3, r2, r3
 8104570:	2b19      	cmp	r3, #25
 8104572:	d907      	bls.n	8104584 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8104574:	6a3b      	ldr	r3, [r7, #32]
 8104576:	f043 0320 	orr.w	r3, r3, #32
 810457a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 810457c:	2301      	movs	r3, #1
 810457e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8104582:	e006      	b.n	8104592 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104584:	68fb      	ldr	r3, [r7, #12]
 8104586:	681b      	ldr	r3, [r3, #0]
 8104588:	699b      	ldr	r3, [r3, #24]
 810458a:	f003 0320 	and.w	r3, r3, #32
 810458e:	2b20      	cmp	r3, #32
 8104590:	d1e9      	bne.n	8104566 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8104592:	68fb      	ldr	r3, [r7, #12]
 8104594:	681b      	ldr	r3, [r3, #0]
 8104596:	699b      	ldr	r3, [r3, #24]
 8104598:	f003 0320 	and.w	r3, r3, #32
 810459c:	2b20      	cmp	r3, #32
 810459e:	d003      	beq.n	81045a8 <I2C_IsErrorOccurred+0xe0>
 81045a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81045a4:	2b00      	cmp	r3, #0
 81045a6:	d0aa      	beq.n	81044fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81045a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81045ac:	2b00      	cmp	r3, #0
 81045ae:	d103      	bne.n	81045b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81045b0:	68fb      	ldr	r3, [r7, #12]
 81045b2:	681b      	ldr	r3, [r3, #0]
 81045b4:	2220      	movs	r2, #32
 81045b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81045b8:	6a3b      	ldr	r3, [r7, #32]
 81045ba:	f043 0304 	orr.w	r3, r3, #4
 81045be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81045c0:	2301      	movs	r3, #1
 81045c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81045c6:	68fb      	ldr	r3, [r7, #12]
 81045c8:	681b      	ldr	r3, [r3, #0]
 81045ca:	699b      	ldr	r3, [r3, #24]
 81045cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81045ce:	69bb      	ldr	r3, [r7, #24]
 81045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81045d4:	2b00      	cmp	r3, #0
 81045d6:	d00b      	beq.n	81045f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81045d8:	6a3b      	ldr	r3, [r7, #32]
 81045da:	f043 0301 	orr.w	r3, r3, #1
 81045de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81045e0:	68fb      	ldr	r3, [r7, #12]
 81045e2:	681b      	ldr	r3, [r3, #0]
 81045e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 81045e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81045ea:	2301      	movs	r3, #1
 81045ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81045f0:	69bb      	ldr	r3, [r7, #24]
 81045f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81045f6:	2b00      	cmp	r3, #0
 81045f8:	d00b      	beq.n	8104612 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 81045fa:	6a3b      	ldr	r3, [r7, #32]
 81045fc:	f043 0308 	orr.w	r3, r3, #8
 8104600:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8104602:	68fb      	ldr	r3, [r7, #12]
 8104604:	681b      	ldr	r3, [r3, #0]
 8104606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810460a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810460c:	2301      	movs	r3, #1
 810460e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8104612:	69bb      	ldr	r3, [r7, #24]
 8104614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104618:	2b00      	cmp	r3, #0
 810461a:	d00b      	beq.n	8104634 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810461c:	6a3b      	ldr	r3, [r7, #32]
 810461e:	f043 0302 	orr.w	r3, r3, #2
 8104622:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8104624:	68fb      	ldr	r3, [r7, #12]
 8104626:	681b      	ldr	r3, [r3, #0]
 8104628:	f44f 7200 	mov.w	r2, #512	; 0x200
 810462c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810462e:	2301      	movs	r3, #1
 8104630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8104634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8104638:	2b00      	cmp	r3, #0
 810463a:	d01c      	beq.n	8104676 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810463c:	68f8      	ldr	r0, [r7, #12]
 810463e:	f7ff fe3b 	bl	81042b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104642:	68fb      	ldr	r3, [r7, #12]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	6859      	ldr	r1, [r3, #4]
 8104648:	68fb      	ldr	r3, [r7, #12]
 810464a:	681a      	ldr	r2, [r3, #0]
 810464c:	4b0d      	ldr	r3, [pc, #52]	; (8104684 <I2C_IsErrorOccurred+0x1bc>)
 810464e:	400b      	ands	r3, r1
 8104650:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8104652:	68fb      	ldr	r3, [r7, #12]
 8104654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8104656:	6a3b      	ldr	r3, [r7, #32]
 8104658:	431a      	orrs	r2, r3
 810465a:	68fb      	ldr	r3, [r7, #12]
 810465c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810465e:	68fb      	ldr	r3, [r7, #12]
 8104660:	2220      	movs	r2, #32
 8104662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8104666:	68fb      	ldr	r3, [r7, #12]
 8104668:	2200      	movs	r2, #0
 810466a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810466e:	68fb      	ldr	r3, [r7, #12]
 8104670:	2200      	movs	r2, #0
 8104672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8104676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 810467a:	4618      	mov	r0, r3
 810467c:	3728      	adds	r7, #40	; 0x28
 810467e:	46bd      	mov	sp, r7
 8104680:	bd80      	pop	{r7, pc}
 8104682:	bf00      	nop
 8104684:	fe00e800 	.word	0xfe00e800

08104688 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8104688:	b480      	push	{r7}
 810468a:	b087      	sub	sp, #28
 810468c:	af00      	add	r7, sp, #0
 810468e:	60f8      	str	r0, [r7, #12]
 8104690:	607b      	str	r3, [r7, #4]
 8104692:	460b      	mov	r3, r1
 8104694:	817b      	strh	r3, [r7, #10]
 8104696:	4613      	mov	r3, r2
 8104698:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810469a:	897b      	ldrh	r3, [r7, #10]
 810469c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81046a0:	7a7b      	ldrb	r3, [r7, #9]
 81046a2:	041b      	lsls	r3, r3, #16
 81046a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81046a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81046ae:	6a3b      	ldr	r3, [r7, #32]
 81046b0:	4313      	orrs	r3, r2
 81046b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81046b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81046b8:	68fb      	ldr	r3, [r7, #12]
 81046ba:	681b      	ldr	r3, [r3, #0]
 81046bc:	685a      	ldr	r2, [r3, #4]
 81046be:	6a3b      	ldr	r3, [r7, #32]
 81046c0:	0d5b      	lsrs	r3, r3, #21
 81046c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81046c6:	4b08      	ldr	r3, [pc, #32]	; (81046e8 <I2C_TransferConfig+0x60>)
 81046c8:	430b      	orrs	r3, r1
 81046ca:	43db      	mvns	r3, r3
 81046cc:	ea02 0103 	and.w	r1, r2, r3
 81046d0:	68fb      	ldr	r3, [r7, #12]
 81046d2:	681b      	ldr	r3, [r3, #0]
 81046d4:	697a      	ldr	r2, [r7, #20]
 81046d6:	430a      	orrs	r2, r1
 81046d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81046da:	bf00      	nop
 81046dc:	371c      	adds	r7, #28
 81046de:	46bd      	mov	sp, r7
 81046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046e4:	4770      	bx	lr
 81046e6:	bf00      	nop
 81046e8:	03ff63ff 	.word	0x03ff63ff

081046ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81046ec:	b480      	push	{r7}
 81046ee:	b083      	sub	sp, #12
 81046f0:	af00      	add	r7, sp, #0
 81046f2:	6078      	str	r0, [r7, #4]
 81046f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81046fc:	b2db      	uxtb	r3, r3
 81046fe:	2b20      	cmp	r3, #32
 8104700:	d138      	bne.n	8104774 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104702:	687b      	ldr	r3, [r7, #4]
 8104704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104708:	2b01      	cmp	r3, #1
 810470a:	d101      	bne.n	8104710 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810470c:	2302      	movs	r3, #2
 810470e:	e032      	b.n	8104776 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	2201      	movs	r2, #1
 8104714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	2224      	movs	r2, #36	; 0x24
 810471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104720:	687b      	ldr	r3, [r7, #4]
 8104722:	681b      	ldr	r3, [r3, #0]
 8104724:	681a      	ldr	r2, [r3, #0]
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	681b      	ldr	r3, [r3, #0]
 810472a:	f022 0201 	bic.w	r2, r2, #1
 810472e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8104730:	687b      	ldr	r3, [r7, #4]
 8104732:	681b      	ldr	r3, [r3, #0]
 8104734:	681a      	ldr	r2, [r3, #0]
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	681b      	ldr	r3, [r3, #0]
 810473a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810473e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8104740:	687b      	ldr	r3, [r7, #4]
 8104742:	681b      	ldr	r3, [r3, #0]
 8104744:	6819      	ldr	r1, [r3, #0]
 8104746:	687b      	ldr	r3, [r7, #4]
 8104748:	681b      	ldr	r3, [r3, #0]
 810474a:	683a      	ldr	r2, [r7, #0]
 810474c:	430a      	orrs	r2, r1
 810474e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	681b      	ldr	r3, [r3, #0]
 8104754:	681a      	ldr	r2, [r3, #0]
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	681b      	ldr	r3, [r3, #0]
 810475a:	f042 0201 	orr.w	r2, r2, #1
 810475e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104760:	687b      	ldr	r3, [r7, #4]
 8104762:	2220      	movs	r2, #32
 8104764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	2200      	movs	r2, #0
 810476c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104770:	2300      	movs	r3, #0
 8104772:	e000      	b.n	8104776 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8104774:	2302      	movs	r3, #2
  }
}
 8104776:	4618      	mov	r0, r3
 8104778:	370c      	adds	r7, #12
 810477a:	46bd      	mov	sp, r7
 810477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104780:	4770      	bx	lr

08104782 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8104782:	b480      	push	{r7}
 8104784:	b085      	sub	sp, #20
 8104786:	af00      	add	r7, sp, #0
 8104788:	6078      	str	r0, [r7, #4]
 810478a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104792:	b2db      	uxtb	r3, r3
 8104794:	2b20      	cmp	r3, #32
 8104796:	d139      	bne.n	810480c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810479e:	2b01      	cmp	r3, #1
 81047a0:	d101      	bne.n	81047a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81047a2:	2302      	movs	r3, #2
 81047a4:	e033      	b.n	810480e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81047a6:	687b      	ldr	r3, [r7, #4]
 81047a8:	2201      	movs	r2, #1
 81047aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	2224      	movs	r2, #36	; 0x24
 81047b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81047b6:	687b      	ldr	r3, [r7, #4]
 81047b8:	681b      	ldr	r3, [r3, #0]
 81047ba:	681a      	ldr	r2, [r3, #0]
 81047bc:	687b      	ldr	r3, [r7, #4]
 81047be:	681b      	ldr	r3, [r3, #0]
 81047c0:	f022 0201 	bic.w	r2, r2, #1
 81047c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81047c6:	687b      	ldr	r3, [r7, #4]
 81047c8:	681b      	ldr	r3, [r3, #0]
 81047ca:	681b      	ldr	r3, [r3, #0]
 81047cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81047ce:	68fb      	ldr	r3, [r7, #12]
 81047d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81047d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81047d6:	683b      	ldr	r3, [r7, #0]
 81047d8:	021b      	lsls	r3, r3, #8
 81047da:	68fa      	ldr	r2, [r7, #12]
 81047dc:	4313      	orrs	r3, r2
 81047de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81047e0:	687b      	ldr	r3, [r7, #4]
 81047e2:	681b      	ldr	r3, [r3, #0]
 81047e4:	68fa      	ldr	r2, [r7, #12]
 81047e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81047e8:	687b      	ldr	r3, [r7, #4]
 81047ea:	681b      	ldr	r3, [r3, #0]
 81047ec:	681a      	ldr	r2, [r3, #0]
 81047ee:	687b      	ldr	r3, [r7, #4]
 81047f0:	681b      	ldr	r3, [r3, #0]
 81047f2:	f042 0201 	orr.w	r2, r2, #1
 81047f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81047f8:	687b      	ldr	r3, [r7, #4]
 81047fa:	2220      	movs	r2, #32
 81047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	2200      	movs	r2, #0
 8104804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104808:	2300      	movs	r3, #0
 810480a:	e000      	b.n	810480e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810480c:	2302      	movs	r3, #2
  }
}
 810480e:	4618      	mov	r0, r3
 8104810:	3714      	adds	r7, #20
 8104812:	46bd      	mov	sp, r7
 8104814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104818:	4770      	bx	lr
	...

0810481c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810481c:	b580      	push	{r7, lr}
 810481e:	b084      	sub	sp, #16
 8104820:	af00      	add	r7, sp, #0
 8104822:	60f8      	str	r0, [r7, #12]
 8104824:	460b      	mov	r3, r1
 8104826:	607a      	str	r2, [r7, #4]
 8104828:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810482a:	4b37      	ldr	r3, [pc, #220]	; (8104908 <HAL_PWREx_EnterSTOPMode+0xec>)
 810482c:	681b      	ldr	r3, [r3, #0]
 810482e:	f023 0201 	bic.w	r2, r3, #1
 8104832:	4935      	ldr	r1, [pc, #212]	; (8104908 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104834:	68fb      	ldr	r3, [r7, #12]
 8104836:	4313      	orrs	r3, r2
 8104838:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	2b00      	cmp	r3, #0
 810483e:	d123      	bne.n	8104888 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104840:	f7fe ffd8 	bl	81037f4 <HAL_GetCurrentCPUID>
 8104844:	4603      	mov	r3, r0
 8104846:	2b03      	cmp	r3, #3
 8104848:	d158      	bne.n	81048fc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810484a:	4b2f      	ldr	r3, [pc, #188]	; (8104908 <HAL_PWREx_EnterSTOPMode+0xec>)
 810484c:	691b      	ldr	r3, [r3, #16]
 810484e:	4a2e      	ldr	r2, [pc, #184]	; (8104908 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104850:	f023 0301 	bic.w	r3, r3, #1
 8104854:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104856:	4b2d      	ldr	r3, [pc, #180]	; (810490c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104858:	691b      	ldr	r3, [r3, #16]
 810485a:	4a2c      	ldr	r2, [pc, #176]	; (810490c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810485c:	f043 0304 	orr.w	r3, r3, #4
 8104860:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8104862:	f3bf 8f4f 	dsb	sy
}
 8104866:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104868:	f3bf 8f6f 	isb	sy
}
 810486c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810486e:	7afb      	ldrb	r3, [r7, #11]
 8104870:	2b01      	cmp	r3, #1
 8104872:	d101      	bne.n	8104878 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104874:	bf30      	wfi
 8104876:	e000      	b.n	810487a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104878:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810487a:	4b24      	ldr	r3, [pc, #144]	; (810490c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810487c:	691b      	ldr	r3, [r3, #16]
 810487e:	4a23      	ldr	r2, [pc, #140]	; (810490c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104880:	f023 0304 	bic.w	r3, r3, #4
 8104884:	6113      	str	r3, [r2, #16]
 8104886:	e03c      	b.n	8104902 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	2b01      	cmp	r3, #1
 810488c:	d123      	bne.n	81048d6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810488e:	f7fe ffb1 	bl	81037f4 <HAL_GetCurrentCPUID>
 8104892:	4603      	mov	r3, r0
 8104894:	2b01      	cmp	r3, #1
 8104896:	d133      	bne.n	8104900 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104898:	4b1b      	ldr	r3, [pc, #108]	; (8104908 <HAL_PWREx_EnterSTOPMode+0xec>)
 810489a:	695b      	ldr	r3, [r3, #20]
 810489c:	4a1a      	ldr	r2, [pc, #104]	; (8104908 <HAL_PWREx_EnterSTOPMode+0xec>)
 810489e:	f023 0302 	bic.w	r3, r3, #2
 81048a2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81048a4:	4b19      	ldr	r3, [pc, #100]	; (810490c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81048a6:	691b      	ldr	r3, [r3, #16]
 81048a8:	4a18      	ldr	r2, [pc, #96]	; (810490c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81048aa:	f043 0304 	orr.w	r3, r3, #4
 81048ae:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81048b0:	f3bf 8f4f 	dsb	sy
}
 81048b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81048b6:	f3bf 8f6f 	isb	sy
}
 81048ba:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81048bc:	7afb      	ldrb	r3, [r7, #11]
 81048be:	2b01      	cmp	r3, #1
 81048c0:	d101      	bne.n	81048c6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81048c2:	bf30      	wfi
 81048c4:	e000      	b.n	81048c8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81048c6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81048c8:	4b10      	ldr	r3, [pc, #64]	; (810490c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81048ca:	691b      	ldr	r3, [r3, #16]
 81048cc:	4a0f      	ldr	r2, [pc, #60]	; (810490c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81048ce:	f023 0304 	bic.w	r3, r3, #4
 81048d2:	6113      	str	r3, [r2, #16]
 81048d4:	e015      	b.n	8104902 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81048d6:	f7fe ff8d 	bl	81037f4 <HAL_GetCurrentCPUID>
 81048da:	4603      	mov	r3, r0
 81048dc:	2b03      	cmp	r3, #3
 81048de:	d106      	bne.n	81048ee <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81048e0:	4b09      	ldr	r3, [pc, #36]	; (8104908 <HAL_PWREx_EnterSTOPMode+0xec>)
 81048e2:	691b      	ldr	r3, [r3, #16]
 81048e4:	4a08      	ldr	r2, [pc, #32]	; (8104908 <HAL_PWREx_EnterSTOPMode+0xec>)
 81048e6:	f023 0304 	bic.w	r3, r3, #4
 81048ea:	6113      	str	r3, [r2, #16]
 81048ec:	e009      	b.n	8104902 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81048ee:	4b06      	ldr	r3, [pc, #24]	; (8104908 <HAL_PWREx_EnterSTOPMode+0xec>)
 81048f0:	695b      	ldr	r3, [r3, #20]
 81048f2:	4a05      	ldr	r2, [pc, #20]	; (8104908 <HAL_PWREx_EnterSTOPMode+0xec>)
 81048f4:	f023 0304 	bic.w	r3, r3, #4
 81048f8:	6153      	str	r3, [r2, #20]
 81048fa:	e002      	b.n	8104902 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81048fc:	bf00      	nop
 81048fe:	e000      	b.n	8104902 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104900:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104902:	3710      	adds	r7, #16
 8104904:	46bd      	mov	sp, r7
 8104906:	bd80      	pop	{r7, pc}
 8104908:	58024800 	.word	0x58024800
 810490c:	e000ed00 	.word	0xe000ed00

08104910 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104910:	b580      	push	{r7, lr}
 8104912:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104914:	f7fe ff6e 	bl	81037f4 <HAL_GetCurrentCPUID>
 8104918:	4603      	mov	r3, r0
 810491a:	2b03      	cmp	r3, #3
 810491c:	d101      	bne.n	8104922 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810491e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104920:	e001      	b.n	8104926 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104922:	bf40      	sev
    __WFE ();
 8104924:	bf20      	wfe
}
 8104926:	bf00      	nop
 8104928:	bd80      	pop	{r7, pc}
	...

0810492c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810492c:	b480      	push	{r7}
 810492e:	b089      	sub	sp, #36	; 0x24
 8104930:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104932:	4bb3      	ldr	r3, [pc, #716]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104934:	691b      	ldr	r3, [r3, #16]
 8104936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810493a:	2b18      	cmp	r3, #24
 810493c:	f200 8155 	bhi.w	8104bea <HAL_RCC_GetSysClockFreq+0x2be>
 8104940:	a201      	add	r2, pc, #4	; (adr r2, 8104948 <HAL_RCC_GetSysClockFreq+0x1c>)
 8104942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104946:	bf00      	nop
 8104948:	081049ad 	.word	0x081049ad
 810494c:	08104beb 	.word	0x08104beb
 8104950:	08104beb 	.word	0x08104beb
 8104954:	08104beb 	.word	0x08104beb
 8104958:	08104beb 	.word	0x08104beb
 810495c:	08104beb 	.word	0x08104beb
 8104960:	08104beb 	.word	0x08104beb
 8104964:	08104beb 	.word	0x08104beb
 8104968:	081049d3 	.word	0x081049d3
 810496c:	08104beb 	.word	0x08104beb
 8104970:	08104beb 	.word	0x08104beb
 8104974:	08104beb 	.word	0x08104beb
 8104978:	08104beb 	.word	0x08104beb
 810497c:	08104beb 	.word	0x08104beb
 8104980:	08104beb 	.word	0x08104beb
 8104984:	08104beb 	.word	0x08104beb
 8104988:	081049d9 	.word	0x081049d9
 810498c:	08104beb 	.word	0x08104beb
 8104990:	08104beb 	.word	0x08104beb
 8104994:	08104beb 	.word	0x08104beb
 8104998:	08104beb 	.word	0x08104beb
 810499c:	08104beb 	.word	0x08104beb
 81049a0:	08104beb 	.word	0x08104beb
 81049a4:	08104beb 	.word	0x08104beb
 81049a8:	081049df 	.word	0x081049df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81049ac:	4b94      	ldr	r3, [pc, #592]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049ae:	681b      	ldr	r3, [r3, #0]
 81049b0:	f003 0320 	and.w	r3, r3, #32
 81049b4:	2b00      	cmp	r3, #0
 81049b6:	d009      	beq.n	81049cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81049b8:	4b91      	ldr	r3, [pc, #580]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049ba:	681b      	ldr	r3, [r3, #0]
 81049bc:	08db      	lsrs	r3, r3, #3
 81049be:	f003 0303 	and.w	r3, r3, #3
 81049c2:	4a90      	ldr	r2, [pc, #576]	; (8104c04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81049c4:	fa22 f303 	lsr.w	r3, r2, r3
 81049c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81049ca:	e111      	b.n	8104bf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81049cc:	4b8d      	ldr	r3, [pc, #564]	; (8104c04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81049ce:	61bb      	str	r3, [r7, #24]
      break;
 81049d0:	e10e      	b.n	8104bf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81049d2:	4b8d      	ldr	r3, [pc, #564]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81049d4:	61bb      	str	r3, [r7, #24]
      break;
 81049d6:	e10b      	b.n	8104bf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81049d8:	4b8c      	ldr	r3, [pc, #560]	; (8104c0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 81049da:	61bb      	str	r3, [r7, #24]
      break;
 81049dc:	e108      	b.n	8104bf0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81049de:	4b88      	ldr	r3, [pc, #544]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81049e2:	f003 0303 	and.w	r3, r3, #3
 81049e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81049e8:	4b85      	ldr	r3, [pc, #532]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81049ec:	091b      	lsrs	r3, r3, #4
 81049ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81049f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81049f4:	4b82      	ldr	r3, [pc, #520]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049f8:	f003 0301 	and.w	r3, r3, #1
 81049fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81049fe:	4b80      	ldr	r3, [pc, #512]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104a02:	08db      	lsrs	r3, r3, #3
 8104a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104a08:	68fa      	ldr	r2, [r7, #12]
 8104a0a:	fb02 f303 	mul.w	r3, r2, r3
 8104a0e:	ee07 3a90 	vmov	s15, r3
 8104a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8104a1a:	693b      	ldr	r3, [r7, #16]
 8104a1c:	2b00      	cmp	r3, #0
 8104a1e:	f000 80e1 	beq.w	8104be4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8104a22:	697b      	ldr	r3, [r7, #20]
 8104a24:	2b02      	cmp	r3, #2
 8104a26:	f000 8083 	beq.w	8104b30 <HAL_RCC_GetSysClockFreq+0x204>
 8104a2a:	697b      	ldr	r3, [r7, #20]
 8104a2c:	2b02      	cmp	r3, #2
 8104a2e:	f200 80a1 	bhi.w	8104b74 <HAL_RCC_GetSysClockFreq+0x248>
 8104a32:	697b      	ldr	r3, [r7, #20]
 8104a34:	2b00      	cmp	r3, #0
 8104a36:	d003      	beq.n	8104a40 <HAL_RCC_GetSysClockFreq+0x114>
 8104a38:	697b      	ldr	r3, [r7, #20]
 8104a3a:	2b01      	cmp	r3, #1
 8104a3c:	d056      	beq.n	8104aec <HAL_RCC_GetSysClockFreq+0x1c0>
 8104a3e:	e099      	b.n	8104b74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104a40:	4b6f      	ldr	r3, [pc, #444]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a42:	681b      	ldr	r3, [r3, #0]
 8104a44:	f003 0320 	and.w	r3, r3, #32
 8104a48:	2b00      	cmp	r3, #0
 8104a4a:	d02d      	beq.n	8104aa8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104a4c:	4b6c      	ldr	r3, [pc, #432]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a4e:	681b      	ldr	r3, [r3, #0]
 8104a50:	08db      	lsrs	r3, r3, #3
 8104a52:	f003 0303 	and.w	r3, r3, #3
 8104a56:	4a6b      	ldr	r2, [pc, #428]	; (8104c04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104a58:	fa22 f303 	lsr.w	r3, r2, r3
 8104a5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a5e:	687b      	ldr	r3, [r7, #4]
 8104a60:	ee07 3a90 	vmov	s15, r3
 8104a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a68:	693b      	ldr	r3, [r7, #16]
 8104a6a:	ee07 3a90 	vmov	s15, r3
 8104a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a76:	4b62      	ldr	r3, [pc, #392]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a7e:	ee07 3a90 	vmov	s15, r3
 8104a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8104a8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8104aa6:	e087      	b.n	8104bb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104aa8:	693b      	ldr	r3, [r7, #16]
 8104aaa:	ee07 3a90 	vmov	s15, r3
 8104aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ab2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104c14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8104ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104aba:	4b51      	ldr	r3, [pc, #324]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ac2:	ee07 3a90 	vmov	s15, r3
 8104ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8104ace:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104aea:	e065      	b.n	8104bb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104aec:	693b      	ldr	r3, [r7, #16]
 8104aee:	ee07 3a90 	vmov	s15, r3
 8104af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104af6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8104c18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104afe:	4b40      	ldr	r3, [pc, #256]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b06:	ee07 3a90 	vmov	s15, r3
 8104b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104b12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104b2e:	e043      	b.n	8104bb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104b30:	693b      	ldr	r3, [r7, #16]
 8104b32:	ee07 3a90 	vmov	s15, r3
 8104b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8104c1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8104b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b42:	4b2f      	ldr	r3, [pc, #188]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b4a:	ee07 3a90 	vmov	s15, r3
 8104b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8104b56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104b72:	e021      	b.n	8104bb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104b74:	693b      	ldr	r3, [r7, #16]
 8104b76:	ee07 3a90 	vmov	s15, r3
 8104b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8104c18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b86:	4b1e      	ldr	r3, [pc, #120]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b8e:	ee07 3a90 	vmov	s15, r3
 8104b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8104b9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104bb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8104bb8:	4b11      	ldr	r3, [pc, #68]	; (8104c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104bbc:	0a5b      	lsrs	r3, r3, #9
 8104bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104bc2:	3301      	adds	r3, #1
 8104bc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8104bc6:	683b      	ldr	r3, [r7, #0]
 8104bc8:	ee07 3a90 	vmov	s15, r3
 8104bcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104bd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8104bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104bdc:	ee17 3a90 	vmov	r3, s15
 8104be0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8104be2:	e005      	b.n	8104bf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8104be4:	2300      	movs	r3, #0
 8104be6:	61bb      	str	r3, [r7, #24]
      break;
 8104be8:	e002      	b.n	8104bf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8104bea:	4b07      	ldr	r3, [pc, #28]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104bec:	61bb      	str	r3, [r7, #24]
      break;
 8104bee:	bf00      	nop
  }

  return sysclockfreq;
 8104bf0:	69bb      	ldr	r3, [r7, #24]
}
 8104bf2:	4618      	mov	r0, r3
 8104bf4:	3724      	adds	r7, #36	; 0x24
 8104bf6:	46bd      	mov	sp, r7
 8104bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bfc:	4770      	bx	lr
 8104bfe:	bf00      	nop
 8104c00:	58024400 	.word	0x58024400
 8104c04:	03d09000 	.word	0x03d09000
 8104c08:	003d0900 	.word	0x003d0900
 8104c0c:	017d7840 	.word	0x017d7840
 8104c10:	46000000 	.word	0x46000000
 8104c14:	4c742400 	.word	0x4c742400
 8104c18:	4a742400 	.word	0x4a742400
 8104c1c:	4bbebc20 	.word	0x4bbebc20

08104c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104c20:	b580      	push	{r7, lr}
 8104c22:	b082      	sub	sp, #8
 8104c24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104c26:	f7ff fe81 	bl	810492c <HAL_RCC_GetSysClockFreq>
 8104c2a:	4602      	mov	r2, r0
 8104c2c:	4b11      	ldr	r3, [pc, #68]	; (8104c74 <HAL_RCC_GetHCLKFreq+0x54>)
 8104c2e:	699b      	ldr	r3, [r3, #24]
 8104c30:	0a1b      	lsrs	r3, r3, #8
 8104c32:	f003 030f 	and.w	r3, r3, #15
 8104c36:	4910      	ldr	r1, [pc, #64]	; (8104c78 <HAL_RCC_GetHCLKFreq+0x58>)
 8104c38:	5ccb      	ldrb	r3, [r1, r3]
 8104c3a:	f003 031f 	and.w	r3, r3, #31
 8104c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8104c42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104c44:	4b0b      	ldr	r3, [pc, #44]	; (8104c74 <HAL_RCC_GetHCLKFreq+0x54>)
 8104c46:	699b      	ldr	r3, [r3, #24]
 8104c48:	f003 030f 	and.w	r3, r3, #15
 8104c4c:	4a0a      	ldr	r2, [pc, #40]	; (8104c78 <HAL_RCC_GetHCLKFreq+0x58>)
 8104c4e:	5cd3      	ldrb	r3, [r2, r3]
 8104c50:	f003 031f 	and.w	r3, r3, #31
 8104c54:	687a      	ldr	r2, [r7, #4]
 8104c56:	fa22 f303 	lsr.w	r3, r2, r3
 8104c5a:	4a08      	ldr	r2, [pc, #32]	; (8104c7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8104c5c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104c5e:	4b07      	ldr	r3, [pc, #28]	; (8104c7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8104c60:	681b      	ldr	r3, [r3, #0]
 8104c62:	4a07      	ldr	r2, [pc, #28]	; (8104c80 <HAL_RCC_GetHCLKFreq+0x60>)
 8104c64:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104c66:	4b05      	ldr	r3, [pc, #20]	; (8104c7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8104c68:	681b      	ldr	r3, [r3, #0]
}
 8104c6a:	4618      	mov	r0, r3
 8104c6c:	3708      	adds	r7, #8
 8104c6e:	46bd      	mov	sp, r7
 8104c70:	bd80      	pop	{r7, pc}
 8104c72:	bf00      	nop
 8104c74:	58024400 	.word	0x58024400
 8104c78:	0810e830 	.word	0x0810e830
 8104c7c:	10000004 	.word	0x10000004
 8104c80:	10000000 	.word	0x10000000

08104c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104c84:	b580      	push	{r7, lr}
 8104c86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104c88:	f7ff ffca 	bl	8104c20 <HAL_RCC_GetHCLKFreq>
 8104c8c:	4602      	mov	r2, r0
 8104c8e:	4b06      	ldr	r3, [pc, #24]	; (8104ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104c90:	69db      	ldr	r3, [r3, #28]
 8104c92:	091b      	lsrs	r3, r3, #4
 8104c94:	f003 0307 	and.w	r3, r3, #7
 8104c98:	4904      	ldr	r1, [pc, #16]	; (8104cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8104c9a:	5ccb      	ldrb	r3, [r1, r3]
 8104c9c:	f003 031f 	and.w	r3, r3, #31
 8104ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104ca4:	4618      	mov	r0, r3
 8104ca6:	bd80      	pop	{r7, pc}
 8104ca8:	58024400 	.word	0x58024400
 8104cac:	0810e830 	.word	0x0810e830

08104cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104cb0:	b580      	push	{r7, lr}
 8104cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104cb4:	f7ff ffb4 	bl	8104c20 <HAL_RCC_GetHCLKFreq>
 8104cb8:	4602      	mov	r2, r0
 8104cba:	4b06      	ldr	r3, [pc, #24]	; (8104cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8104cbc:	69db      	ldr	r3, [r3, #28]
 8104cbe:	0a1b      	lsrs	r3, r3, #8
 8104cc0:	f003 0307 	and.w	r3, r3, #7
 8104cc4:	4904      	ldr	r1, [pc, #16]	; (8104cd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8104cc6:	5ccb      	ldrb	r3, [r1, r3]
 8104cc8:	f003 031f 	and.w	r3, r3, #31
 8104ccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104cd0:	4618      	mov	r0, r3
 8104cd2:	bd80      	pop	{r7, pc}
 8104cd4:	58024400 	.word	0x58024400
 8104cd8:	0810e830 	.word	0x0810e830

08104cdc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8104cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104ce0:	b0ca      	sub	sp, #296	; 0x128
 8104ce2:	af00      	add	r7, sp, #0
 8104ce4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104ce8:	2300      	movs	r3, #0
 8104cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104cee:	2300      	movs	r3, #0
 8104cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104cfc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8104d00:	2500      	movs	r5, #0
 8104d02:	ea54 0305 	orrs.w	r3, r4, r5
 8104d06:	d049      	beq.n	8104d9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8104d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104d0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104d12:	d02f      	beq.n	8104d74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8104d14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104d18:	d828      	bhi.n	8104d6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104d1e:	d01a      	beq.n	8104d56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8104d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104d24:	d822      	bhi.n	8104d6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104d26:	2b00      	cmp	r3, #0
 8104d28:	d003      	beq.n	8104d32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8104d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104d2e:	d007      	beq.n	8104d40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104d30:	e01c      	b.n	8104d6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d32:	4bb8      	ldr	r3, [pc, #736]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d36:	4ab7      	ldr	r2, [pc, #732]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104d3e:	e01a      	b.n	8104d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d44:	3308      	adds	r3, #8
 8104d46:	2102      	movs	r1, #2
 8104d48:	4618      	mov	r0, r3
 8104d4a:	f001 fc8f 	bl	810666c <RCCEx_PLL2_Config>
 8104d4e:	4603      	mov	r3, r0
 8104d50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104d54:	e00f      	b.n	8104d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d5a:	3328      	adds	r3, #40	; 0x28
 8104d5c:	2102      	movs	r1, #2
 8104d5e:	4618      	mov	r0, r3
 8104d60:	f001 fd36 	bl	81067d0 <RCCEx_PLL3_Config>
 8104d64:	4603      	mov	r3, r0
 8104d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104d6a:	e004      	b.n	8104d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104d6c:	2301      	movs	r3, #1
 8104d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104d72:	e000      	b.n	8104d76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8104d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104d7a:	2b00      	cmp	r3, #0
 8104d7c:	d10a      	bne.n	8104d94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104d7e:	4ba5      	ldr	r3, [pc, #660]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d82:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8104d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104d8c:	4aa1      	ldr	r2, [pc, #644]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104d8e:	430b      	orrs	r3, r1
 8104d90:	6513      	str	r3, [r2, #80]	; 0x50
 8104d92:	e003      	b.n	8104d9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104d98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104da4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8104da8:	f04f 0900 	mov.w	r9, #0
 8104dac:	ea58 0309 	orrs.w	r3, r8, r9
 8104db0:	d047      	beq.n	8104e42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8104db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104db8:	2b04      	cmp	r3, #4
 8104dba:	d82a      	bhi.n	8104e12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8104dbc:	a201      	add	r2, pc, #4	; (adr r2, 8104dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8104dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104dc2:	bf00      	nop
 8104dc4:	08104dd9 	.word	0x08104dd9
 8104dc8:	08104de7 	.word	0x08104de7
 8104dcc:	08104dfd 	.word	0x08104dfd
 8104dd0:	08104e1b 	.word	0x08104e1b
 8104dd4:	08104e1b 	.word	0x08104e1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104dd8:	4b8e      	ldr	r3, [pc, #568]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ddc:	4a8d      	ldr	r2, [pc, #564]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104de2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104de4:	e01a      	b.n	8104e1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104dea:	3308      	adds	r3, #8
 8104dec:	2100      	movs	r1, #0
 8104dee:	4618      	mov	r0, r3
 8104df0:	f001 fc3c 	bl	810666c <RCCEx_PLL2_Config>
 8104df4:	4603      	mov	r3, r0
 8104df6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104dfa:	e00f      	b.n	8104e1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e00:	3328      	adds	r3, #40	; 0x28
 8104e02:	2100      	movs	r1, #0
 8104e04:	4618      	mov	r0, r3
 8104e06:	f001 fce3 	bl	81067d0 <RCCEx_PLL3_Config>
 8104e0a:	4603      	mov	r3, r0
 8104e0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104e10:	e004      	b.n	8104e1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104e12:	2301      	movs	r3, #1
 8104e14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104e18:	e000      	b.n	8104e1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8104e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e20:	2b00      	cmp	r3, #0
 8104e22:	d10a      	bne.n	8104e3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104e24:	4b7b      	ldr	r3, [pc, #492]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e28:	f023 0107 	bic.w	r1, r3, #7
 8104e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104e32:	4a78      	ldr	r2, [pc, #480]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104e34:	430b      	orrs	r3, r1
 8104e36:	6513      	str	r3, [r2, #80]	; 0x50
 8104e38:	e003      	b.n	8104e42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e4a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8104e4e:	f04f 0b00 	mov.w	fp, #0
 8104e52:	ea5a 030b 	orrs.w	r3, sl, fp
 8104e56:	d04c      	beq.n	8104ef2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8104e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104e62:	d030      	beq.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8104e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104e68:	d829      	bhi.n	8104ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104e6a:	2bc0      	cmp	r3, #192	; 0xc0
 8104e6c:	d02d      	beq.n	8104eca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8104e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8104e70:	d825      	bhi.n	8104ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104e72:	2b80      	cmp	r3, #128	; 0x80
 8104e74:	d018      	beq.n	8104ea8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8104e76:	2b80      	cmp	r3, #128	; 0x80
 8104e78:	d821      	bhi.n	8104ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104e7a:	2b00      	cmp	r3, #0
 8104e7c:	d002      	beq.n	8104e84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8104e7e:	2b40      	cmp	r3, #64	; 0x40
 8104e80:	d007      	beq.n	8104e92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8104e82:	e01c      	b.n	8104ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e84:	4b63      	ldr	r3, [pc, #396]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e88:	4a62      	ldr	r2, [pc, #392]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104e90:	e01c      	b.n	8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e96:	3308      	adds	r3, #8
 8104e98:	2100      	movs	r1, #0
 8104e9a:	4618      	mov	r0, r3
 8104e9c:	f001 fbe6 	bl	810666c <RCCEx_PLL2_Config>
 8104ea0:	4603      	mov	r3, r0
 8104ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104ea6:	e011      	b.n	8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104eac:	3328      	adds	r3, #40	; 0x28
 8104eae:	2100      	movs	r1, #0
 8104eb0:	4618      	mov	r0, r3
 8104eb2:	f001 fc8d 	bl	81067d0 <RCCEx_PLL3_Config>
 8104eb6:	4603      	mov	r3, r0
 8104eb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104ebc:	e006      	b.n	8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104ebe:	2301      	movs	r3, #1
 8104ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104ec4:	e002      	b.n	8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104ec6:	bf00      	nop
 8104ec8:	e000      	b.n	8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ed0:	2b00      	cmp	r3, #0
 8104ed2:	d10a      	bne.n	8104eea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104ed4:	4b4f      	ldr	r3, [pc, #316]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ed8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8104edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104ee2:	4a4c      	ldr	r2, [pc, #304]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104ee4:	430b      	orrs	r3, r1
 8104ee6:	6513      	str	r3, [r2, #80]	; 0x50
 8104ee8:	e003      	b.n	8104ef2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104eea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104eee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104efa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8104efe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8104f02:	2300      	movs	r3, #0
 8104f04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8104f08:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8104f0c:	460b      	mov	r3, r1
 8104f0e:	4313      	orrs	r3, r2
 8104f10:	d053      	beq.n	8104fba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8104f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104f1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104f1e:	d035      	beq.n	8104f8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8104f20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104f24:	d82e      	bhi.n	8104f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104f26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104f2a:	d031      	beq.n	8104f90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8104f2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104f30:	d828      	bhi.n	8104f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104f36:	d01a      	beq.n	8104f6e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8104f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104f3c:	d822      	bhi.n	8104f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104f3e:	2b00      	cmp	r3, #0
 8104f40:	d003      	beq.n	8104f4a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8104f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104f46:	d007      	beq.n	8104f58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8104f48:	e01c      	b.n	8104f84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104f4a:	4b32      	ldr	r3, [pc, #200]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f4e:	4a31      	ldr	r2, [pc, #196]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104f54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104f56:	e01c      	b.n	8104f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f5c:	3308      	adds	r3, #8
 8104f5e:	2100      	movs	r1, #0
 8104f60:	4618      	mov	r0, r3
 8104f62:	f001 fb83 	bl	810666c <RCCEx_PLL2_Config>
 8104f66:	4603      	mov	r3, r0
 8104f68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104f6c:	e011      	b.n	8104f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f72:	3328      	adds	r3, #40	; 0x28
 8104f74:	2100      	movs	r1, #0
 8104f76:	4618      	mov	r0, r3
 8104f78:	f001 fc2a 	bl	81067d0 <RCCEx_PLL3_Config>
 8104f7c:	4603      	mov	r3, r0
 8104f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104f82:	e006      	b.n	8104f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104f84:	2301      	movs	r3, #1
 8104f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104f8a:	e002      	b.n	8104f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104f8c:	bf00      	nop
 8104f8e:	e000      	b.n	8104f92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104f96:	2b00      	cmp	r3, #0
 8104f98:	d10b      	bne.n	8104fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104f9a:	4b1e      	ldr	r3, [pc, #120]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f9e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8104fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104faa:	4a1a      	ldr	r2, [pc, #104]	; (8105014 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104fac:	430b      	orrs	r3, r1
 8104fae:	6593      	str	r3, [r2, #88]	; 0x58
 8104fb0:	e003      	b.n	8104fba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104fb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104fc2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8104fc6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8104fca:	2300      	movs	r3, #0
 8104fcc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8104fd0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8104fd4:	460b      	mov	r3, r1
 8104fd6:	4313      	orrs	r3, r2
 8104fd8:	d056      	beq.n	8105088 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8104fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104fe2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104fe6:	d038      	beq.n	810505a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8104fe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104fec:	d831      	bhi.n	8105052 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104ff2:	d034      	beq.n	810505e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8104ff4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104ff8:	d82b      	bhi.n	8105052 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104ffe:	d01d      	beq.n	810503c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8105000:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105004:	d825      	bhi.n	8105052 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105006:	2b00      	cmp	r3, #0
 8105008:	d006      	beq.n	8105018 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810500a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810500e:	d00a      	beq.n	8105026 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8105010:	e01f      	b.n	8105052 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105012:	bf00      	nop
 8105014:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105018:	4ba2      	ldr	r3, [pc, #648]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810501c:	4aa1      	ldr	r2, [pc, #644]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810501e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105024:	e01c      	b.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810502a:	3308      	adds	r3, #8
 810502c:	2100      	movs	r1, #0
 810502e:	4618      	mov	r0, r3
 8105030:	f001 fb1c 	bl	810666c <RCCEx_PLL2_Config>
 8105034:	4603      	mov	r3, r0
 8105036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810503a:	e011      	b.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105040:	3328      	adds	r3, #40	; 0x28
 8105042:	2100      	movs	r1, #0
 8105044:	4618      	mov	r0, r3
 8105046:	f001 fbc3 	bl	81067d0 <RCCEx_PLL3_Config>
 810504a:	4603      	mov	r3, r0
 810504c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105050:	e006      	b.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105052:	2301      	movs	r3, #1
 8105054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105058:	e002      	b.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810505a:	bf00      	nop
 810505c:	e000      	b.n	8105060 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810505e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105060:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105064:	2b00      	cmp	r3, #0
 8105066:	d10b      	bne.n	8105080 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105068:	4b8e      	ldr	r3, [pc, #568]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810506c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8105070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105074:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105078:	4a8a      	ldr	r2, [pc, #552]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810507a:	430b      	orrs	r3, r1
 810507c:	6593      	str	r3, [r2, #88]	; 0x58
 810507e:	e003      	b.n	8105088 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105084:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105090:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8105094:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8105098:	2300      	movs	r3, #0
 810509a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 810509e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 81050a2:	460b      	mov	r3, r1
 81050a4:	4313      	orrs	r3, r2
 81050a6:	d03a      	beq.n	810511e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81050ae:	2b30      	cmp	r3, #48	; 0x30
 81050b0:	d01f      	beq.n	81050f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 81050b2:	2b30      	cmp	r3, #48	; 0x30
 81050b4:	d819      	bhi.n	81050ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81050b6:	2b20      	cmp	r3, #32
 81050b8:	d00c      	beq.n	81050d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81050ba:	2b20      	cmp	r3, #32
 81050bc:	d815      	bhi.n	81050ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81050be:	2b00      	cmp	r3, #0
 81050c0:	d019      	beq.n	81050f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81050c2:	2b10      	cmp	r3, #16
 81050c4:	d111      	bne.n	81050ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81050c6:	4b77      	ldr	r3, [pc, #476]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81050ca:	4a76      	ldr	r2, [pc, #472]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81050cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81050d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81050d2:	e011      	b.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050d8:	3308      	adds	r3, #8
 81050da:	2102      	movs	r1, #2
 81050dc:	4618      	mov	r0, r3
 81050de:	f001 fac5 	bl	810666c <RCCEx_PLL2_Config>
 81050e2:	4603      	mov	r3, r0
 81050e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81050e8:	e006      	b.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81050ea:	2301      	movs	r3, #1
 81050ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81050f0:	e002      	b.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81050f2:	bf00      	nop
 81050f4:	e000      	b.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81050f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81050f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81050fc:	2b00      	cmp	r3, #0
 81050fe:	d10a      	bne.n	8105116 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105100:	4b68      	ldr	r3, [pc, #416]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105104:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8105108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810510e:	4a65      	ldr	r2, [pc, #404]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105110:	430b      	orrs	r3, r1
 8105112:	64d3      	str	r3, [r2, #76]	; 0x4c
 8105114:	e003      	b.n	810511e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105116:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810511a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105126:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 810512a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 810512e:	2300      	movs	r3, #0
 8105130:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8105134:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8105138:	460b      	mov	r3, r1
 810513a:	4313      	orrs	r3, r2
 810513c:	d051      	beq.n	81051e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105148:	d035      	beq.n	81051b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810514a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810514e:	d82e      	bhi.n	81051ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105150:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105154:	d031      	beq.n	81051ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8105156:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810515a:	d828      	bhi.n	81051ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810515c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105160:	d01a      	beq.n	8105198 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8105162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105166:	d822      	bhi.n	81051ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105168:	2b00      	cmp	r3, #0
 810516a:	d003      	beq.n	8105174 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105170:	d007      	beq.n	8105182 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8105172:	e01c      	b.n	81051ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105174:	4b4b      	ldr	r3, [pc, #300]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105178:	4a4a      	ldr	r2, [pc, #296]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810517a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810517e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105180:	e01c      	b.n	81051bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105186:	3308      	adds	r3, #8
 8105188:	2100      	movs	r1, #0
 810518a:	4618      	mov	r0, r3
 810518c:	f001 fa6e 	bl	810666c <RCCEx_PLL2_Config>
 8105190:	4603      	mov	r3, r0
 8105192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105196:	e011      	b.n	81051bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810519c:	3328      	adds	r3, #40	; 0x28
 810519e:	2100      	movs	r1, #0
 81051a0:	4618      	mov	r0, r3
 81051a2:	f001 fb15 	bl	81067d0 <RCCEx_PLL3_Config>
 81051a6:	4603      	mov	r3, r0
 81051a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81051ac:	e006      	b.n	81051bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81051ae:	2301      	movs	r3, #1
 81051b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81051b4:	e002      	b.n	81051bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81051b6:	bf00      	nop
 81051b8:	e000      	b.n	81051bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81051ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81051bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81051c0:	2b00      	cmp	r3, #0
 81051c2:	d10a      	bne.n	81051da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81051c4:	4b37      	ldr	r3, [pc, #220]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81051c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81051c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 81051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81051d2:	4a34      	ldr	r2, [pc, #208]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81051d4:	430b      	orrs	r3, r1
 81051d6:	6513      	str	r3, [r2, #80]	; 0x50
 81051d8:	e003      	b.n	81051e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81051da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81051de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81051ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 81051ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 81051f2:	2300      	movs	r3, #0
 81051f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 81051f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 81051fc:	460b      	mov	r3, r1
 81051fe:	4313      	orrs	r3, r2
 8105200:	d056      	beq.n	81052b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8105202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810520c:	d033      	beq.n	8105276 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810520e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105212:	d82c      	bhi.n	810526e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105214:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105218:	d02f      	beq.n	810527a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810521a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810521e:	d826      	bhi.n	810526e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105220:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105224:	d02b      	beq.n	810527e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8105226:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810522a:	d820      	bhi.n	810526e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810522c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105230:	d012      	beq.n	8105258 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8105232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105236:	d81a      	bhi.n	810526e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105238:	2b00      	cmp	r3, #0
 810523a:	d022      	beq.n	8105282 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810523c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105240:	d115      	bne.n	810526e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105246:	3308      	adds	r3, #8
 8105248:	2101      	movs	r1, #1
 810524a:	4618      	mov	r0, r3
 810524c:	f001 fa0e 	bl	810666c <RCCEx_PLL2_Config>
 8105250:	4603      	mov	r3, r0
 8105252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8105256:	e015      	b.n	8105284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810525c:	3328      	adds	r3, #40	; 0x28
 810525e:	2101      	movs	r1, #1
 8105260:	4618      	mov	r0, r3
 8105262:	f001 fab5 	bl	81067d0 <RCCEx_PLL3_Config>
 8105266:	4603      	mov	r3, r0
 8105268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810526c:	e00a      	b.n	8105284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810526e:	2301      	movs	r3, #1
 8105270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105274:	e006      	b.n	8105284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105276:	bf00      	nop
 8105278:	e004      	b.n	8105284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810527a:	bf00      	nop
 810527c:	e002      	b.n	8105284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810527e:	bf00      	nop
 8105280:	e000      	b.n	8105284 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105284:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105288:	2b00      	cmp	r3, #0
 810528a:	d10d      	bne.n	81052a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810528c:	4b05      	ldr	r3, [pc, #20]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810528e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105290:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8105294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810529a:	4a02      	ldr	r2, [pc, #8]	; (81052a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810529c:	430b      	orrs	r3, r1
 810529e:	6513      	str	r3, [r2, #80]	; 0x50
 81052a0:	e006      	b.n	81052b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81052a2:	bf00      	nop
 81052a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81052a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81052ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81052b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81052b8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 81052bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 81052c0:	2300      	movs	r3, #0
 81052c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 81052c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 81052ca:	460b      	mov	r3, r1
 81052cc:	4313      	orrs	r3, r2
 81052ce:	d055      	beq.n	810537c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81052d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81052d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81052dc:	d033      	beq.n	8105346 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81052de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81052e2:	d82c      	bhi.n	810533e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81052e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81052e8:	d02f      	beq.n	810534a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81052ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81052ee:	d826      	bhi.n	810533e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81052f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81052f4:	d02b      	beq.n	810534e <HAL_RCCEx_PeriphCLKConfig+0x672>
 81052f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81052fa:	d820      	bhi.n	810533e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81052fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105300:	d012      	beq.n	8105328 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8105302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105306:	d81a      	bhi.n	810533e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105308:	2b00      	cmp	r3, #0
 810530a:	d022      	beq.n	8105352 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810530c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105310:	d115      	bne.n	810533e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105316:	3308      	adds	r3, #8
 8105318:	2101      	movs	r1, #1
 810531a:	4618      	mov	r0, r3
 810531c:	f001 f9a6 	bl	810666c <RCCEx_PLL2_Config>
 8105320:	4603      	mov	r3, r0
 8105322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8105326:	e015      	b.n	8105354 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810532c:	3328      	adds	r3, #40	; 0x28
 810532e:	2101      	movs	r1, #1
 8105330:	4618      	mov	r0, r3
 8105332:	f001 fa4d 	bl	81067d0 <RCCEx_PLL3_Config>
 8105336:	4603      	mov	r3, r0
 8105338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810533c:	e00a      	b.n	8105354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810533e:	2301      	movs	r3, #1
 8105340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105344:	e006      	b.n	8105354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105346:	bf00      	nop
 8105348:	e004      	b.n	8105354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810534a:	bf00      	nop
 810534c:	e002      	b.n	8105354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810534e:	bf00      	nop
 8105350:	e000      	b.n	8105354 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105358:	2b00      	cmp	r3, #0
 810535a:	d10b      	bne.n	8105374 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810535c:	4ba4      	ldr	r3, [pc, #656]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810535e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105360:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8105364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105368:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810536c:	4aa0      	ldr	r2, [pc, #640]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810536e:	430b      	orrs	r3, r1
 8105370:	6593      	str	r3, [r2, #88]	; 0x58
 8105372:	e003      	b.n	810537c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810537c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105384:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8105388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 810538c:	2300      	movs	r3, #0
 810538e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8105392:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8105396:	460b      	mov	r3, r1
 8105398:	4313      	orrs	r3, r2
 810539a:	d037      	beq.n	810540c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810539c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81053a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81053a6:	d00e      	beq.n	81053c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81053a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81053ac:	d816      	bhi.n	81053dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 81053ae:	2b00      	cmp	r3, #0
 81053b0:	d018      	beq.n	81053e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 81053b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81053b6:	d111      	bne.n	81053dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81053b8:	4b8d      	ldr	r3, [pc, #564]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053bc:	4a8c      	ldr	r2, [pc, #560]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81053be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81053c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81053c4:	e00f      	b.n	81053e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81053c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053ca:	3308      	adds	r3, #8
 81053cc:	2101      	movs	r1, #1
 81053ce:	4618      	mov	r0, r3
 81053d0:	f001 f94c 	bl	810666c <RCCEx_PLL2_Config>
 81053d4:	4603      	mov	r3, r0
 81053d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81053da:	e004      	b.n	81053e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81053dc:	2301      	movs	r3, #1
 81053de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81053e2:	e000      	b.n	81053e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81053e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81053e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81053ea:	2b00      	cmp	r3, #0
 81053ec:	d10a      	bne.n	8105404 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81053ee:	4b80      	ldr	r3, [pc, #512]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81053f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81053f2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 81053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81053fc:	4a7c      	ldr	r2, [pc, #496]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81053fe:	430b      	orrs	r3, r1
 8105400:	6513      	str	r3, [r2, #80]	; 0x50
 8105402:	e003      	b.n	810540c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105404:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105408:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105414:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8105418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 810541c:	2300      	movs	r3, #0
 810541e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8105422:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8105426:	460b      	mov	r3, r1
 8105428:	4313      	orrs	r3, r2
 810542a:	d039      	beq.n	81054a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810542c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105432:	2b03      	cmp	r3, #3
 8105434:	d81c      	bhi.n	8105470 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8105436:	a201      	add	r2, pc, #4	; (adr r2, 810543c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8105438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810543c:	08105479 	.word	0x08105479
 8105440:	0810544d 	.word	0x0810544d
 8105444:	0810545b 	.word	0x0810545b
 8105448:	08105479 	.word	0x08105479
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810544c:	4b68      	ldr	r3, [pc, #416]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105450:	4a67      	ldr	r2, [pc, #412]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105458:	e00f      	b.n	810547a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810545a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810545e:	3308      	adds	r3, #8
 8105460:	2102      	movs	r1, #2
 8105462:	4618      	mov	r0, r3
 8105464:	f001 f902 	bl	810666c <RCCEx_PLL2_Config>
 8105468:	4603      	mov	r3, r0
 810546a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 810546e:	e004      	b.n	810547a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105470:	2301      	movs	r3, #1
 8105472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105476:	e000      	b.n	810547a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8105478:	bf00      	nop
    }

    if (ret == HAL_OK)
 810547a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810547e:	2b00      	cmp	r3, #0
 8105480:	d10a      	bne.n	8105498 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105482:	4b5b      	ldr	r3, [pc, #364]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105486:	f023 0103 	bic.w	r1, r3, #3
 810548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810548e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105490:	4a57      	ldr	r2, [pc, #348]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105492:	430b      	orrs	r3, r1
 8105494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8105496:	e003      	b.n	81054a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810549c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81054a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054a8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 81054ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 81054b0:	2300      	movs	r3, #0
 81054b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 81054b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 81054ba:	460b      	mov	r3, r1
 81054bc:	4313      	orrs	r3, r2
 81054be:	f000 809f 	beq.w	8105600 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81054c2:	4b4c      	ldr	r3, [pc, #304]	; (81055f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81054c4:	681b      	ldr	r3, [r3, #0]
 81054c6:	4a4b      	ldr	r2, [pc, #300]	; (81055f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81054c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81054cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81054ce:	f7fe f851 	bl	8103574 <HAL_GetTick>
 81054d2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81054d6:	e00b      	b.n	81054f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81054d8:	f7fe f84c 	bl	8103574 <HAL_GetTick>
 81054dc:	4602      	mov	r2, r0
 81054de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 81054e2:	1ad3      	subs	r3, r2, r3
 81054e4:	2b64      	cmp	r3, #100	; 0x64
 81054e6:	d903      	bls.n	81054f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81054e8:	2303      	movs	r3, #3
 81054ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81054ee:	e005      	b.n	81054fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81054f0:	4b40      	ldr	r3, [pc, #256]	; (81055f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81054f2:	681b      	ldr	r3, [r3, #0]
 81054f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81054f8:	2b00      	cmp	r3, #0
 81054fa:	d0ed      	beq.n	81054d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81054fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105500:	2b00      	cmp	r3, #0
 8105502:	d179      	bne.n	81055f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8105504:	4b3a      	ldr	r3, [pc, #232]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105506:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810550c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105510:	4053      	eors	r3, r2
 8105512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105516:	2b00      	cmp	r3, #0
 8105518:	d015      	beq.n	8105546 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810551a:	4b35      	ldr	r3, [pc, #212]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810551c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810551e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105522:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8105526:	4b32      	ldr	r3, [pc, #200]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810552a:	4a31      	ldr	r2, [pc, #196]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810552c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105530:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105532:	4b2f      	ldr	r3, [pc, #188]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105536:	4a2e      	ldr	r2, [pc, #184]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810553c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810553e:	4a2c      	ldr	r2, [pc, #176]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105540:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8105544:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810554a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810554e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105552:	d118      	bne.n	8105586 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105554:	f7fe f80e 	bl	8103574 <HAL_GetTick>
 8105558:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810555c:	e00d      	b.n	810557a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810555e:	f7fe f809 	bl	8103574 <HAL_GetTick>
 8105562:	4602      	mov	r2, r0
 8105564:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8105568:	1ad2      	subs	r2, r2, r3
 810556a:	f241 3388 	movw	r3, #5000	; 0x1388
 810556e:	429a      	cmp	r2, r3
 8105570:	d903      	bls.n	810557a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8105572:	2303      	movs	r3, #3
 8105574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8105578:	e005      	b.n	8105586 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810557a:	4b1d      	ldr	r3, [pc, #116]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810557c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810557e:	f003 0302 	and.w	r3, r3, #2
 8105582:	2b00      	cmp	r3, #0
 8105584:	d0eb      	beq.n	810555e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8105586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810558a:	2b00      	cmp	r3, #0
 810558c:	d12b      	bne.n	81055e6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810558e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105592:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810559a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810559e:	d110      	bne.n	81055c2 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81055a0:	4b13      	ldr	r3, [pc, #76]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055a2:	691b      	ldr	r3, [r3, #16]
 81055a4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 81055a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81055b0:	091b      	lsrs	r3, r3, #4
 81055b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81055b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81055ba:	4a0d      	ldr	r2, [pc, #52]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055bc:	430b      	orrs	r3, r1
 81055be:	6113      	str	r3, [r2, #16]
 81055c0:	e005      	b.n	81055ce <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81055c2:	4b0b      	ldr	r3, [pc, #44]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055c4:	691b      	ldr	r3, [r3, #16]
 81055c6:	4a0a      	ldr	r2, [pc, #40]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81055cc:	6113      	str	r3, [r2, #16]
 81055ce:	4b08      	ldr	r3, [pc, #32]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 81055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81055da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81055de:	4a04      	ldr	r2, [pc, #16]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055e0:	430b      	orrs	r3, r1
 81055e2:	6713      	str	r3, [r2, #112]	; 0x70
 81055e4:	e00c      	b.n	8105600 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81055e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81055ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 81055ee:	e007      	b.n	8105600 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81055f0:	58024400 	.word	0x58024400
 81055f4:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81055fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105608:	f002 0301 	and.w	r3, r2, #1
 810560c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8105610:	2300      	movs	r3, #0
 8105612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8105616:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 810561a:	460b      	mov	r3, r1
 810561c:	4313      	orrs	r3, r2
 810561e:	f000 8089 	beq.w	8105734 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8105622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105628:	2b28      	cmp	r3, #40	; 0x28
 810562a:	d86b      	bhi.n	8105704 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 810562c:	a201      	add	r2, pc, #4	; (adr r2, 8105634 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105632:	bf00      	nop
 8105634:	0810570d 	.word	0x0810570d
 8105638:	08105705 	.word	0x08105705
 810563c:	08105705 	.word	0x08105705
 8105640:	08105705 	.word	0x08105705
 8105644:	08105705 	.word	0x08105705
 8105648:	08105705 	.word	0x08105705
 810564c:	08105705 	.word	0x08105705
 8105650:	08105705 	.word	0x08105705
 8105654:	081056d9 	.word	0x081056d9
 8105658:	08105705 	.word	0x08105705
 810565c:	08105705 	.word	0x08105705
 8105660:	08105705 	.word	0x08105705
 8105664:	08105705 	.word	0x08105705
 8105668:	08105705 	.word	0x08105705
 810566c:	08105705 	.word	0x08105705
 8105670:	08105705 	.word	0x08105705
 8105674:	081056ef 	.word	0x081056ef
 8105678:	08105705 	.word	0x08105705
 810567c:	08105705 	.word	0x08105705
 8105680:	08105705 	.word	0x08105705
 8105684:	08105705 	.word	0x08105705
 8105688:	08105705 	.word	0x08105705
 810568c:	08105705 	.word	0x08105705
 8105690:	08105705 	.word	0x08105705
 8105694:	0810570d 	.word	0x0810570d
 8105698:	08105705 	.word	0x08105705
 810569c:	08105705 	.word	0x08105705
 81056a0:	08105705 	.word	0x08105705
 81056a4:	08105705 	.word	0x08105705
 81056a8:	08105705 	.word	0x08105705
 81056ac:	08105705 	.word	0x08105705
 81056b0:	08105705 	.word	0x08105705
 81056b4:	0810570d 	.word	0x0810570d
 81056b8:	08105705 	.word	0x08105705
 81056bc:	08105705 	.word	0x08105705
 81056c0:	08105705 	.word	0x08105705
 81056c4:	08105705 	.word	0x08105705
 81056c8:	08105705 	.word	0x08105705
 81056cc:	08105705 	.word	0x08105705
 81056d0:	08105705 	.word	0x08105705
 81056d4:	0810570d 	.word	0x0810570d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81056d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056dc:	3308      	adds	r3, #8
 81056de:	2101      	movs	r1, #1
 81056e0:	4618      	mov	r0, r3
 81056e2:	f000 ffc3 	bl	810666c <RCCEx_PLL2_Config>
 81056e6:	4603      	mov	r3, r0
 81056e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81056ec:	e00f      	b.n	810570e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81056ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056f2:	3328      	adds	r3, #40	; 0x28
 81056f4:	2101      	movs	r1, #1
 81056f6:	4618      	mov	r0, r3
 81056f8:	f001 f86a 	bl	81067d0 <RCCEx_PLL3_Config>
 81056fc:	4603      	mov	r3, r0
 81056fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8105702:	e004      	b.n	810570e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105704:	2301      	movs	r3, #1
 8105706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810570a:	e000      	b.n	810570e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 810570c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810570e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105712:	2b00      	cmp	r3, #0
 8105714:	d10a      	bne.n	810572c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105716:	4bbf      	ldr	r3, [pc, #764]	; (8105a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810571a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 810571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105724:	4abb      	ldr	r2, [pc, #748]	; (8105a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105726:	430b      	orrs	r3, r1
 8105728:	6553      	str	r3, [r2, #84]	; 0x54
 810572a:	e003      	b.n	8105734 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810572c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105730:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105738:	e9d3 2300 	ldrd	r2, r3, [r3]
 810573c:	f002 0302 	and.w	r3, r2, #2
 8105740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8105744:	2300      	movs	r3, #0
 8105746:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 810574a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 810574e:	460b      	mov	r3, r1
 8105750:	4313      	orrs	r3, r2
 8105752:	d041      	beq.n	81057d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8105754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810575a:	2b05      	cmp	r3, #5
 810575c:	d824      	bhi.n	81057a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 810575e:	a201      	add	r2, pc, #4	; (adr r2, 8105764 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8105760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105764:	081057b1 	.word	0x081057b1
 8105768:	0810577d 	.word	0x0810577d
 810576c:	08105793 	.word	0x08105793
 8105770:	081057b1 	.word	0x081057b1
 8105774:	081057b1 	.word	0x081057b1
 8105778:	081057b1 	.word	0x081057b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105780:	3308      	adds	r3, #8
 8105782:	2101      	movs	r1, #1
 8105784:	4618      	mov	r0, r3
 8105786:	f000 ff71 	bl	810666c <RCCEx_PLL2_Config>
 810578a:	4603      	mov	r3, r0
 810578c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105790:	e00f      	b.n	81057b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105796:	3328      	adds	r3, #40	; 0x28
 8105798:	2101      	movs	r1, #1
 810579a:	4618      	mov	r0, r3
 810579c:	f001 f818 	bl	81067d0 <RCCEx_PLL3_Config>
 81057a0:	4603      	mov	r3, r0
 81057a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81057a6:	e004      	b.n	81057b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81057a8:	2301      	movs	r3, #1
 81057aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81057ae:	e000      	b.n	81057b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81057b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81057b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81057b6:	2b00      	cmp	r3, #0
 81057b8:	d10a      	bne.n	81057d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81057ba:	4b96      	ldr	r3, [pc, #600]	; (8105a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81057be:	f023 0107 	bic.w	r1, r3, #7
 81057c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81057c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81057c8:	4a92      	ldr	r2, [pc, #584]	; (8105a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81057ca:	430b      	orrs	r3, r1
 81057cc:	6553      	str	r3, [r2, #84]	; 0x54
 81057ce:	e003      	b.n	81057d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81057d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81057d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81057d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81057e0:	f002 0304 	and.w	r3, r2, #4
 81057e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 81057e8:	2300      	movs	r3, #0
 81057ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81057ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 81057f2:	460b      	mov	r3, r1
 81057f4:	4313      	orrs	r3, r2
 81057f6:	d044      	beq.n	8105882 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81057fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105800:	2b05      	cmp	r3, #5
 8105802:	d825      	bhi.n	8105850 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8105804:	a201      	add	r2, pc, #4	; (adr r2, 810580c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8105806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810580a:	bf00      	nop
 810580c:	08105859 	.word	0x08105859
 8105810:	08105825 	.word	0x08105825
 8105814:	0810583b 	.word	0x0810583b
 8105818:	08105859 	.word	0x08105859
 810581c:	08105859 	.word	0x08105859
 8105820:	08105859 	.word	0x08105859
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105828:	3308      	adds	r3, #8
 810582a:	2101      	movs	r1, #1
 810582c:	4618      	mov	r0, r3
 810582e:	f000 ff1d 	bl	810666c <RCCEx_PLL2_Config>
 8105832:	4603      	mov	r3, r0
 8105834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105838:	e00f      	b.n	810585a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810583a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810583e:	3328      	adds	r3, #40	; 0x28
 8105840:	2101      	movs	r1, #1
 8105842:	4618      	mov	r0, r3
 8105844:	f000 ffc4 	bl	81067d0 <RCCEx_PLL3_Config>
 8105848:	4603      	mov	r3, r0
 810584a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810584e:	e004      	b.n	810585a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105850:	2301      	movs	r3, #1
 8105852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105856:	e000      	b.n	810585a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8105858:	bf00      	nop
    }

    if (ret == HAL_OK)
 810585a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810585e:	2b00      	cmp	r3, #0
 8105860:	d10b      	bne.n	810587a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8105862:	4b6c      	ldr	r3, [pc, #432]	; (8105a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105866:	f023 0107 	bic.w	r1, r3, #7
 810586a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810586e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105872:	4a68      	ldr	r2, [pc, #416]	; (8105a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105874:	430b      	orrs	r3, r1
 8105876:	6593      	str	r3, [r2, #88]	; 0x58
 8105878:	e003      	b.n	8105882 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810587a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810587e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105886:	e9d3 2300 	ldrd	r2, r3, [r3]
 810588a:	f002 0320 	and.w	r3, r2, #32
 810588e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8105892:	2300      	movs	r3, #0
 8105894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8105898:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 810589c:	460b      	mov	r3, r1
 810589e:	4313      	orrs	r3, r2
 81058a0:	d055      	beq.n	810594e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81058a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81058aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81058ae:	d033      	beq.n	8105918 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81058b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81058b4:	d82c      	bhi.n	8105910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81058b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81058ba:	d02f      	beq.n	810591c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81058c0:	d826      	bhi.n	8105910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81058c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81058c6:	d02b      	beq.n	8105920 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81058c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81058cc:	d820      	bhi.n	8105910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81058ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81058d2:	d012      	beq.n	81058fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81058d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81058d8:	d81a      	bhi.n	8105910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81058da:	2b00      	cmp	r3, #0
 81058dc:	d022      	beq.n	8105924 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81058de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81058e2:	d115      	bne.n	8105910 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058e8:	3308      	adds	r3, #8
 81058ea:	2100      	movs	r1, #0
 81058ec:	4618      	mov	r0, r3
 81058ee:	f000 febd 	bl	810666c <RCCEx_PLL2_Config>
 81058f2:	4603      	mov	r3, r0
 81058f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81058f8:	e015      	b.n	8105926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058fe:	3328      	adds	r3, #40	; 0x28
 8105900:	2102      	movs	r1, #2
 8105902:	4618      	mov	r0, r3
 8105904:	f000 ff64 	bl	81067d0 <RCCEx_PLL3_Config>
 8105908:	4603      	mov	r3, r0
 810590a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810590e:	e00a      	b.n	8105926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105910:	2301      	movs	r3, #1
 8105912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105916:	e006      	b.n	8105926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105918:	bf00      	nop
 810591a:	e004      	b.n	8105926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810591c:	bf00      	nop
 810591e:	e002      	b.n	8105926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105920:	bf00      	nop
 8105922:	e000      	b.n	8105926 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810592a:	2b00      	cmp	r3, #0
 810592c:	d10b      	bne.n	8105946 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810592e:	4b39      	ldr	r3, [pc, #228]	; (8105a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105932:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8105936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810593e:	4a35      	ldr	r2, [pc, #212]	; (8105a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105940:	430b      	orrs	r3, r1
 8105942:	6553      	str	r3, [r2, #84]	; 0x54
 8105944:	e003      	b.n	810594e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810594a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810594e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105956:	f002 0340 	and.w	r3, r2, #64	; 0x40
 810595a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 810595e:	2300      	movs	r3, #0
 8105960:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8105964:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8105968:	460b      	mov	r3, r1
 810596a:	4313      	orrs	r3, r2
 810596c:	d058      	beq.n	8105a20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105972:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105976:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810597a:	d033      	beq.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 810597c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105980:	d82c      	bhi.n	81059dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105986:	d02f      	beq.n	81059e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8105988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810598c:	d826      	bhi.n	81059dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810598e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105992:	d02b      	beq.n	81059ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8105994:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105998:	d820      	bhi.n	81059dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810599a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810599e:	d012      	beq.n	81059c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81059a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81059a4:	d81a      	bhi.n	81059dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81059a6:	2b00      	cmp	r3, #0
 81059a8:	d022      	beq.n	81059f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81059aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81059ae:	d115      	bne.n	81059dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059b4:	3308      	adds	r3, #8
 81059b6:	2100      	movs	r1, #0
 81059b8:	4618      	mov	r0, r3
 81059ba:	f000 fe57 	bl	810666c <RCCEx_PLL2_Config>
 81059be:	4603      	mov	r3, r0
 81059c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81059c4:	e015      	b.n	81059f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059ca:	3328      	adds	r3, #40	; 0x28
 81059cc:	2102      	movs	r1, #2
 81059ce:	4618      	mov	r0, r3
 81059d0:	f000 fefe 	bl	81067d0 <RCCEx_PLL3_Config>
 81059d4:	4603      	mov	r3, r0
 81059d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81059da:	e00a      	b.n	81059f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81059dc:	2301      	movs	r3, #1
 81059de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81059e2:	e006      	b.n	81059f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81059e4:	bf00      	nop
 81059e6:	e004      	b.n	81059f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81059e8:	bf00      	nop
 81059ea:	e002      	b.n	81059f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81059ec:	bf00      	nop
 81059ee:	e000      	b.n	81059f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81059f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81059f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81059f6:	2b00      	cmp	r3, #0
 81059f8:	d10e      	bne.n	8105a18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81059fa:	4b06      	ldr	r3, [pc, #24]	; (8105a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81059fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81059fe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8105a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105a0a:	4a02      	ldr	r2, [pc, #8]	; (8105a14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105a0c:	430b      	orrs	r3, r1
 8105a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8105a10:	e006      	b.n	8105a20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8105a12:	bf00      	nop
 8105a14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105a1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a28:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8105a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8105a30:	2300      	movs	r3, #0
 8105a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8105a36:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8105a3a:	460b      	mov	r3, r1
 8105a3c:	4313      	orrs	r3, r2
 8105a3e:	d055      	beq.n	8105aec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8105a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105a48:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8105a4c:	d033      	beq.n	8105ab6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8105a4e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8105a52:	d82c      	bhi.n	8105aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105a58:	d02f      	beq.n	8105aba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8105a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105a5e:	d826      	bhi.n	8105aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105a60:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105a64:	d02b      	beq.n	8105abe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8105a66:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105a6a:	d820      	bhi.n	8105aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105a70:	d012      	beq.n	8105a98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8105a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105a76:	d81a      	bhi.n	8105aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105a78:	2b00      	cmp	r3, #0
 8105a7a:	d022      	beq.n	8105ac2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8105a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105a80:	d115      	bne.n	8105aae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a86:	3308      	adds	r3, #8
 8105a88:	2100      	movs	r1, #0
 8105a8a:	4618      	mov	r0, r3
 8105a8c:	f000 fdee 	bl	810666c <RCCEx_PLL2_Config>
 8105a90:	4603      	mov	r3, r0
 8105a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105a96:	e015      	b.n	8105ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a9c:	3328      	adds	r3, #40	; 0x28
 8105a9e:	2102      	movs	r1, #2
 8105aa0:	4618      	mov	r0, r3
 8105aa2:	f000 fe95 	bl	81067d0 <RCCEx_PLL3_Config>
 8105aa6:	4603      	mov	r3, r0
 8105aa8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105aac:	e00a      	b.n	8105ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105aae:	2301      	movs	r3, #1
 8105ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105ab4:	e006      	b.n	8105ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105ab6:	bf00      	nop
 8105ab8:	e004      	b.n	8105ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105aba:	bf00      	nop
 8105abc:	e002      	b.n	8105ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105abe:	bf00      	nop
 8105ac0:	e000      	b.n	8105ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105ac8:	2b00      	cmp	r3, #0
 8105aca:	d10b      	bne.n	8105ae4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8105acc:	4ba1      	ldr	r3, [pc, #644]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105ad0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8105ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ad8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105adc:	4a9d      	ldr	r2, [pc, #628]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105ade:	430b      	orrs	r3, r1
 8105ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8105ae2:	e003      	b.n	8105aec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105ae8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105af4:	f002 0308 	and.w	r3, r2, #8
 8105af8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8105afc:	2300      	movs	r3, #0
 8105afe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8105b02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8105b06:	460b      	mov	r3, r1
 8105b08:	4313      	orrs	r3, r2
 8105b0a:	d01e      	beq.n	8105b4a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8105b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105b18:	d10c      	bne.n	8105b34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b1e:	3328      	adds	r3, #40	; 0x28
 8105b20:	2102      	movs	r1, #2
 8105b22:	4618      	mov	r0, r3
 8105b24:	f000 fe54 	bl	81067d0 <RCCEx_PLL3_Config>
 8105b28:	4603      	mov	r3, r0
 8105b2a:	2b00      	cmp	r3, #0
 8105b2c:	d002      	beq.n	8105b34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8105b2e:	2301      	movs	r3, #1
 8105b30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105b34:	4b87      	ldr	r3, [pc, #540]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8105b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105b44:	4a83      	ldr	r2, [pc, #524]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105b46:	430b      	orrs	r3, r1
 8105b48:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b52:	f002 0310 	and.w	r3, r2, #16
 8105b56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8105b5a:	2300      	movs	r3, #0
 8105b5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8105b60:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8105b64:	460b      	mov	r3, r1
 8105b66:	4313      	orrs	r3, r2
 8105b68:	d01e      	beq.n	8105ba8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8105b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105b76:	d10c      	bne.n	8105b92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b7c:	3328      	adds	r3, #40	; 0x28
 8105b7e:	2102      	movs	r1, #2
 8105b80:	4618      	mov	r0, r3
 8105b82:	f000 fe25 	bl	81067d0 <RCCEx_PLL3_Config>
 8105b86:	4603      	mov	r3, r0
 8105b88:	2b00      	cmp	r3, #0
 8105b8a:	d002      	beq.n	8105b92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8105b8c:	2301      	movs	r3, #1
 8105b8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105b92:	4b70      	ldr	r3, [pc, #448]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8105b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105ba2:	4a6c      	ldr	r2, [pc, #432]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105ba4:	430b      	orrs	r3, r1
 8105ba6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bb0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8105bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8105bb8:	2300      	movs	r3, #0
 8105bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8105bbe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8105bc2:	460b      	mov	r3, r1
 8105bc4:	4313      	orrs	r3, r2
 8105bc6:	d03e      	beq.n	8105c46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8105bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105bd4:	d022      	beq.n	8105c1c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8105bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105bda:	d81b      	bhi.n	8105c14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8105bdc:	2b00      	cmp	r3, #0
 8105bde:	d003      	beq.n	8105be8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8105be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105be4:	d00b      	beq.n	8105bfe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8105be6:	e015      	b.n	8105c14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bec:	3308      	adds	r3, #8
 8105bee:	2100      	movs	r1, #0
 8105bf0:	4618      	mov	r0, r3
 8105bf2:	f000 fd3b 	bl	810666c <RCCEx_PLL2_Config>
 8105bf6:	4603      	mov	r3, r0
 8105bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105bfc:	e00f      	b.n	8105c1e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c02:	3328      	adds	r3, #40	; 0x28
 8105c04:	2102      	movs	r1, #2
 8105c06:	4618      	mov	r0, r3
 8105c08:	f000 fde2 	bl	81067d0 <RCCEx_PLL3_Config>
 8105c0c:	4603      	mov	r3, r0
 8105c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105c12:	e004      	b.n	8105c1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105c14:	2301      	movs	r3, #1
 8105c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105c1a:	e000      	b.n	8105c1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8105c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c22:	2b00      	cmp	r3, #0
 8105c24:	d10b      	bne.n	8105c3e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105c26:	4b4b      	ldr	r3, [pc, #300]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105c2a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8105c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105c36:	4a47      	ldr	r2, [pc, #284]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105c38:	430b      	orrs	r3, r1
 8105c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8105c3c:	e003      	b.n	8105c46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c4e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8105c52:	67bb      	str	r3, [r7, #120]	; 0x78
 8105c54:	2300      	movs	r3, #0
 8105c56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8105c58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8105c5c:	460b      	mov	r3, r1
 8105c5e:	4313      	orrs	r3, r2
 8105c60:	d03b      	beq.n	8105cda <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8105c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105c6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105c6e:	d01f      	beq.n	8105cb0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8105c70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105c74:	d818      	bhi.n	8105ca8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8105c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105c7a:	d003      	beq.n	8105c84 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8105c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105c80:	d007      	beq.n	8105c92 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8105c82:	e011      	b.n	8105ca8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c84:	4b33      	ldr	r3, [pc, #204]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c88:	4a32      	ldr	r2, [pc, #200]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8105c90:	e00f      	b.n	8105cb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c96:	3328      	adds	r3, #40	; 0x28
 8105c98:	2101      	movs	r1, #1
 8105c9a:	4618      	mov	r0, r3
 8105c9c:	f000 fd98 	bl	81067d0 <RCCEx_PLL3_Config>
 8105ca0:	4603      	mov	r3, r0
 8105ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8105ca6:	e004      	b.n	8105cb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105ca8:	2301      	movs	r3, #1
 8105caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105cae:	e000      	b.n	8105cb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8105cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105cb6:	2b00      	cmp	r3, #0
 8105cb8:	d10b      	bne.n	8105cd2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8105cba:	4b26      	ldr	r3, [pc, #152]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105cbe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8105cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105cca:	4a22      	ldr	r2, [pc, #136]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105ccc:	430b      	orrs	r3, r1
 8105cce:	6553      	str	r3, [r2, #84]	; 0x54
 8105cd0:	e003      	b.n	8105cda <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105cd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ce2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8105ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8105ce8:	2300      	movs	r3, #0
 8105cea:	677b      	str	r3, [r7, #116]	; 0x74
 8105cec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8105cf0:	460b      	mov	r3, r1
 8105cf2:	4313      	orrs	r3, r2
 8105cf4:	d034      	beq.n	8105d60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8105cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105cfc:	2b00      	cmp	r3, #0
 8105cfe:	d003      	beq.n	8105d08 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8105d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105d04:	d007      	beq.n	8105d16 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8105d06:	e011      	b.n	8105d2c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d08:	4b12      	ldr	r3, [pc, #72]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d0c:	4a11      	ldr	r2, [pc, #68]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105d12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105d14:	e00e      	b.n	8105d34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d1a:	3308      	adds	r3, #8
 8105d1c:	2102      	movs	r1, #2
 8105d1e:	4618      	mov	r0, r3
 8105d20:	f000 fca4 	bl	810666c <RCCEx_PLL2_Config>
 8105d24:	4603      	mov	r3, r0
 8105d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105d2a:	e003      	b.n	8105d34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8105d2c:	2301      	movs	r3, #1
 8105d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105d34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105d38:	2b00      	cmp	r3, #0
 8105d3a:	d10d      	bne.n	8105d58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105d3c:	4b05      	ldr	r3, [pc, #20]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105d4a:	4a02      	ldr	r2, [pc, #8]	; (8105d54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105d4c:	430b      	orrs	r3, r1
 8105d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8105d50:	e006      	b.n	8105d60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8105d52:	bf00      	nop
 8105d54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105d5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d68:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8105d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8105d6e:	2300      	movs	r3, #0
 8105d70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8105d72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8105d76:	460b      	mov	r3, r1
 8105d78:	4313      	orrs	r3, r2
 8105d7a:	d00c      	beq.n	8105d96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d80:	3328      	adds	r3, #40	; 0x28
 8105d82:	2102      	movs	r1, #2
 8105d84:	4618      	mov	r0, r3
 8105d86:	f000 fd23 	bl	81067d0 <RCCEx_PLL3_Config>
 8105d8a:	4603      	mov	r3, r0
 8105d8c:	2b00      	cmp	r3, #0
 8105d8e:	d002      	beq.n	8105d96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8105d90:	2301      	movs	r3, #1
 8105d92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d9e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8105da2:	663b      	str	r3, [r7, #96]	; 0x60
 8105da4:	2300      	movs	r3, #0
 8105da6:	667b      	str	r3, [r7, #100]	; 0x64
 8105da8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8105dac:	460b      	mov	r3, r1
 8105dae:	4313      	orrs	r3, r2
 8105db0:	d038      	beq.n	8105e24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8105db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105dbe:	d018      	beq.n	8105df2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8105dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105dc4:	d811      	bhi.n	8105dea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8105dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105dca:	d014      	beq.n	8105df6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8105dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105dd0:	d80b      	bhi.n	8105dea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8105dd2:	2b00      	cmp	r3, #0
 8105dd4:	d011      	beq.n	8105dfa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8105dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105dda:	d106      	bne.n	8105dea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ddc:	4bc3      	ldr	r3, [pc, #780]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105de0:	4ac2      	ldr	r2, [pc, #776]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8105de8:	e008      	b.n	8105dfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105dea:	2301      	movs	r3, #1
 8105dec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105df0:	e004      	b.n	8105dfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105df2:	bf00      	nop
 8105df4:	e002      	b.n	8105dfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105df6:	bf00      	nop
 8105df8:	e000      	b.n	8105dfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e00:	2b00      	cmp	r3, #0
 8105e02:	d10b      	bne.n	8105e1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105e04:	4bb9      	ldr	r3, [pc, #740]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105e08:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8105e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105e14:	4ab5      	ldr	r2, [pc, #724]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105e16:	430b      	orrs	r3, r1
 8105e18:	6553      	str	r3, [r2, #84]	; 0x54
 8105e1a:	e003      	b.n	8105e24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e2c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8105e30:	65bb      	str	r3, [r7, #88]	; 0x58
 8105e32:	2300      	movs	r3, #0
 8105e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8105e36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8105e3a:	460b      	mov	r3, r1
 8105e3c:	4313      	orrs	r3, r2
 8105e3e:	d009      	beq.n	8105e54 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105e40:	4baa      	ldr	r3, [pc, #680]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105e44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8105e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105e4e:	4aa7      	ldr	r2, [pc, #668]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105e50:	430b      	orrs	r3, r1
 8105e52:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8105e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e5c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8105e60:	653b      	str	r3, [r7, #80]	; 0x50
 8105e62:	2300      	movs	r3, #0
 8105e64:	657b      	str	r3, [r7, #84]	; 0x54
 8105e66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8105e6a:	460b      	mov	r3, r1
 8105e6c:	4313      	orrs	r3, r2
 8105e6e:	d00a      	beq.n	8105e86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105e70:	4b9e      	ldr	r3, [pc, #632]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105e72:	691b      	ldr	r3, [r3, #16]
 8105e74:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8105e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8105e80:	4a9a      	ldr	r2, [pc, #616]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105e82:	430b      	orrs	r3, r1
 8105e84:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e8e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8105e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8105e94:	2300      	movs	r3, #0
 8105e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8105e98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8105e9c:	460b      	mov	r3, r1
 8105e9e:	4313      	orrs	r3, r2
 8105ea0:	d009      	beq.n	8105eb6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105ea2:	4b92      	ldr	r3, [pc, #584]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105ea6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8105eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105eb0:	4a8e      	ldr	r2, [pc, #568]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105eb2:	430b      	orrs	r3, r1
 8105eb4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ebe:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8105ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8105ec4:	2300      	movs	r3, #0
 8105ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8105ec8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8105ecc:	460b      	mov	r3, r1
 8105ece:	4313      	orrs	r3, r2
 8105ed0:	d00e      	beq.n	8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105ed2:	4b86      	ldr	r3, [pc, #536]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ed4:	691b      	ldr	r3, [r3, #16]
 8105ed6:	4a85      	ldr	r2, [pc, #532]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ed8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8105edc:	6113      	str	r3, [r2, #16]
 8105ede:	4b83      	ldr	r3, [pc, #524]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ee0:	6919      	ldr	r1, [r3, #16]
 8105ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ee6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8105eea:	4a80      	ldr	r2, [pc, #512]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105eec:	430b      	orrs	r3, r1
 8105eee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ef8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8105efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8105efe:	2300      	movs	r3, #0
 8105f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105f02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8105f06:	460b      	mov	r3, r1
 8105f08:	4313      	orrs	r3, r2
 8105f0a:	d009      	beq.n	8105f20 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105f0c:	4b77      	ldr	r3, [pc, #476]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105f10:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8105f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105f1a:	4a74      	ldr	r2, [pc, #464]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105f1c:	430b      	orrs	r3, r1
 8105f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f28:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8105f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8105f2e:	2300      	movs	r3, #0
 8105f30:	637b      	str	r3, [r7, #52]	; 0x34
 8105f32:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8105f36:	460b      	mov	r3, r1
 8105f38:	4313      	orrs	r3, r2
 8105f3a:	d00a      	beq.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105f3c:	4b6b      	ldr	r3, [pc, #428]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105f40:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8105f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105f4c:	4a67      	ldr	r2, [pc, #412]	; (81060ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105f4e:	430b      	orrs	r3, r1
 8105f50:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8105f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f5a:	2100      	movs	r1, #0
 8105f5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8105f5e:	f003 0301 	and.w	r3, r3, #1
 8105f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8105f64:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8105f68:	460b      	mov	r3, r1
 8105f6a:	4313      	orrs	r3, r2
 8105f6c:	d011      	beq.n	8105f92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f72:	3308      	adds	r3, #8
 8105f74:	2100      	movs	r1, #0
 8105f76:	4618      	mov	r0, r3
 8105f78:	f000 fb78 	bl	810666c <RCCEx_PLL2_Config>
 8105f7c:	4603      	mov	r3, r0
 8105f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f86:	2b00      	cmp	r3, #0
 8105f88:	d003      	beq.n	8105f92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f9a:	2100      	movs	r1, #0
 8105f9c:	6239      	str	r1, [r7, #32]
 8105f9e:	f003 0302 	and.w	r3, r3, #2
 8105fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8105fa4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8105fa8:	460b      	mov	r3, r1
 8105faa:	4313      	orrs	r3, r2
 8105fac:	d011      	beq.n	8105fd2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105fb2:	3308      	adds	r3, #8
 8105fb4:	2101      	movs	r1, #1
 8105fb6:	4618      	mov	r0, r3
 8105fb8:	f000 fb58 	bl	810666c <RCCEx_PLL2_Config>
 8105fbc:	4603      	mov	r3, r0
 8105fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105fc6:	2b00      	cmp	r3, #0
 8105fc8:	d003      	beq.n	8105fd2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105fce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8105fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105fda:	2100      	movs	r1, #0
 8105fdc:	61b9      	str	r1, [r7, #24]
 8105fde:	f003 0304 	and.w	r3, r3, #4
 8105fe2:	61fb      	str	r3, [r7, #28]
 8105fe4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8105fe8:	460b      	mov	r3, r1
 8105fea:	4313      	orrs	r3, r2
 8105fec:	d011      	beq.n	8106012 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ff2:	3308      	adds	r3, #8
 8105ff4:	2102      	movs	r1, #2
 8105ff6:	4618      	mov	r0, r3
 8105ff8:	f000 fb38 	bl	810666c <RCCEx_PLL2_Config>
 8105ffc:	4603      	mov	r3, r0
 8105ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106006:	2b00      	cmp	r3, #0
 8106008:	d003      	beq.n	8106012 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810600a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810600e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8106012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106016:	e9d3 2300 	ldrd	r2, r3, [r3]
 810601a:	2100      	movs	r1, #0
 810601c:	6139      	str	r1, [r7, #16]
 810601e:	f003 0308 	and.w	r3, r3, #8
 8106022:	617b      	str	r3, [r7, #20]
 8106024:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8106028:	460b      	mov	r3, r1
 810602a:	4313      	orrs	r3, r2
 810602c:	d011      	beq.n	8106052 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106032:	3328      	adds	r3, #40	; 0x28
 8106034:	2100      	movs	r1, #0
 8106036:	4618      	mov	r0, r3
 8106038:	f000 fbca 	bl	81067d0 <RCCEx_PLL3_Config>
 810603c:	4603      	mov	r3, r0
 810603e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8106042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106046:	2b00      	cmp	r3, #0
 8106048:	d003      	beq.n	8106052 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810604a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810604e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8106052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106056:	e9d3 2300 	ldrd	r2, r3, [r3]
 810605a:	2100      	movs	r1, #0
 810605c:	60b9      	str	r1, [r7, #8]
 810605e:	f003 0310 	and.w	r3, r3, #16
 8106062:	60fb      	str	r3, [r7, #12]
 8106064:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8106068:	460b      	mov	r3, r1
 810606a:	4313      	orrs	r3, r2
 810606c:	d011      	beq.n	8106092 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810606e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106072:	3328      	adds	r3, #40	; 0x28
 8106074:	2101      	movs	r1, #1
 8106076:	4618      	mov	r0, r3
 8106078:	f000 fbaa 	bl	81067d0 <RCCEx_PLL3_Config>
 810607c:	4603      	mov	r3, r0
 810607e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8106082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106086:	2b00      	cmp	r3, #0
 8106088:	d003      	beq.n	8106092 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810608a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810608e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8106092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106096:	e9d3 2300 	ldrd	r2, r3, [r3]
 810609a:	2100      	movs	r1, #0
 810609c:	6039      	str	r1, [r7, #0]
 810609e:	f003 0320 	and.w	r3, r3, #32
 81060a2:	607b      	str	r3, [r7, #4]
 81060a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 81060a8:	460b      	mov	r3, r1
 81060aa:	4313      	orrs	r3, r2
 81060ac:	d011      	beq.n	81060d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81060ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060b2:	3328      	adds	r3, #40	; 0x28
 81060b4:	2102      	movs	r1, #2
 81060b6:	4618      	mov	r0, r3
 81060b8:	f000 fb8a 	bl	81067d0 <RCCEx_PLL3_Config>
 81060bc:	4603      	mov	r3, r0
 81060be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81060c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81060c6:	2b00      	cmp	r3, #0
 81060c8:	d003      	beq.n	81060d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81060ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 81060d2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 81060d6:	2b00      	cmp	r3, #0
 81060d8:	d101      	bne.n	81060de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81060da:	2300      	movs	r3, #0
 81060dc:	e000      	b.n	81060e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81060de:	2301      	movs	r3, #1
}
 81060e0:	4618      	mov	r0, r3
 81060e2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 81060e6:	46bd      	mov	sp, r7
 81060e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81060ec:	58024400 	.word	0x58024400

081060f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81060f0:	b580      	push	{r7, lr}
 81060f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81060f4:	f7fe fd94 	bl	8104c20 <HAL_RCC_GetHCLKFreq>
 81060f8:	4602      	mov	r2, r0
 81060fa:	4b06      	ldr	r3, [pc, #24]	; (8106114 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81060fc:	6a1b      	ldr	r3, [r3, #32]
 81060fe:	091b      	lsrs	r3, r3, #4
 8106100:	f003 0307 	and.w	r3, r3, #7
 8106104:	4904      	ldr	r1, [pc, #16]	; (8106118 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8106106:	5ccb      	ldrb	r3, [r1, r3]
 8106108:	f003 031f 	and.w	r3, r3, #31
 810610c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106110:	4618      	mov	r0, r3
 8106112:	bd80      	pop	{r7, pc}
 8106114:	58024400 	.word	0x58024400
 8106118:	0810e830 	.word	0x0810e830

0810611c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810611c:	b480      	push	{r7}
 810611e:	b089      	sub	sp, #36	; 0x24
 8106120:	af00      	add	r7, sp, #0
 8106122:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106124:	4ba1      	ldr	r3, [pc, #644]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106128:	f003 0303 	and.w	r3, r3, #3
 810612c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810612e:	4b9f      	ldr	r3, [pc, #636]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106132:	0b1b      	lsrs	r3, r3, #12
 8106134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106138:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810613a:	4b9c      	ldr	r3, [pc, #624]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810613e:	091b      	lsrs	r3, r3, #4
 8106140:	f003 0301 	and.w	r3, r3, #1
 8106144:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8106146:	4b99      	ldr	r3, [pc, #612]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810614a:	08db      	lsrs	r3, r3, #3
 810614c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106150:	693a      	ldr	r2, [r7, #16]
 8106152:	fb02 f303 	mul.w	r3, r2, r3
 8106156:	ee07 3a90 	vmov	s15, r3
 810615a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810615e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106162:	697b      	ldr	r3, [r7, #20]
 8106164:	2b00      	cmp	r3, #0
 8106166:	f000 8111 	beq.w	810638c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810616a:	69bb      	ldr	r3, [r7, #24]
 810616c:	2b02      	cmp	r3, #2
 810616e:	f000 8083 	beq.w	8106278 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8106172:	69bb      	ldr	r3, [r7, #24]
 8106174:	2b02      	cmp	r3, #2
 8106176:	f200 80a1 	bhi.w	81062bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810617a:	69bb      	ldr	r3, [r7, #24]
 810617c:	2b00      	cmp	r3, #0
 810617e:	d003      	beq.n	8106188 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106180:	69bb      	ldr	r3, [r7, #24]
 8106182:	2b01      	cmp	r3, #1
 8106184:	d056      	beq.n	8106234 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8106186:	e099      	b.n	81062bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106188:	4b88      	ldr	r3, [pc, #544]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810618a:	681b      	ldr	r3, [r3, #0]
 810618c:	f003 0320 	and.w	r3, r3, #32
 8106190:	2b00      	cmp	r3, #0
 8106192:	d02d      	beq.n	81061f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106194:	4b85      	ldr	r3, [pc, #532]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106196:	681b      	ldr	r3, [r3, #0]
 8106198:	08db      	lsrs	r3, r3, #3
 810619a:	f003 0303 	and.w	r3, r3, #3
 810619e:	4a84      	ldr	r2, [pc, #528]	; (81063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81061a0:	fa22 f303 	lsr.w	r3, r2, r3
 81061a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81061a6:	68bb      	ldr	r3, [r7, #8]
 81061a8:	ee07 3a90 	vmov	s15, r3
 81061ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061b0:	697b      	ldr	r3, [r7, #20]
 81061b2:	ee07 3a90 	vmov	s15, r3
 81061b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061be:	4b7b      	ldr	r3, [pc, #492]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81061c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81061c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061c6:	ee07 3a90 	vmov	s15, r3
 81061ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81061d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81061d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81061da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81061de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81061e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81061e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81061ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81061ee:	e087      	b.n	8106300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81061f0:	697b      	ldr	r3, [r7, #20]
 81061f2:	ee07 3a90 	vmov	s15, r3
 81061f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81061fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106202:	4b6a      	ldr	r3, [pc, #424]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810620a:	ee07 3a90 	vmov	s15, r3
 810620e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106212:	ed97 6a03 	vldr	s12, [r7, #12]
 8106216:	eddf 5a67 	vldr	s11, [pc, #412]	; 81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810621a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810621e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810622a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810622e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106232:	e065      	b.n	8106300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106234:	697b      	ldr	r3, [r7, #20]
 8106236:	ee07 3a90 	vmov	s15, r3
 810623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810623e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81063bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106246:	4b59      	ldr	r3, [pc, #356]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810624a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810624e:	ee07 3a90 	vmov	s15, r3
 8106252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106256:	ed97 6a03 	vldr	s12, [r7, #12]
 810625a:	eddf 5a56 	vldr	s11, [pc, #344]	; 81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810625e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810626a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810626e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106276:	e043      	b.n	8106300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106278:	697b      	ldr	r3, [r7, #20]
 810627a:	ee07 3a90 	vmov	s15, r3
 810627e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106282:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81063c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8106286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810628a:	4b48      	ldr	r3, [pc, #288]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810628e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106292:	ee07 3a90 	vmov	s15, r3
 8106296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810629a:	ed97 6a03 	vldr	s12, [r7, #12]
 810629e:	eddf 5a45 	vldr	s11, [pc, #276]	; 81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81062a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81062a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81062aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81062ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81062b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81062b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81062ba:	e021      	b.n	8106300 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81062bc:	697b      	ldr	r3, [r7, #20]
 81062be:	ee07 3a90 	vmov	s15, r3
 81062c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81063bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81062ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81062ce:	4b37      	ldr	r3, [pc, #220]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81062d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81062d6:	ee07 3a90 	vmov	s15, r3
 81062da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062de:	ed97 6a03 	vldr	s12, [r7, #12]
 81062e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81062e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81062ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81062ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81062f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81062f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81062fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81062fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8106300:	4b2a      	ldr	r3, [pc, #168]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106304:	0a5b      	lsrs	r3, r3, #9
 8106306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810630a:	ee07 3a90 	vmov	s15, r3
 810630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106316:	ee37 7a87 	vadd.f32	s14, s15, s14
 810631a:	edd7 6a07 	vldr	s13, [r7, #28]
 810631e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106326:	ee17 2a90 	vmov	r2, s15
 810632a:	687b      	ldr	r3, [r7, #4]
 810632c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810632e:	4b1f      	ldr	r3, [pc, #124]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106332:	0c1b      	lsrs	r3, r3, #16
 8106334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106338:	ee07 3a90 	vmov	s15, r3
 810633c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106344:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106348:	edd7 6a07 	vldr	s13, [r7, #28]
 810634c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106354:	ee17 2a90 	vmov	r2, s15
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810635c:	4b13      	ldr	r3, [pc, #76]	; (81063ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106360:	0e1b      	lsrs	r3, r3, #24
 8106362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106366:	ee07 3a90 	vmov	s15, r3
 810636a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810636e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106372:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106376:	edd7 6a07 	vldr	s13, [r7, #28]
 810637a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810637e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106382:	ee17 2a90 	vmov	r2, s15
 8106386:	687b      	ldr	r3, [r7, #4]
 8106388:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810638a:	e008      	b.n	810639e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	2200      	movs	r2, #0
 8106390:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	2200      	movs	r2, #0
 8106396:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106398:	687b      	ldr	r3, [r7, #4]
 810639a:	2200      	movs	r2, #0
 810639c:	609a      	str	r2, [r3, #8]
}
 810639e:	bf00      	nop
 81063a0:	3724      	adds	r7, #36	; 0x24
 81063a2:	46bd      	mov	sp, r7
 81063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063a8:	4770      	bx	lr
 81063aa:	bf00      	nop
 81063ac:	58024400 	.word	0x58024400
 81063b0:	03d09000 	.word	0x03d09000
 81063b4:	46000000 	.word	0x46000000
 81063b8:	4c742400 	.word	0x4c742400
 81063bc:	4a742400 	.word	0x4a742400
 81063c0:	4bbebc20 	.word	0x4bbebc20

081063c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81063c4:	b480      	push	{r7}
 81063c6:	b089      	sub	sp, #36	; 0x24
 81063c8:	af00      	add	r7, sp, #0
 81063ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81063cc:	4ba1      	ldr	r3, [pc, #644]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81063d0:	f003 0303 	and.w	r3, r3, #3
 81063d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81063d6:	4b9f      	ldr	r3, [pc, #636]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81063da:	0d1b      	lsrs	r3, r3, #20
 81063dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81063e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81063e2:	4b9c      	ldr	r3, [pc, #624]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81063e6:	0a1b      	lsrs	r3, r3, #8
 81063e8:	f003 0301 	and.w	r3, r3, #1
 81063ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81063ee:	4b99      	ldr	r3, [pc, #612]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81063f2:	08db      	lsrs	r3, r3, #3
 81063f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81063f8:	693a      	ldr	r2, [r7, #16]
 81063fa:	fb02 f303 	mul.w	r3, r2, r3
 81063fe:	ee07 3a90 	vmov	s15, r3
 8106402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106406:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810640a:	697b      	ldr	r3, [r7, #20]
 810640c:	2b00      	cmp	r3, #0
 810640e:	f000 8111 	beq.w	8106634 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8106412:	69bb      	ldr	r3, [r7, #24]
 8106414:	2b02      	cmp	r3, #2
 8106416:	f000 8083 	beq.w	8106520 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810641a:	69bb      	ldr	r3, [r7, #24]
 810641c:	2b02      	cmp	r3, #2
 810641e:	f200 80a1 	bhi.w	8106564 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8106422:	69bb      	ldr	r3, [r7, #24]
 8106424:	2b00      	cmp	r3, #0
 8106426:	d003      	beq.n	8106430 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106428:	69bb      	ldr	r3, [r7, #24]
 810642a:	2b01      	cmp	r3, #1
 810642c:	d056      	beq.n	81064dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810642e:	e099      	b.n	8106564 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106430:	4b88      	ldr	r3, [pc, #544]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106432:	681b      	ldr	r3, [r3, #0]
 8106434:	f003 0320 	and.w	r3, r3, #32
 8106438:	2b00      	cmp	r3, #0
 810643a:	d02d      	beq.n	8106498 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810643c:	4b85      	ldr	r3, [pc, #532]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810643e:	681b      	ldr	r3, [r3, #0]
 8106440:	08db      	lsrs	r3, r3, #3
 8106442:	f003 0303 	and.w	r3, r3, #3
 8106446:	4a84      	ldr	r2, [pc, #528]	; (8106658 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106448:	fa22 f303 	lsr.w	r3, r2, r3
 810644c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810644e:	68bb      	ldr	r3, [r7, #8]
 8106450:	ee07 3a90 	vmov	s15, r3
 8106454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106458:	697b      	ldr	r3, [r7, #20]
 810645a:	ee07 3a90 	vmov	s15, r3
 810645e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106466:	4b7b      	ldr	r3, [pc, #492]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810646a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810646e:	ee07 3a90 	vmov	s15, r3
 8106472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106476:	ed97 6a03 	vldr	s12, [r7, #12]
 810647a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810665c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810647e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810648a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810648e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106492:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8106496:	e087      	b.n	81065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106498:	697b      	ldr	r3, [r7, #20]
 810649a:	ee07 3a90 	vmov	s15, r3
 810649e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106660 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81064a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064aa:	4b6a      	ldr	r3, [pc, #424]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81064ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064b2:	ee07 3a90 	vmov	s15, r3
 81064b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064ba:	ed97 6a03 	vldr	s12, [r7, #12]
 81064be:	eddf 5a67 	vldr	s11, [pc, #412]	; 810665c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81064c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81064ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81064da:	e065      	b.n	81065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81064dc:	697b      	ldr	r3, [r7, #20]
 81064de:	ee07 3a90 	vmov	s15, r3
 81064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106664 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81064ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064ee:	4b59      	ldr	r3, [pc, #356]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81064f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064f6:	ee07 3a90 	vmov	s15, r3
 81064fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8106502:	eddf 5a56 	vldr	s11, [pc, #344]	; 810665c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810650a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810650e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106516:	ee67 7a27 	vmul.f32	s15, s14, s15
 810651a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810651e:	e043      	b.n	81065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106520:	697b      	ldr	r3, [r7, #20]
 8106522:	ee07 3a90 	vmov	s15, r3
 8106526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810652a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106668 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810652e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106532:	4b48      	ldr	r3, [pc, #288]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810653a:	ee07 3a90 	vmov	s15, r3
 810653e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106542:	ed97 6a03 	vldr	s12, [r7, #12]
 8106546:	eddf 5a45 	vldr	s11, [pc, #276]	; 810665c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810654a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810654e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810655a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810655e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106562:	e021      	b.n	81065a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106564:	697b      	ldr	r3, [r7, #20]
 8106566:	ee07 3a90 	vmov	s15, r3
 810656a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810656e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106664 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106576:	4b37      	ldr	r3, [pc, #220]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810657a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810657e:	ee07 3a90 	vmov	s15, r3
 8106582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106586:	ed97 6a03 	vldr	s12, [r7, #12]
 810658a:	eddf 5a34 	vldr	s11, [pc, #208]	; 810665c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810658e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810659a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810659e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81065a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81065a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81065a8:	4b2a      	ldr	r3, [pc, #168]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81065ac:	0a5b      	lsrs	r3, r3, #9
 81065ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81065b2:	ee07 3a90 	vmov	s15, r3
 81065b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81065be:	ee37 7a87 	vadd.f32	s14, s15, s14
 81065c2:	edd7 6a07 	vldr	s13, [r7, #28]
 81065c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81065ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81065ce:	ee17 2a90 	vmov	r2, s15
 81065d2:	687b      	ldr	r3, [r7, #4]
 81065d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81065d6:	4b1f      	ldr	r3, [pc, #124]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81065da:	0c1b      	lsrs	r3, r3, #16
 81065dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81065e0:	ee07 3a90 	vmov	s15, r3
 81065e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81065ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 81065f0:	edd7 6a07 	vldr	s13, [r7, #28]
 81065f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81065f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81065fc:	ee17 2a90 	vmov	r2, s15
 8106600:	687b      	ldr	r3, [r7, #4]
 8106602:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8106604:	4b13      	ldr	r3, [pc, #76]	; (8106654 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106608:	0e1b      	lsrs	r3, r3, #24
 810660a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810660e:	ee07 3a90 	vmov	s15, r3
 8106612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810661a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810661e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810662a:	ee17 2a90 	vmov	r2, s15
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106632:	e008      	b.n	8106646 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106634:	687b      	ldr	r3, [r7, #4]
 8106636:	2200      	movs	r2, #0
 8106638:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810663a:	687b      	ldr	r3, [r7, #4]
 810663c:	2200      	movs	r2, #0
 810663e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106640:	687b      	ldr	r3, [r7, #4]
 8106642:	2200      	movs	r2, #0
 8106644:	609a      	str	r2, [r3, #8]
}
 8106646:	bf00      	nop
 8106648:	3724      	adds	r7, #36	; 0x24
 810664a:	46bd      	mov	sp, r7
 810664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106650:	4770      	bx	lr
 8106652:	bf00      	nop
 8106654:	58024400 	.word	0x58024400
 8106658:	03d09000 	.word	0x03d09000
 810665c:	46000000 	.word	0x46000000
 8106660:	4c742400 	.word	0x4c742400
 8106664:	4a742400 	.word	0x4a742400
 8106668:	4bbebc20 	.word	0x4bbebc20

0810666c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810666c:	b580      	push	{r7, lr}
 810666e:	b084      	sub	sp, #16
 8106670:	af00      	add	r7, sp, #0
 8106672:	6078      	str	r0, [r7, #4]
 8106674:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106676:	2300      	movs	r3, #0
 8106678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810667a:	4b54      	ldr	r3, [pc, #336]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 810667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810667e:	f003 0303 	and.w	r3, r3, #3
 8106682:	2b03      	cmp	r3, #3
 8106684:	d101      	bne.n	810668a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8106686:	2301      	movs	r3, #1
 8106688:	e09b      	b.n	81067c2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810668a:	4b50      	ldr	r3, [pc, #320]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 810668c:	681b      	ldr	r3, [r3, #0]
 810668e:	4a4f      	ldr	r2, [pc, #316]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106690:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8106694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106696:	f7fc ff6d 	bl	8103574 <HAL_GetTick>
 810669a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810669c:	e008      	b.n	81066b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810669e:	f7fc ff69 	bl	8103574 <HAL_GetTick>
 81066a2:	4602      	mov	r2, r0
 81066a4:	68bb      	ldr	r3, [r7, #8]
 81066a6:	1ad3      	subs	r3, r2, r3
 81066a8:	2b02      	cmp	r3, #2
 81066aa:	d901      	bls.n	81066b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81066ac:	2303      	movs	r3, #3
 81066ae:	e088      	b.n	81067c2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81066b0:	4b46      	ldr	r3, [pc, #280]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 81066b2:	681b      	ldr	r3, [r3, #0]
 81066b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81066b8:	2b00      	cmp	r3, #0
 81066ba:	d1f0      	bne.n	810669e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81066bc:	4b43      	ldr	r3, [pc, #268]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 81066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81066c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	681b      	ldr	r3, [r3, #0]
 81066c8:	031b      	lsls	r3, r3, #12
 81066ca:	4940      	ldr	r1, [pc, #256]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 81066cc:	4313      	orrs	r3, r2
 81066ce:	628b      	str	r3, [r1, #40]	; 0x28
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	685b      	ldr	r3, [r3, #4]
 81066d4:	3b01      	subs	r3, #1
 81066d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81066da:	687b      	ldr	r3, [r7, #4]
 81066dc:	689b      	ldr	r3, [r3, #8]
 81066de:	3b01      	subs	r3, #1
 81066e0:	025b      	lsls	r3, r3, #9
 81066e2:	b29b      	uxth	r3, r3
 81066e4:	431a      	orrs	r2, r3
 81066e6:	687b      	ldr	r3, [r7, #4]
 81066e8:	68db      	ldr	r3, [r3, #12]
 81066ea:	3b01      	subs	r3, #1
 81066ec:	041b      	lsls	r3, r3, #16
 81066ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81066f2:	431a      	orrs	r2, r3
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	691b      	ldr	r3, [r3, #16]
 81066f8:	3b01      	subs	r3, #1
 81066fa:	061b      	lsls	r3, r3, #24
 81066fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106700:	4932      	ldr	r1, [pc, #200]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106702:	4313      	orrs	r3, r2
 8106704:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8106706:	4b31      	ldr	r3, [pc, #196]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810670a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810670e:	687b      	ldr	r3, [r7, #4]
 8106710:	695b      	ldr	r3, [r3, #20]
 8106712:	492e      	ldr	r1, [pc, #184]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106714:	4313      	orrs	r3, r2
 8106716:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8106718:	4b2c      	ldr	r3, [pc, #176]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 810671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810671c:	f023 0220 	bic.w	r2, r3, #32
 8106720:	687b      	ldr	r3, [r7, #4]
 8106722:	699b      	ldr	r3, [r3, #24]
 8106724:	4929      	ldr	r1, [pc, #164]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106726:	4313      	orrs	r3, r2
 8106728:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810672a:	4b28      	ldr	r3, [pc, #160]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 810672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810672e:	4a27      	ldr	r2, [pc, #156]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106730:	f023 0310 	bic.w	r3, r3, #16
 8106734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8106736:	4b25      	ldr	r3, [pc, #148]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810673a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810673e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106742:	687a      	ldr	r2, [r7, #4]
 8106744:	69d2      	ldr	r2, [r2, #28]
 8106746:	00d2      	lsls	r2, r2, #3
 8106748:	4920      	ldr	r1, [pc, #128]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 810674a:	4313      	orrs	r3, r2
 810674c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810674e:	4b1f      	ldr	r3, [pc, #124]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106752:	4a1e      	ldr	r2, [pc, #120]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106754:	f043 0310 	orr.w	r3, r3, #16
 8106758:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810675a:	683b      	ldr	r3, [r7, #0]
 810675c:	2b00      	cmp	r3, #0
 810675e:	d106      	bne.n	810676e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106760:	4b1a      	ldr	r3, [pc, #104]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106764:	4a19      	ldr	r2, [pc, #100]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810676a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810676c:	e00f      	b.n	810678e <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810676e:	683b      	ldr	r3, [r7, #0]
 8106770:	2b01      	cmp	r3, #1
 8106772:	d106      	bne.n	8106782 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8106774:	4b15      	ldr	r3, [pc, #84]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106778:	4a14      	ldr	r2, [pc, #80]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 810677a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810677e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106780:	e005      	b.n	810678e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8106782:	4b12      	ldr	r3, [pc, #72]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106786:	4a11      	ldr	r2, [pc, #68]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810678c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810678e:	4b0f      	ldr	r3, [pc, #60]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106790:	681b      	ldr	r3, [r3, #0]
 8106792:	4a0e      	ldr	r2, [pc, #56]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 8106794:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8106798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810679a:	f7fc feeb 	bl	8103574 <HAL_GetTick>
 810679e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81067a0:	e008      	b.n	81067b4 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81067a2:	f7fc fee7 	bl	8103574 <HAL_GetTick>
 81067a6:	4602      	mov	r2, r0
 81067a8:	68bb      	ldr	r3, [r7, #8]
 81067aa:	1ad3      	subs	r3, r2, r3
 81067ac:	2b02      	cmp	r3, #2
 81067ae:	d901      	bls.n	81067b4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81067b0:	2303      	movs	r3, #3
 81067b2:	e006      	b.n	81067c2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81067b4:	4b05      	ldr	r3, [pc, #20]	; (81067cc <RCCEx_PLL2_Config+0x160>)
 81067b6:	681b      	ldr	r3, [r3, #0]
 81067b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81067bc:	2b00      	cmp	r3, #0
 81067be:	d0f0      	beq.n	81067a2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 81067c2:	4618      	mov	r0, r3
 81067c4:	3710      	adds	r7, #16
 81067c6:	46bd      	mov	sp, r7
 81067c8:	bd80      	pop	{r7, pc}
 81067ca:	bf00      	nop
 81067cc:	58024400 	.word	0x58024400

081067d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81067d0:	b580      	push	{r7, lr}
 81067d2:	b084      	sub	sp, #16
 81067d4:	af00      	add	r7, sp, #0
 81067d6:	6078      	str	r0, [r7, #4]
 81067d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81067da:	2300      	movs	r3, #0
 81067dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81067de:	4b54      	ldr	r3, [pc, #336]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81067e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81067e2:	f003 0303 	and.w	r3, r3, #3
 81067e6:	2b03      	cmp	r3, #3
 81067e8:	d101      	bne.n	81067ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81067ea:	2301      	movs	r3, #1
 81067ec:	e09b      	b.n	8106926 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81067ee:	4b50      	ldr	r3, [pc, #320]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81067f0:	681b      	ldr	r3, [r3, #0]
 81067f2:	4a4f      	ldr	r2, [pc, #316]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81067f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81067f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81067fa:	f7fc febb 	bl	8103574 <HAL_GetTick>
 81067fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106800:	e008      	b.n	8106814 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106802:	f7fc feb7 	bl	8103574 <HAL_GetTick>
 8106806:	4602      	mov	r2, r0
 8106808:	68bb      	ldr	r3, [r7, #8]
 810680a:	1ad3      	subs	r3, r2, r3
 810680c:	2b02      	cmp	r3, #2
 810680e:	d901      	bls.n	8106814 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106810:	2303      	movs	r3, #3
 8106812:	e088      	b.n	8106926 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106814:	4b46      	ldr	r3, [pc, #280]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 8106816:	681b      	ldr	r3, [r3, #0]
 8106818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810681c:	2b00      	cmp	r3, #0
 810681e:	d1f0      	bne.n	8106802 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106820:	4b43      	ldr	r3, [pc, #268]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 8106822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106824:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8106828:	687b      	ldr	r3, [r7, #4]
 810682a:	681b      	ldr	r3, [r3, #0]
 810682c:	051b      	lsls	r3, r3, #20
 810682e:	4940      	ldr	r1, [pc, #256]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 8106830:	4313      	orrs	r3, r2
 8106832:	628b      	str	r3, [r1, #40]	; 0x28
 8106834:	687b      	ldr	r3, [r7, #4]
 8106836:	685b      	ldr	r3, [r3, #4]
 8106838:	3b01      	subs	r3, #1
 810683a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810683e:	687b      	ldr	r3, [r7, #4]
 8106840:	689b      	ldr	r3, [r3, #8]
 8106842:	3b01      	subs	r3, #1
 8106844:	025b      	lsls	r3, r3, #9
 8106846:	b29b      	uxth	r3, r3
 8106848:	431a      	orrs	r2, r3
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	68db      	ldr	r3, [r3, #12]
 810684e:	3b01      	subs	r3, #1
 8106850:	041b      	lsls	r3, r3, #16
 8106852:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106856:	431a      	orrs	r2, r3
 8106858:	687b      	ldr	r3, [r7, #4]
 810685a:	691b      	ldr	r3, [r3, #16]
 810685c:	3b01      	subs	r3, #1
 810685e:	061b      	lsls	r3, r3, #24
 8106860:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106864:	4932      	ldr	r1, [pc, #200]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 8106866:	4313      	orrs	r3, r2
 8106868:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810686a:	4b31      	ldr	r3, [pc, #196]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 810686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810686e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8106872:	687b      	ldr	r3, [r7, #4]
 8106874:	695b      	ldr	r3, [r3, #20]
 8106876:	492e      	ldr	r1, [pc, #184]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 8106878:	4313      	orrs	r3, r2
 810687a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810687c:	4b2c      	ldr	r3, [pc, #176]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 810687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106880:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8106884:	687b      	ldr	r3, [r7, #4]
 8106886:	699b      	ldr	r3, [r3, #24]
 8106888:	4929      	ldr	r1, [pc, #164]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 810688a:	4313      	orrs	r3, r2
 810688c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810688e:	4b28      	ldr	r3, [pc, #160]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 8106890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106892:	4a27      	ldr	r2, [pc, #156]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 8106894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106898:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810689a:	4b25      	ldr	r3, [pc, #148]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 810689c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810689e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81068a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81068a6:	687a      	ldr	r2, [r7, #4]
 81068a8:	69d2      	ldr	r2, [r2, #28]
 81068aa:	00d2      	lsls	r2, r2, #3
 81068ac:	4920      	ldr	r1, [pc, #128]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81068ae:	4313      	orrs	r3, r2
 81068b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81068b2:	4b1f      	ldr	r3, [pc, #124]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068b6:	4a1e      	ldr	r2, [pc, #120]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81068b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81068bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81068be:	683b      	ldr	r3, [r7, #0]
 81068c0:	2b00      	cmp	r3, #0
 81068c2:	d106      	bne.n	81068d2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81068c4:	4b1a      	ldr	r3, [pc, #104]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068c8:	4a19      	ldr	r2, [pc, #100]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81068ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81068ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 81068d0:	e00f      	b.n	81068f2 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81068d2:	683b      	ldr	r3, [r7, #0]
 81068d4:	2b01      	cmp	r3, #1
 81068d6:	d106      	bne.n	81068e6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81068d8:	4b15      	ldr	r3, [pc, #84]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068dc:	4a14      	ldr	r2, [pc, #80]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81068de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81068e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81068e4:	e005      	b.n	81068f2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81068e6:	4b12      	ldr	r3, [pc, #72]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068ea:	4a11      	ldr	r2, [pc, #68]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81068ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81068f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81068f2:	4b0f      	ldr	r3, [pc, #60]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81068f4:	681b      	ldr	r3, [r3, #0]
 81068f6:	4a0e      	ldr	r2, [pc, #56]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 81068f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81068fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81068fe:	f7fc fe39 	bl	8103574 <HAL_GetTick>
 8106902:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106904:	e008      	b.n	8106918 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106906:	f7fc fe35 	bl	8103574 <HAL_GetTick>
 810690a:	4602      	mov	r2, r0
 810690c:	68bb      	ldr	r3, [r7, #8]
 810690e:	1ad3      	subs	r3, r2, r3
 8106910:	2b02      	cmp	r3, #2
 8106912:	d901      	bls.n	8106918 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106914:	2303      	movs	r3, #3
 8106916:	e006      	b.n	8106926 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106918:	4b05      	ldr	r3, [pc, #20]	; (8106930 <RCCEx_PLL3_Config+0x160>)
 810691a:	681b      	ldr	r3, [r3, #0]
 810691c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106920:	2b00      	cmp	r3, #0
 8106922:	d0f0      	beq.n	8106906 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106924:	7bfb      	ldrb	r3, [r7, #15]
}
 8106926:	4618      	mov	r0, r3
 8106928:	3710      	adds	r7, #16
 810692a:	46bd      	mov	sp, r7
 810692c:	bd80      	pop	{r7, pc}
 810692e:	bf00      	nop
 8106930:	58024400 	.word	0x58024400

08106934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106934:	b580      	push	{r7, lr}
 8106936:	b082      	sub	sp, #8
 8106938:	af00      	add	r7, sp, #0
 810693a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	2b00      	cmp	r3, #0
 8106940:	d101      	bne.n	8106946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106942:	2301      	movs	r3, #1
 8106944:	e049      	b.n	81069da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106946:	687b      	ldr	r3, [r7, #4]
 8106948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810694c:	b2db      	uxtb	r3, r3
 810694e:	2b00      	cmp	r3, #0
 8106950:	d106      	bne.n	8106960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106952:	687b      	ldr	r3, [r7, #4]
 8106954:	2200      	movs	r2, #0
 8106956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810695a:	6878      	ldr	r0, [r7, #4]
 810695c:	f7fc fa7c 	bl	8102e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	2202      	movs	r2, #2
 8106964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106968:	687b      	ldr	r3, [r7, #4]
 810696a:	681a      	ldr	r2, [r3, #0]
 810696c:	687b      	ldr	r3, [r7, #4]
 810696e:	3304      	adds	r3, #4
 8106970:	4619      	mov	r1, r3
 8106972:	4610      	mov	r0, r2
 8106974:	f001 f928 	bl	8107bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106978:	687b      	ldr	r3, [r7, #4]
 810697a:	2201      	movs	r2, #1
 810697c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106980:	687b      	ldr	r3, [r7, #4]
 8106982:	2201      	movs	r2, #1
 8106984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106988:	687b      	ldr	r3, [r7, #4]
 810698a:	2201      	movs	r2, #1
 810698c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106990:	687b      	ldr	r3, [r7, #4]
 8106992:	2201      	movs	r2, #1
 8106994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106998:	687b      	ldr	r3, [r7, #4]
 810699a:	2201      	movs	r2, #1
 810699c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81069a0:	687b      	ldr	r3, [r7, #4]
 81069a2:	2201      	movs	r2, #1
 81069a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81069a8:	687b      	ldr	r3, [r7, #4]
 81069aa:	2201      	movs	r2, #1
 81069ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81069b0:	687b      	ldr	r3, [r7, #4]
 81069b2:	2201      	movs	r2, #1
 81069b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81069b8:	687b      	ldr	r3, [r7, #4]
 81069ba:	2201      	movs	r2, #1
 81069bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81069c0:	687b      	ldr	r3, [r7, #4]
 81069c2:	2201      	movs	r2, #1
 81069c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	2201      	movs	r2, #1
 81069cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81069d0:	687b      	ldr	r3, [r7, #4]
 81069d2:	2201      	movs	r2, #1
 81069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81069d8:	2300      	movs	r3, #0
}
 81069da:	4618      	mov	r0, r3
 81069dc:	3708      	adds	r7, #8
 81069de:	46bd      	mov	sp, r7
 81069e0:	bd80      	pop	{r7, pc}
	...

081069e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81069e4:	b480      	push	{r7}
 81069e6:	b085      	sub	sp, #20
 81069e8:	af00      	add	r7, sp, #0
 81069ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81069ec:	687b      	ldr	r3, [r7, #4]
 81069ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81069f2:	b2db      	uxtb	r3, r3
 81069f4:	2b01      	cmp	r3, #1
 81069f6:	d001      	beq.n	81069fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81069f8:	2301      	movs	r3, #1
 81069fa:	e054      	b.n	8106aa6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81069fc:	687b      	ldr	r3, [r7, #4]
 81069fe:	2202      	movs	r2, #2
 8106a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106a04:	687b      	ldr	r3, [r7, #4]
 8106a06:	681b      	ldr	r3, [r3, #0]
 8106a08:	68da      	ldr	r2, [r3, #12]
 8106a0a:	687b      	ldr	r3, [r7, #4]
 8106a0c:	681b      	ldr	r3, [r3, #0]
 8106a0e:	f042 0201 	orr.w	r2, r2, #1
 8106a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106a14:	687b      	ldr	r3, [r7, #4]
 8106a16:	681b      	ldr	r3, [r3, #0]
 8106a18:	4a26      	ldr	r2, [pc, #152]	; (8106ab4 <HAL_TIM_Base_Start_IT+0xd0>)
 8106a1a:	4293      	cmp	r3, r2
 8106a1c:	d022      	beq.n	8106a64 <HAL_TIM_Base_Start_IT+0x80>
 8106a1e:	687b      	ldr	r3, [r7, #4]
 8106a20:	681b      	ldr	r3, [r3, #0]
 8106a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106a26:	d01d      	beq.n	8106a64 <HAL_TIM_Base_Start_IT+0x80>
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	681b      	ldr	r3, [r3, #0]
 8106a2c:	4a22      	ldr	r2, [pc, #136]	; (8106ab8 <HAL_TIM_Base_Start_IT+0xd4>)
 8106a2e:	4293      	cmp	r3, r2
 8106a30:	d018      	beq.n	8106a64 <HAL_TIM_Base_Start_IT+0x80>
 8106a32:	687b      	ldr	r3, [r7, #4]
 8106a34:	681b      	ldr	r3, [r3, #0]
 8106a36:	4a21      	ldr	r2, [pc, #132]	; (8106abc <HAL_TIM_Base_Start_IT+0xd8>)
 8106a38:	4293      	cmp	r3, r2
 8106a3a:	d013      	beq.n	8106a64 <HAL_TIM_Base_Start_IT+0x80>
 8106a3c:	687b      	ldr	r3, [r7, #4]
 8106a3e:	681b      	ldr	r3, [r3, #0]
 8106a40:	4a1f      	ldr	r2, [pc, #124]	; (8106ac0 <HAL_TIM_Base_Start_IT+0xdc>)
 8106a42:	4293      	cmp	r3, r2
 8106a44:	d00e      	beq.n	8106a64 <HAL_TIM_Base_Start_IT+0x80>
 8106a46:	687b      	ldr	r3, [r7, #4]
 8106a48:	681b      	ldr	r3, [r3, #0]
 8106a4a:	4a1e      	ldr	r2, [pc, #120]	; (8106ac4 <HAL_TIM_Base_Start_IT+0xe0>)
 8106a4c:	4293      	cmp	r3, r2
 8106a4e:	d009      	beq.n	8106a64 <HAL_TIM_Base_Start_IT+0x80>
 8106a50:	687b      	ldr	r3, [r7, #4]
 8106a52:	681b      	ldr	r3, [r3, #0]
 8106a54:	4a1c      	ldr	r2, [pc, #112]	; (8106ac8 <HAL_TIM_Base_Start_IT+0xe4>)
 8106a56:	4293      	cmp	r3, r2
 8106a58:	d004      	beq.n	8106a64 <HAL_TIM_Base_Start_IT+0x80>
 8106a5a:	687b      	ldr	r3, [r7, #4]
 8106a5c:	681b      	ldr	r3, [r3, #0]
 8106a5e:	4a1b      	ldr	r2, [pc, #108]	; (8106acc <HAL_TIM_Base_Start_IT+0xe8>)
 8106a60:	4293      	cmp	r3, r2
 8106a62:	d115      	bne.n	8106a90 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106a64:	687b      	ldr	r3, [r7, #4]
 8106a66:	681b      	ldr	r3, [r3, #0]
 8106a68:	689a      	ldr	r2, [r3, #8]
 8106a6a:	4b19      	ldr	r3, [pc, #100]	; (8106ad0 <HAL_TIM_Base_Start_IT+0xec>)
 8106a6c:	4013      	ands	r3, r2
 8106a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106a70:	68fb      	ldr	r3, [r7, #12]
 8106a72:	2b06      	cmp	r3, #6
 8106a74:	d015      	beq.n	8106aa2 <HAL_TIM_Base_Start_IT+0xbe>
 8106a76:	68fb      	ldr	r3, [r7, #12]
 8106a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106a7c:	d011      	beq.n	8106aa2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8106a7e:	687b      	ldr	r3, [r7, #4]
 8106a80:	681b      	ldr	r3, [r3, #0]
 8106a82:	681a      	ldr	r2, [r3, #0]
 8106a84:	687b      	ldr	r3, [r7, #4]
 8106a86:	681b      	ldr	r3, [r3, #0]
 8106a88:	f042 0201 	orr.w	r2, r2, #1
 8106a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106a8e:	e008      	b.n	8106aa2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106a90:	687b      	ldr	r3, [r7, #4]
 8106a92:	681b      	ldr	r3, [r3, #0]
 8106a94:	681a      	ldr	r2, [r3, #0]
 8106a96:	687b      	ldr	r3, [r7, #4]
 8106a98:	681b      	ldr	r3, [r3, #0]
 8106a9a:	f042 0201 	orr.w	r2, r2, #1
 8106a9e:	601a      	str	r2, [r3, #0]
 8106aa0:	e000      	b.n	8106aa4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106aa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106aa4:	2300      	movs	r3, #0
}
 8106aa6:	4618      	mov	r0, r3
 8106aa8:	3714      	adds	r7, #20
 8106aaa:	46bd      	mov	sp, r7
 8106aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ab0:	4770      	bx	lr
 8106ab2:	bf00      	nop
 8106ab4:	40010000 	.word	0x40010000
 8106ab8:	40000400 	.word	0x40000400
 8106abc:	40000800 	.word	0x40000800
 8106ac0:	40000c00 	.word	0x40000c00
 8106ac4:	40010400 	.word	0x40010400
 8106ac8:	40001800 	.word	0x40001800
 8106acc:	40014000 	.word	0x40014000
 8106ad0:	00010007 	.word	0x00010007

08106ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8106ad4:	b580      	push	{r7, lr}
 8106ad6:	b082      	sub	sp, #8
 8106ad8:	af00      	add	r7, sp, #0
 8106ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106adc:	687b      	ldr	r3, [r7, #4]
 8106ade:	2b00      	cmp	r3, #0
 8106ae0:	d101      	bne.n	8106ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8106ae2:	2301      	movs	r3, #1
 8106ae4:	e049      	b.n	8106b7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106ae6:	687b      	ldr	r3, [r7, #4]
 8106ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106aec:	b2db      	uxtb	r3, r3
 8106aee:	2b00      	cmp	r3, #0
 8106af0:	d106      	bne.n	8106b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106af2:	687b      	ldr	r3, [r7, #4]
 8106af4:	2200      	movs	r2, #0
 8106af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8106afa:	6878      	ldr	r0, [r7, #4]
 8106afc:	f000 f841 	bl	8106b82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106b00:	687b      	ldr	r3, [r7, #4]
 8106b02:	2202      	movs	r2, #2
 8106b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106b08:	687b      	ldr	r3, [r7, #4]
 8106b0a:	681a      	ldr	r2, [r3, #0]
 8106b0c:	687b      	ldr	r3, [r7, #4]
 8106b0e:	3304      	adds	r3, #4
 8106b10:	4619      	mov	r1, r3
 8106b12:	4610      	mov	r0, r2
 8106b14:	f001 f858 	bl	8107bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106b18:	687b      	ldr	r3, [r7, #4]
 8106b1a:	2201      	movs	r2, #1
 8106b1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106b20:	687b      	ldr	r3, [r7, #4]
 8106b22:	2201      	movs	r2, #1
 8106b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106b28:	687b      	ldr	r3, [r7, #4]
 8106b2a:	2201      	movs	r2, #1
 8106b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106b30:	687b      	ldr	r3, [r7, #4]
 8106b32:	2201      	movs	r2, #1
 8106b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106b38:	687b      	ldr	r3, [r7, #4]
 8106b3a:	2201      	movs	r2, #1
 8106b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	2201      	movs	r2, #1
 8106b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106b48:	687b      	ldr	r3, [r7, #4]
 8106b4a:	2201      	movs	r2, #1
 8106b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106b50:	687b      	ldr	r3, [r7, #4]
 8106b52:	2201      	movs	r2, #1
 8106b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	2201      	movs	r2, #1
 8106b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106b60:	687b      	ldr	r3, [r7, #4]
 8106b62:	2201      	movs	r2, #1
 8106b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	2201      	movs	r2, #1
 8106b6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106b70:	687b      	ldr	r3, [r7, #4]
 8106b72:	2201      	movs	r2, #1
 8106b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106b78:	2300      	movs	r3, #0
}
 8106b7a:	4618      	mov	r0, r3
 8106b7c:	3708      	adds	r7, #8
 8106b7e:	46bd      	mov	sp, r7
 8106b80:	bd80      	pop	{r7, pc}

08106b82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8106b82:	b480      	push	{r7}
 8106b84:	b083      	sub	sp, #12
 8106b86:	af00      	add	r7, sp, #0
 8106b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8106b8a:	bf00      	nop
 8106b8c:	370c      	adds	r7, #12
 8106b8e:	46bd      	mov	sp, r7
 8106b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b94:	4770      	bx	lr
	...

08106b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106b98:	b580      	push	{r7, lr}
 8106b9a:	b084      	sub	sp, #16
 8106b9c:	af00      	add	r7, sp, #0
 8106b9e:	6078      	str	r0, [r7, #4]
 8106ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8106ba2:	683b      	ldr	r3, [r7, #0]
 8106ba4:	2b00      	cmp	r3, #0
 8106ba6:	d109      	bne.n	8106bbc <HAL_TIM_PWM_Start+0x24>
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8106bae:	b2db      	uxtb	r3, r3
 8106bb0:	2b01      	cmp	r3, #1
 8106bb2:	bf14      	ite	ne
 8106bb4:	2301      	movne	r3, #1
 8106bb6:	2300      	moveq	r3, #0
 8106bb8:	b2db      	uxtb	r3, r3
 8106bba:	e03c      	b.n	8106c36 <HAL_TIM_PWM_Start+0x9e>
 8106bbc:	683b      	ldr	r3, [r7, #0]
 8106bbe:	2b04      	cmp	r3, #4
 8106bc0:	d109      	bne.n	8106bd6 <HAL_TIM_PWM_Start+0x3e>
 8106bc2:	687b      	ldr	r3, [r7, #4]
 8106bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8106bc8:	b2db      	uxtb	r3, r3
 8106bca:	2b01      	cmp	r3, #1
 8106bcc:	bf14      	ite	ne
 8106bce:	2301      	movne	r3, #1
 8106bd0:	2300      	moveq	r3, #0
 8106bd2:	b2db      	uxtb	r3, r3
 8106bd4:	e02f      	b.n	8106c36 <HAL_TIM_PWM_Start+0x9e>
 8106bd6:	683b      	ldr	r3, [r7, #0]
 8106bd8:	2b08      	cmp	r3, #8
 8106bda:	d109      	bne.n	8106bf0 <HAL_TIM_PWM_Start+0x58>
 8106bdc:	687b      	ldr	r3, [r7, #4]
 8106bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106be2:	b2db      	uxtb	r3, r3
 8106be4:	2b01      	cmp	r3, #1
 8106be6:	bf14      	ite	ne
 8106be8:	2301      	movne	r3, #1
 8106bea:	2300      	moveq	r3, #0
 8106bec:	b2db      	uxtb	r3, r3
 8106bee:	e022      	b.n	8106c36 <HAL_TIM_PWM_Start+0x9e>
 8106bf0:	683b      	ldr	r3, [r7, #0]
 8106bf2:	2b0c      	cmp	r3, #12
 8106bf4:	d109      	bne.n	8106c0a <HAL_TIM_PWM_Start+0x72>
 8106bf6:	687b      	ldr	r3, [r7, #4]
 8106bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106bfc:	b2db      	uxtb	r3, r3
 8106bfe:	2b01      	cmp	r3, #1
 8106c00:	bf14      	ite	ne
 8106c02:	2301      	movne	r3, #1
 8106c04:	2300      	moveq	r3, #0
 8106c06:	b2db      	uxtb	r3, r3
 8106c08:	e015      	b.n	8106c36 <HAL_TIM_PWM_Start+0x9e>
 8106c0a:	683b      	ldr	r3, [r7, #0]
 8106c0c:	2b10      	cmp	r3, #16
 8106c0e:	d109      	bne.n	8106c24 <HAL_TIM_PWM_Start+0x8c>
 8106c10:	687b      	ldr	r3, [r7, #4]
 8106c12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8106c16:	b2db      	uxtb	r3, r3
 8106c18:	2b01      	cmp	r3, #1
 8106c1a:	bf14      	ite	ne
 8106c1c:	2301      	movne	r3, #1
 8106c1e:	2300      	moveq	r3, #0
 8106c20:	b2db      	uxtb	r3, r3
 8106c22:	e008      	b.n	8106c36 <HAL_TIM_PWM_Start+0x9e>
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8106c2a:	b2db      	uxtb	r3, r3
 8106c2c:	2b01      	cmp	r3, #1
 8106c2e:	bf14      	ite	ne
 8106c30:	2301      	movne	r3, #1
 8106c32:	2300      	moveq	r3, #0
 8106c34:	b2db      	uxtb	r3, r3
 8106c36:	2b00      	cmp	r3, #0
 8106c38:	d001      	beq.n	8106c3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8106c3a:	2301      	movs	r3, #1
 8106c3c:	e0a1      	b.n	8106d82 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106c3e:	683b      	ldr	r3, [r7, #0]
 8106c40:	2b00      	cmp	r3, #0
 8106c42:	d104      	bne.n	8106c4e <HAL_TIM_PWM_Start+0xb6>
 8106c44:	687b      	ldr	r3, [r7, #4]
 8106c46:	2202      	movs	r2, #2
 8106c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106c4c:	e023      	b.n	8106c96 <HAL_TIM_PWM_Start+0xfe>
 8106c4e:	683b      	ldr	r3, [r7, #0]
 8106c50:	2b04      	cmp	r3, #4
 8106c52:	d104      	bne.n	8106c5e <HAL_TIM_PWM_Start+0xc6>
 8106c54:	687b      	ldr	r3, [r7, #4]
 8106c56:	2202      	movs	r2, #2
 8106c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106c5c:	e01b      	b.n	8106c96 <HAL_TIM_PWM_Start+0xfe>
 8106c5e:	683b      	ldr	r3, [r7, #0]
 8106c60:	2b08      	cmp	r3, #8
 8106c62:	d104      	bne.n	8106c6e <HAL_TIM_PWM_Start+0xd6>
 8106c64:	687b      	ldr	r3, [r7, #4]
 8106c66:	2202      	movs	r2, #2
 8106c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106c6c:	e013      	b.n	8106c96 <HAL_TIM_PWM_Start+0xfe>
 8106c6e:	683b      	ldr	r3, [r7, #0]
 8106c70:	2b0c      	cmp	r3, #12
 8106c72:	d104      	bne.n	8106c7e <HAL_TIM_PWM_Start+0xe6>
 8106c74:	687b      	ldr	r3, [r7, #4]
 8106c76:	2202      	movs	r2, #2
 8106c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106c7c:	e00b      	b.n	8106c96 <HAL_TIM_PWM_Start+0xfe>
 8106c7e:	683b      	ldr	r3, [r7, #0]
 8106c80:	2b10      	cmp	r3, #16
 8106c82:	d104      	bne.n	8106c8e <HAL_TIM_PWM_Start+0xf6>
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	2202      	movs	r2, #2
 8106c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106c8c:	e003      	b.n	8106c96 <HAL_TIM_PWM_Start+0xfe>
 8106c8e:	687b      	ldr	r3, [r7, #4]
 8106c90:	2202      	movs	r2, #2
 8106c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	681b      	ldr	r3, [r3, #0]
 8106c9a:	2201      	movs	r2, #1
 8106c9c:	6839      	ldr	r1, [r7, #0]
 8106c9e:	4618      	mov	r0, r3
 8106ca0:	f001 fdbe 	bl	8108820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8106ca4:	687b      	ldr	r3, [r7, #4]
 8106ca6:	681b      	ldr	r3, [r3, #0]
 8106ca8:	4a38      	ldr	r2, [pc, #224]	; (8106d8c <HAL_TIM_PWM_Start+0x1f4>)
 8106caa:	4293      	cmp	r3, r2
 8106cac:	d013      	beq.n	8106cd6 <HAL_TIM_PWM_Start+0x13e>
 8106cae:	687b      	ldr	r3, [r7, #4]
 8106cb0:	681b      	ldr	r3, [r3, #0]
 8106cb2:	4a37      	ldr	r2, [pc, #220]	; (8106d90 <HAL_TIM_PWM_Start+0x1f8>)
 8106cb4:	4293      	cmp	r3, r2
 8106cb6:	d00e      	beq.n	8106cd6 <HAL_TIM_PWM_Start+0x13e>
 8106cb8:	687b      	ldr	r3, [r7, #4]
 8106cba:	681b      	ldr	r3, [r3, #0]
 8106cbc:	4a35      	ldr	r2, [pc, #212]	; (8106d94 <HAL_TIM_PWM_Start+0x1fc>)
 8106cbe:	4293      	cmp	r3, r2
 8106cc0:	d009      	beq.n	8106cd6 <HAL_TIM_PWM_Start+0x13e>
 8106cc2:	687b      	ldr	r3, [r7, #4]
 8106cc4:	681b      	ldr	r3, [r3, #0]
 8106cc6:	4a34      	ldr	r2, [pc, #208]	; (8106d98 <HAL_TIM_PWM_Start+0x200>)
 8106cc8:	4293      	cmp	r3, r2
 8106cca:	d004      	beq.n	8106cd6 <HAL_TIM_PWM_Start+0x13e>
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	681b      	ldr	r3, [r3, #0]
 8106cd0:	4a32      	ldr	r2, [pc, #200]	; (8106d9c <HAL_TIM_PWM_Start+0x204>)
 8106cd2:	4293      	cmp	r3, r2
 8106cd4:	d101      	bne.n	8106cda <HAL_TIM_PWM_Start+0x142>
 8106cd6:	2301      	movs	r3, #1
 8106cd8:	e000      	b.n	8106cdc <HAL_TIM_PWM_Start+0x144>
 8106cda:	2300      	movs	r3, #0
 8106cdc:	2b00      	cmp	r3, #0
 8106cde:	d007      	beq.n	8106cf0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8106ce0:	687b      	ldr	r3, [r7, #4]
 8106ce2:	681b      	ldr	r3, [r3, #0]
 8106ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8106ce6:	687b      	ldr	r3, [r7, #4]
 8106ce8:	681b      	ldr	r3, [r3, #0]
 8106cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8106cee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	681b      	ldr	r3, [r3, #0]
 8106cf4:	4a25      	ldr	r2, [pc, #148]	; (8106d8c <HAL_TIM_PWM_Start+0x1f4>)
 8106cf6:	4293      	cmp	r3, r2
 8106cf8:	d022      	beq.n	8106d40 <HAL_TIM_PWM_Start+0x1a8>
 8106cfa:	687b      	ldr	r3, [r7, #4]
 8106cfc:	681b      	ldr	r3, [r3, #0]
 8106cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106d02:	d01d      	beq.n	8106d40 <HAL_TIM_PWM_Start+0x1a8>
 8106d04:	687b      	ldr	r3, [r7, #4]
 8106d06:	681b      	ldr	r3, [r3, #0]
 8106d08:	4a25      	ldr	r2, [pc, #148]	; (8106da0 <HAL_TIM_PWM_Start+0x208>)
 8106d0a:	4293      	cmp	r3, r2
 8106d0c:	d018      	beq.n	8106d40 <HAL_TIM_PWM_Start+0x1a8>
 8106d0e:	687b      	ldr	r3, [r7, #4]
 8106d10:	681b      	ldr	r3, [r3, #0]
 8106d12:	4a24      	ldr	r2, [pc, #144]	; (8106da4 <HAL_TIM_PWM_Start+0x20c>)
 8106d14:	4293      	cmp	r3, r2
 8106d16:	d013      	beq.n	8106d40 <HAL_TIM_PWM_Start+0x1a8>
 8106d18:	687b      	ldr	r3, [r7, #4]
 8106d1a:	681b      	ldr	r3, [r3, #0]
 8106d1c:	4a22      	ldr	r2, [pc, #136]	; (8106da8 <HAL_TIM_PWM_Start+0x210>)
 8106d1e:	4293      	cmp	r3, r2
 8106d20:	d00e      	beq.n	8106d40 <HAL_TIM_PWM_Start+0x1a8>
 8106d22:	687b      	ldr	r3, [r7, #4]
 8106d24:	681b      	ldr	r3, [r3, #0]
 8106d26:	4a1a      	ldr	r2, [pc, #104]	; (8106d90 <HAL_TIM_PWM_Start+0x1f8>)
 8106d28:	4293      	cmp	r3, r2
 8106d2a:	d009      	beq.n	8106d40 <HAL_TIM_PWM_Start+0x1a8>
 8106d2c:	687b      	ldr	r3, [r7, #4]
 8106d2e:	681b      	ldr	r3, [r3, #0]
 8106d30:	4a1e      	ldr	r2, [pc, #120]	; (8106dac <HAL_TIM_PWM_Start+0x214>)
 8106d32:	4293      	cmp	r3, r2
 8106d34:	d004      	beq.n	8106d40 <HAL_TIM_PWM_Start+0x1a8>
 8106d36:	687b      	ldr	r3, [r7, #4]
 8106d38:	681b      	ldr	r3, [r3, #0]
 8106d3a:	4a16      	ldr	r2, [pc, #88]	; (8106d94 <HAL_TIM_PWM_Start+0x1fc>)
 8106d3c:	4293      	cmp	r3, r2
 8106d3e:	d115      	bne.n	8106d6c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	681b      	ldr	r3, [r3, #0]
 8106d44:	689a      	ldr	r2, [r3, #8]
 8106d46:	4b1a      	ldr	r3, [pc, #104]	; (8106db0 <HAL_TIM_PWM_Start+0x218>)
 8106d48:	4013      	ands	r3, r2
 8106d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106d4c:	68fb      	ldr	r3, [r7, #12]
 8106d4e:	2b06      	cmp	r3, #6
 8106d50:	d015      	beq.n	8106d7e <HAL_TIM_PWM_Start+0x1e6>
 8106d52:	68fb      	ldr	r3, [r7, #12]
 8106d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106d58:	d011      	beq.n	8106d7e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8106d5a:	687b      	ldr	r3, [r7, #4]
 8106d5c:	681b      	ldr	r3, [r3, #0]
 8106d5e:	681a      	ldr	r2, [r3, #0]
 8106d60:	687b      	ldr	r3, [r7, #4]
 8106d62:	681b      	ldr	r3, [r3, #0]
 8106d64:	f042 0201 	orr.w	r2, r2, #1
 8106d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106d6a:	e008      	b.n	8106d7e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106d6c:	687b      	ldr	r3, [r7, #4]
 8106d6e:	681b      	ldr	r3, [r3, #0]
 8106d70:	681a      	ldr	r2, [r3, #0]
 8106d72:	687b      	ldr	r3, [r7, #4]
 8106d74:	681b      	ldr	r3, [r3, #0]
 8106d76:	f042 0201 	orr.w	r2, r2, #1
 8106d7a:	601a      	str	r2, [r3, #0]
 8106d7c:	e000      	b.n	8106d80 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106d80:	2300      	movs	r3, #0
}
 8106d82:	4618      	mov	r0, r3
 8106d84:	3710      	adds	r7, #16
 8106d86:	46bd      	mov	sp, r7
 8106d88:	bd80      	pop	{r7, pc}
 8106d8a:	bf00      	nop
 8106d8c:	40010000 	.word	0x40010000
 8106d90:	40010400 	.word	0x40010400
 8106d94:	40014000 	.word	0x40014000
 8106d98:	40014400 	.word	0x40014400
 8106d9c:	40014800 	.word	0x40014800
 8106da0:	40000400 	.word	0x40000400
 8106da4:	40000800 	.word	0x40000800
 8106da8:	40000c00 	.word	0x40000c00
 8106dac:	40001800 	.word	0x40001800
 8106db0:	00010007 	.word	0x00010007

08106db4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8106db4:	b580      	push	{r7, lr}
 8106db6:	b082      	sub	sp, #8
 8106db8:	af00      	add	r7, sp, #0
 8106dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106dbc:	687b      	ldr	r3, [r7, #4]
 8106dbe:	2b00      	cmp	r3, #0
 8106dc0:	d101      	bne.n	8106dc6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8106dc2:	2301      	movs	r3, #1
 8106dc4:	e049      	b.n	8106e5a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106dc6:	687b      	ldr	r3, [r7, #4]
 8106dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106dcc:	b2db      	uxtb	r3, r3
 8106dce:	2b00      	cmp	r3, #0
 8106dd0:	d106      	bne.n	8106de0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106dd2:	687b      	ldr	r3, [r7, #4]
 8106dd4:	2200      	movs	r2, #0
 8106dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8106dda:	6878      	ldr	r0, [r7, #4]
 8106ddc:	f000 f841 	bl	8106e62 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106de0:	687b      	ldr	r3, [r7, #4]
 8106de2:	2202      	movs	r2, #2
 8106de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	681a      	ldr	r2, [r3, #0]
 8106dec:	687b      	ldr	r3, [r7, #4]
 8106dee:	3304      	adds	r3, #4
 8106df0:	4619      	mov	r1, r3
 8106df2:	4610      	mov	r0, r2
 8106df4:	f000 fee8 	bl	8107bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106df8:	687b      	ldr	r3, [r7, #4]
 8106dfa:	2201      	movs	r2, #1
 8106dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106e00:	687b      	ldr	r3, [r7, #4]
 8106e02:	2201      	movs	r2, #1
 8106e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106e08:	687b      	ldr	r3, [r7, #4]
 8106e0a:	2201      	movs	r2, #1
 8106e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106e10:	687b      	ldr	r3, [r7, #4]
 8106e12:	2201      	movs	r2, #1
 8106e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	2201      	movs	r2, #1
 8106e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106e20:	687b      	ldr	r3, [r7, #4]
 8106e22:	2201      	movs	r2, #1
 8106e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106e28:	687b      	ldr	r3, [r7, #4]
 8106e2a:	2201      	movs	r2, #1
 8106e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106e30:	687b      	ldr	r3, [r7, #4]
 8106e32:	2201      	movs	r2, #1
 8106e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106e38:	687b      	ldr	r3, [r7, #4]
 8106e3a:	2201      	movs	r2, #1
 8106e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106e40:	687b      	ldr	r3, [r7, #4]
 8106e42:	2201      	movs	r2, #1
 8106e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106e48:	687b      	ldr	r3, [r7, #4]
 8106e4a:	2201      	movs	r2, #1
 8106e4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106e50:	687b      	ldr	r3, [r7, #4]
 8106e52:	2201      	movs	r2, #1
 8106e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106e58:	2300      	movs	r3, #0
}
 8106e5a:	4618      	mov	r0, r3
 8106e5c:	3708      	adds	r7, #8
 8106e5e:	46bd      	mov	sp, r7
 8106e60:	bd80      	pop	{r7, pc}

08106e62 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8106e62:	b480      	push	{r7}
 8106e64:	b083      	sub	sp, #12
 8106e66:	af00      	add	r7, sp, #0
 8106e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8106e6a:	bf00      	nop
 8106e6c:	370c      	adds	r7, #12
 8106e6e:	46bd      	mov	sp, r7
 8106e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e74:	4770      	bx	lr
	...

08106e78 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106e78:	b580      	push	{r7, lr}
 8106e7a:	b084      	sub	sp, #16
 8106e7c:	af00      	add	r7, sp, #0
 8106e7e:	6078      	str	r0, [r7, #4]
 8106e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8106e82:	683b      	ldr	r3, [r7, #0]
 8106e84:	2b00      	cmp	r3, #0
 8106e86:	d104      	bne.n	8106e92 <HAL_TIM_IC_Start+0x1a>
 8106e88:	687b      	ldr	r3, [r7, #4]
 8106e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8106e8e:	b2db      	uxtb	r3, r3
 8106e90:	e023      	b.n	8106eda <HAL_TIM_IC_Start+0x62>
 8106e92:	683b      	ldr	r3, [r7, #0]
 8106e94:	2b04      	cmp	r3, #4
 8106e96:	d104      	bne.n	8106ea2 <HAL_TIM_IC_Start+0x2a>
 8106e98:	687b      	ldr	r3, [r7, #4]
 8106e9a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8106e9e:	b2db      	uxtb	r3, r3
 8106ea0:	e01b      	b.n	8106eda <HAL_TIM_IC_Start+0x62>
 8106ea2:	683b      	ldr	r3, [r7, #0]
 8106ea4:	2b08      	cmp	r3, #8
 8106ea6:	d104      	bne.n	8106eb2 <HAL_TIM_IC_Start+0x3a>
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106eae:	b2db      	uxtb	r3, r3
 8106eb0:	e013      	b.n	8106eda <HAL_TIM_IC_Start+0x62>
 8106eb2:	683b      	ldr	r3, [r7, #0]
 8106eb4:	2b0c      	cmp	r3, #12
 8106eb6:	d104      	bne.n	8106ec2 <HAL_TIM_IC_Start+0x4a>
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106ebe:	b2db      	uxtb	r3, r3
 8106ec0:	e00b      	b.n	8106eda <HAL_TIM_IC_Start+0x62>
 8106ec2:	683b      	ldr	r3, [r7, #0]
 8106ec4:	2b10      	cmp	r3, #16
 8106ec6:	d104      	bne.n	8106ed2 <HAL_TIM_IC_Start+0x5a>
 8106ec8:	687b      	ldr	r3, [r7, #4]
 8106eca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8106ece:	b2db      	uxtb	r3, r3
 8106ed0:	e003      	b.n	8106eda <HAL_TIM_IC_Start+0x62>
 8106ed2:	687b      	ldr	r3, [r7, #4]
 8106ed4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8106ed8:	b2db      	uxtb	r3, r3
 8106eda:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8106edc:	683b      	ldr	r3, [r7, #0]
 8106ede:	2b00      	cmp	r3, #0
 8106ee0:	d104      	bne.n	8106eec <HAL_TIM_IC_Start+0x74>
 8106ee2:	687b      	ldr	r3, [r7, #4]
 8106ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8106ee8:	b2db      	uxtb	r3, r3
 8106eea:	e013      	b.n	8106f14 <HAL_TIM_IC_Start+0x9c>
 8106eec:	683b      	ldr	r3, [r7, #0]
 8106eee:	2b04      	cmp	r3, #4
 8106ef0:	d104      	bne.n	8106efc <HAL_TIM_IC_Start+0x84>
 8106ef2:	687b      	ldr	r3, [r7, #4]
 8106ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8106ef8:	b2db      	uxtb	r3, r3
 8106efa:	e00b      	b.n	8106f14 <HAL_TIM_IC_Start+0x9c>
 8106efc:	683b      	ldr	r3, [r7, #0]
 8106efe:	2b08      	cmp	r3, #8
 8106f00:	d104      	bne.n	8106f0c <HAL_TIM_IC_Start+0x94>
 8106f02:	687b      	ldr	r3, [r7, #4]
 8106f04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8106f08:	b2db      	uxtb	r3, r3
 8106f0a:	e003      	b.n	8106f14 <HAL_TIM_IC_Start+0x9c>
 8106f0c:	687b      	ldr	r3, [r7, #4]
 8106f0e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8106f12:	b2db      	uxtb	r3, r3
 8106f14:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8106f16:	7bfb      	ldrb	r3, [r7, #15]
 8106f18:	2b01      	cmp	r3, #1
 8106f1a:	d102      	bne.n	8106f22 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8106f1c:	7bbb      	ldrb	r3, [r7, #14]
 8106f1e:	2b01      	cmp	r3, #1
 8106f20:	d001      	beq.n	8106f26 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8106f22:	2301      	movs	r3, #1
 8106f24:	e097      	b.n	8107056 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106f26:	683b      	ldr	r3, [r7, #0]
 8106f28:	2b00      	cmp	r3, #0
 8106f2a:	d104      	bne.n	8106f36 <HAL_TIM_IC_Start+0xbe>
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	2202      	movs	r2, #2
 8106f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106f34:	e023      	b.n	8106f7e <HAL_TIM_IC_Start+0x106>
 8106f36:	683b      	ldr	r3, [r7, #0]
 8106f38:	2b04      	cmp	r3, #4
 8106f3a:	d104      	bne.n	8106f46 <HAL_TIM_IC_Start+0xce>
 8106f3c:	687b      	ldr	r3, [r7, #4]
 8106f3e:	2202      	movs	r2, #2
 8106f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106f44:	e01b      	b.n	8106f7e <HAL_TIM_IC_Start+0x106>
 8106f46:	683b      	ldr	r3, [r7, #0]
 8106f48:	2b08      	cmp	r3, #8
 8106f4a:	d104      	bne.n	8106f56 <HAL_TIM_IC_Start+0xde>
 8106f4c:	687b      	ldr	r3, [r7, #4]
 8106f4e:	2202      	movs	r2, #2
 8106f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106f54:	e013      	b.n	8106f7e <HAL_TIM_IC_Start+0x106>
 8106f56:	683b      	ldr	r3, [r7, #0]
 8106f58:	2b0c      	cmp	r3, #12
 8106f5a:	d104      	bne.n	8106f66 <HAL_TIM_IC_Start+0xee>
 8106f5c:	687b      	ldr	r3, [r7, #4]
 8106f5e:	2202      	movs	r2, #2
 8106f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106f64:	e00b      	b.n	8106f7e <HAL_TIM_IC_Start+0x106>
 8106f66:	683b      	ldr	r3, [r7, #0]
 8106f68:	2b10      	cmp	r3, #16
 8106f6a:	d104      	bne.n	8106f76 <HAL_TIM_IC_Start+0xfe>
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	2202      	movs	r2, #2
 8106f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106f74:	e003      	b.n	8106f7e <HAL_TIM_IC_Start+0x106>
 8106f76:	687b      	ldr	r3, [r7, #4]
 8106f78:	2202      	movs	r2, #2
 8106f7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106f7e:	683b      	ldr	r3, [r7, #0]
 8106f80:	2b00      	cmp	r3, #0
 8106f82:	d104      	bne.n	8106f8e <HAL_TIM_IC_Start+0x116>
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	2202      	movs	r2, #2
 8106f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106f8c:	e013      	b.n	8106fb6 <HAL_TIM_IC_Start+0x13e>
 8106f8e:	683b      	ldr	r3, [r7, #0]
 8106f90:	2b04      	cmp	r3, #4
 8106f92:	d104      	bne.n	8106f9e <HAL_TIM_IC_Start+0x126>
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	2202      	movs	r2, #2
 8106f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106f9c:	e00b      	b.n	8106fb6 <HAL_TIM_IC_Start+0x13e>
 8106f9e:	683b      	ldr	r3, [r7, #0]
 8106fa0:	2b08      	cmp	r3, #8
 8106fa2:	d104      	bne.n	8106fae <HAL_TIM_IC_Start+0x136>
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	2202      	movs	r2, #2
 8106fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106fac:	e003      	b.n	8106fb6 <HAL_TIM_IC_Start+0x13e>
 8106fae:	687b      	ldr	r3, [r7, #4]
 8106fb0:	2202      	movs	r2, #2
 8106fb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106fb6:	687b      	ldr	r3, [r7, #4]
 8106fb8:	681b      	ldr	r3, [r3, #0]
 8106fba:	2201      	movs	r2, #1
 8106fbc:	6839      	ldr	r1, [r7, #0]
 8106fbe:	4618      	mov	r0, r3
 8106fc0:	f001 fc2e 	bl	8108820 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106fc4:	687b      	ldr	r3, [r7, #4]
 8106fc6:	681b      	ldr	r3, [r3, #0]
 8106fc8:	4a25      	ldr	r2, [pc, #148]	; (8107060 <HAL_TIM_IC_Start+0x1e8>)
 8106fca:	4293      	cmp	r3, r2
 8106fcc:	d022      	beq.n	8107014 <HAL_TIM_IC_Start+0x19c>
 8106fce:	687b      	ldr	r3, [r7, #4]
 8106fd0:	681b      	ldr	r3, [r3, #0]
 8106fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106fd6:	d01d      	beq.n	8107014 <HAL_TIM_IC_Start+0x19c>
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	681b      	ldr	r3, [r3, #0]
 8106fdc:	4a21      	ldr	r2, [pc, #132]	; (8107064 <HAL_TIM_IC_Start+0x1ec>)
 8106fde:	4293      	cmp	r3, r2
 8106fe0:	d018      	beq.n	8107014 <HAL_TIM_IC_Start+0x19c>
 8106fe2:	687b      	ldr	r3, [r7, #4]
 8106fe4:	681b      	ldr	r3, [r3, #0]
 8106fe6:	4a20      	ldr	r2, [pc, #128]	; (8107068 <HAL_TIM_IC_Start+0x1f0>)
 8106fe8:	4293      	cmp	r3, r2
 8106fea:	d013      	beq.n	8107014 <HAL_TIM_IC_Start+0x19c>
 8106fec:	687b      	ldr	r3, [r7, #4]
 8106fee:	681b      	ldr	r3, [r3, #0]
 8106ff0:	4a1e      	ldr	r2, [pc, #120]	; (810706c <HAL_TIM_IC_Start+0x1f4>)
 8106ff2:	4293      	cmp	r3, r2
 8106ff4:	d00e      	beq.n	8107014 <HAL_TIM_IC_Start+0x19c>
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	681b      	ldr	r3, [r3, #0]
 8106ffa:	4a1d      	ldr	r2, [pc, #116]	; (8107070 <HAL_TIM_IC_Start+0x1f8>)
 8106ffc:	4293      	cmp	r3, r2
 8106ffe:	d009      	beq.n	8107014 <HAL_TIM_IC_Start+0x19c>
 8107000:	687b      	ldr	r3, [r7, #4]
 8107002:	681b      	ldr	r3, [r3, #0]
 8107004:	4a1b      	ldr	r2, [pc, #108]	; (8107074 <HAL_TIM_IC_Start+0x1fc>)
 8107006:	4293      	cmp	r3, r2
 8107008:	d004      	beq.n	8107014 <HAL_TIM_IC_Start+0x19c>
 810700a:	687b      	ldr	r3, [r7, #4]
 810700c:	681b      	ldr	r3, [r3, #0]
 810700e:	4a1a      	ldr	r2, [pc, #104]	; (8107078 <HAL_TIM_IC_Start+0x200>)
 8107010:	4293      	cmp	r3, r2
 8107012:	d115      	bne.n	8107040 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	681b      	ldr	r3, [r3, #0]
 8107018:	689a      	ldr	r2, [r3, #8]
 810701a:	4b18      	ldr	r3, [pc, #96]	; (810707c <HAL_TIM_IC_Start+0x204>)
 810701c:	4013      	ands	r3, r2
 810701e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107020:	68bb      	ldr	r3, [r7, #8]
 8107022:	2b06      	cmp	r3, #6
 8107024:	d015      	beq.n	8107052 <HAL_TIM_IC_Start+0x1da>
 8107026:	68bb      	ldr	r3, [r7, #8]
 8107028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810702c:	d011      	beq.n	8107052 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 810702e:	687b      	ldr	r3, [r7, #4]
 8107030:	681b      	ldr	r3, [r3, #0]
 8107032:	681a      	ldr	r2, [r3, #0]
 8107034:	687b      	ldr	r3, [r7, #4]
 8107036:	681b      	ldr	r3, [r3, #0]
 8107038:	f042 0201 	orr.w	r2, r2, #1
 810703c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810703e:	e008      	b.n	8107052 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8107040:	687b      	ldr	r3, [r7, #4]
 8107042:	681b      	ldr	r3, [r3, #0]
 8107044:	681a      	ldr	r2, [r3, #0]
 8107046:	687b      	ldr	r3, [r7, #4]
 8107048:	681b      	ldr	r3, [r3, #0]
 810704a:	f042 0201 	orr.w	r2, r2, #1
 810704e:	601a      	str	r2, [r3, #0]
 8107050:	e000      	b.n	8107054 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8107054:	2300      	movs	r3, #0
}
 8107056:	4618      	mov	r0, r3
 8107058:	3710      	adds	r7, #16
 810705a:	46bd      	mov	sp, r7
 810705c:	bd80      	pop	{r7, pc}
 810705e:	bf00      	nop
 8107060:	40010000 	.word	0x40010000
 8107064:	40000400 	.word	0x40000400
 8107068:	40000800 	.word	0x40000800
 810706c:	40000c00 	.word	0x40000c00
 8107070:	40010400 	.word	0x40010400
 8107074:	40001800 	.word	0x40001800
 8107078:	40014000 	.word	0x40014000
 810707c:	00010007 	.word	0x00010007

08107080 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8107080:	b580      	push	{r7, lr}
 8107082:	b084      	sub	sp, #16
 8107084:	af00      	add	r7, sp, #0
 8107086:	6078      	str	r0, [r7, #4]
 8107088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810708a:	2300      	movs	r3, #0
 810708c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 810708e:	683b      	ldr	r3, [r7, #0]
 8107090:	2b00      	cmp	r3, #0
 8107092:	d104      	bne.n	810709e <HAL_TIM_IC_Start_IT+0x1e>
 8107094:	687b      	ldr	r3, [r7, #4]
 8107096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810709a:	b2db      	uxtb	r3, r3
 810709c:	e023      	b.n	81070e6 <HAL_TIM_IC_Start_IT+0x66>
 810709e:	683b      	ldr	r3, [r7, #0]
 81070a0:	2b04      	cmp	r3, #4
 81070a2:	d104      	bne.n	81070ae <HAL_TIM_IC_Start_IT+0x2e>
 81070a4:	687b      	ldr	r3, [r7, #4]
 81070a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 81070aa:	b2db      	uxtb	r3, r3
 81070ac:	e01b      	b.n	81070e6 <HAL_TIM_IC_Start_IT+0x66>
 81070ae:	683b      	ldr	r3, [r7, #0]
 81070b0:	2b08      	cmp	r3, #8
 81070b2:	d104      	bne.n	81070be <HAL_TIM_IC_Start_IT+0x3e>
 81070b4:	687b      	ldr	r3, [r7, #4]
 81070b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81070ba:	b2db      	uxtb	r3, r3
 81070bc:	e013      	b.n	81070e6 <HAL_TIM_IC_Start_IT+0x66>
 81070be:	683b      	ldr	r3, [r7, #0]
 81070c0:	2b0c      	cmp	r3, #12
 81070c2:	d104      	bne.n	81070ce <HAL_TIM_IC_Start_IT+0x4e>
 81070c4:	687b      	ldr	r3, [r7, #4]
 81070c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81070ca:	b2db      	uxtb	r3, r3
 81070cc:	e00b      	b.n	81070e6 <HAL_TIM_IC_Start_IT+0x66>
 81070ce:	683b      	ldr	r3, [r7, #0]
 81070d0:	2b10      	cmp	r3, #16
 81070d2:	d104      	bne.n	81070de <HAL_TIM_IC_Start_IT+0x5e>
 81070d4:	687b      	ldr	r3, [r7, #4]
 81070d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81070da:	b2db      	uxtb	r3, r3
 81070dc:	e003      	b.n	81070e6 <HAL_TIM_IC_Start_IT+0x66>
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81070e4:	b2db      	uxtb	r3, r3
 81070e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 81070e8:	683b      	ldr	r3, [r7, #0]
 81070ea:	2b00      	cmp	r3, #0
 81070ec:	d104      	bne.n	81070f8 <HAL_TIM_IC_Start_IT+0x78>
 81070ee:	687b      	ldr	r3, [r7, #4]
 81070f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81070f4:	b2db      	uxtb	r3, r3
 81070f6:	e013      	b.n	8107120 <HAL_TIM_IC_Start_IT+0xa0>
 81070f8:	683b      	ldr	r3, [r7, #0]
 81070fa:	2b04      	cmp	r3, #4
 81070fc:	d104      	bne.n	8107108 <HAL_TIM_IC_Start_IT+0x88>
 81070fe:	687b      	ldr	r3, [r7, #4]
 8107100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8107104:	b2db      	uxtb	r3, r3
 8107106:	e00b      	b.n	8107120 <HAL_TIM_IC_Start_IT+0xa0>
 8107108:	683b      	ldr	r3, [r7, #0]
 810710a:	2b08      	cmp	r3, #8
 810710c:	d104      	bne.n	8107118 <HAL_TIM_IC_Start_IT+0x98>
 810710e:	687b      	ldr	r3, [r7, #4]
 8107110:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8107114:	b2db      	uxtb	r3, r3
 8107116:	e003      	b.n	8107120 <HAL_TIM_IC_Start_IT+0xa0>
 8107118:	687b      	ldr	r3, [r7, #4]
 810711a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 810711e:	b2db      	uxtb	r3, r3
 8107120:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8107122:	7bbb      	ldrb	r3, [r7, #14]
 8107124:	2b01      	cmp	r3, #1
 8107126:	d102      	bne.n	810712e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8107128:	7b7b      	ldrb	r3, [r7, #13]
 810712a:	2b01      	cmp	r3, #1
 810712c:	d001      	beq.n	8107132 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 810712e:	2301      	movs	r3, #1
 8107130:	e0e2      	b.n	81072f8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8107132:	683b      	ldr	r3, [r7, #0]
 8107134:	2b00      	cmp	r3, #0
 8107136:	d104      	bne.n	8107142 <HAL_TIM_IC_Start_IT+0xc2>
 8107138:	687b      	ldr	r3, [r7, #4]
 810713a:	2202      	movs	r2, #2
 810713c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107140:	e023      	b.n	810718a <HAL_TIM_IC_Start_IT+0x10a>
 8107142:	683b      	ldr	r3, [r7, #0]
 8107144:	2b04      	cmp	r3, #4
 8107146:	d104      	bne.n	8107152 <HAL_TIM_IC_Start_IT+0xd2>
 8107148:	687b      	ldr	r3, [r7, #4]
 810714a:	2202      	movs	r2, #2
 810714c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107150:	e01b      	b.n	810718a <HAL_TIM_IC_Start_IT+0x10a>
 8107152:	683b      	ldr	r3, [r7, #0]
 8107154:	2b08      	cmp	r3, #8
 8107156:	d104      	bne.n	8107162 <HAL_TIM_IC_Start_IT+0xe2>
 8107158:	687b      	ldr	r3, [r7, #4]
 810715a:	2202      	movs	r2, #2
 810715c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107160:	e013      	b.n	810718a <HAL_TIM_IC_Start_IT+0x10a>
 8107162:	683b      	ldr	r3, [r7, #0]
 8107164:	2b0c      	cmp	r3, #12
 8107166:	d104      	bne.n	8107172 <HAL_TIM_IC_Start_IT+0xf2>
 8107168:	687b      	ldr	r3, [r7, #4]
 810716a:	2202      	movs	r2, #2
 810716c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107170:	e00b      	b.n	810718a <HAL_TIM_IC_Start_IT+0x10a>
 8107172:	683b      	ldr	r3, [r7, #0]
 8107174:	2b10      	cmp	r3, #16
 8107176:	d104      	bne.n	8107182 <HAL_TIM_IC_Start_IT+0x102>
 8107178:	687b      	ldr	r3, [r7, #4]
 810717a:	2202      	movs	r2, #2
 810717c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107180:	e003      	b.n	810718a <HAL_TIM_IC_Start_IT+0x10a>
 8107182:	687b      	ldr	r3, [r7, #4]
 8107184:	2202      	movs	r2, #2
 8107186:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810718a:	683b      	ldr	r3, [r7, #0]
 810718c:	2b00      	cmp	r3, #0
 810718e:	d104      	bne.n	810719a <HAL_TIM_IC_Start_IT+0x11a>
 8107190:	687b      	ldr	r3, [r7, #4]
 8107192:	2202      	movs	r2, #2
 8107194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107198:	e013      	b.n	81071c2 <HAL_TIM_IC_Start_IT+0x142>
 810719a:	683b      	ldr	r3, [r7, #0]
 810719c:	2b04      	cmp	r3, #4
 810719e:	d104      	bne.n	81071aa <HAL_TIM_IC_Start_IT+0x12a>
 81071a0:	687b      	ldr	r3, [r7, #4]
 81071a2:	2202      	movs	r2, #2
 81071a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81071a8:	e00b      	b.n	81071c2 <HAL_TIM_IC_Start_IT+0x142>
 81071aa:	683b      	ldr	r3, [r7, #0]
 81071ac:	2b08      	cmp	r3, #8
 81071ae:	d104      	bne.n	81071ba <HAL_TIM_IC_Start_IT+0x13a>
 81071b0:	687b      	ldr	r3, [r7, #4]
 81071b2:	2202      	movs	r2, #2
 81071b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81071b8:	e003      	b.n	81071c2 <HAL_TIM_IC_Start_IT+0x142>
 81071ba:	687b      	ldr	r3, [r7, #4]
 81071bc:	2202      	movs	r2, #2
 81071be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 81071c2:	683b      	ldr	r3, [r7, #0]
 81071c4:	2b0c      	cmp	r3, #12
 81071c6:	d841      	bhi.n	810724c <HAL_TIM_IC_Start_IT+0x1cc>
 81071c8:	a201      	add	r2, pc, #4	; (adr r2, 81071d0 <HAL_TIM_IC_Start_IT+0x150>)
 81071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071ce:	bf00      	nop
 81071d0:	08107205 	.word	0x08107205
 81071d4:	0810724d 	.word	0x0810724d
 81071d8:	0810724d 	.word	0x0810724d
 81071dc:	0810724d 	.word	0x0810724d
 81071e0:	08107217 	.word	0x08107217
 81071e4:	0810724d 	.word	0x0810724d
 81071e8:	0810724d 	.word	0x0810724d
 81071ec:	0810724d 	.word	0x0810724d
 81071f0:	08107229 	.word	0x08107229
 81071f4:	0810724d 	.word	0x0810724d
 81071f8:	0810724d 	.word	0x0810724d
 81071fc:	0810724d 	.word	0x0810724d
 8107200:	0810723b 	.word	0x0810723b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8107204:	687b      	ldr	r3, [r7, #4]
 8107206:	681b      	ldr	r3, [r3, #0]
 8107208:	68da      	ldr	r2, [r3, #12]
 810720a:	687b      	ldr	r3, [r7, #4]
 810720c:	681b      	ldr	r3, [r3, #0]
 810720e:	f042 0202 	orr.w	r2, r2, #2
 8107212:	60da      	str	r2, [r3, #12]
      break;
 8107214:	e01d      	b.n	8107252 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8107216:	687b      	ldr	r3, [r7, #4]
 8107218:	681b      	ldr	r3, [r3, #0]
 810721a:	68da      	ldr	r2, [r3, #12]
 810721c:	687b      	ldr	r3, [r7, #4]
 810721e:	681b      	ldr	r3, [r3, #0]
 8107220:	f042 0204 	orr.w	r2, r2, #4
 8107224:	60da      	str	r2, [r3, #12]
      break;
 8107226:	e014      	b.n	8107252 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8107228:	687b      	ldr	r3, [r7, #4]
 810722a:	681b      	ldr	r3, [r3, #0]
 810722c:	68da      	ldr	r2, [r3, #12]
 810722e:	687b      	ldr	r3, [r7, #4]
 8107230:	681b      	ldr	r3, [r3, #0]
 8107232:	f042 0208 	orr.w	r2, r2, #8
 8107236:	60da      	str	r2, [r3, #12]
      break;
 8107238:	e00b      	b.n	8107252 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 810723a:	687b      	ldr	r3, [r7, #4]
 810723c:	681b      	ldr	r3, [r3, #0]
 810723e:	68da      	ldr	r2, [r3, #12]
 8107240:	687b      	ldr	r3, [r7, #4]
 8107242:	681b      	ldr	r3, [r3, #0]
 8107244:	f042 0210 	orr.w	r2, r2, #16
 8107248:	60da      	str	r2, [r3, #12]
      break;
 810724a:	e002      	b.n	8107252 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 810724c:	2301      	movs	r3, #1
 810724e:	73fb      	strb	r3, [r7, #15]
      break;
 8107250:	bf00      	nop
  }

  if (status == HAL_OK)
 8107252:	7bfb      	ldrb	r3, [r7, #15]
 8107254:	2b00      	cmp	r3, #0
 8107256:	d14e      	bne.n	81072f6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8107258:	687b      	ldr	r3, [r7, #4]
 810725a:	681b      	ldr	r3, [r3, #0]
 810725c:	2201      	movs	r2, #1
 810725e:	6839      	ldr	r1, [r7, #0]
 8107260:	4618      	mov	r0, r3
 8107262:	f001 fadd 	bl	8108820 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107266:	687b      	ldr	r3, [r7, #4]
 8107268:	681b      	ldr	r3, [r3, #0]
 810726a:	4a25      	ldr	r2, [pc, #148]	; (8107300 <HAL_TIM_IC_Start_IT+0x280>)
 810726c:	4293      	cmp	r3, r2
 810726e:	d022      	beq.n	81072b6 <HAL_TIM_IC_Start_IT+0x236>
 8107270:	687b      	ldr	r3, [r7, #4]
 8107272:	681b      	ldr	r3, [r3, #0]
 8107274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107278:	d01d      	beq.n	81072b6 <HAL_TIM_IC_Start_IT+0x236>
 810727a:	687b      	ldr	r3, [r7, #4]
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	4a21      	ldr	r2, [pc, #132]	; (8107304 <HAL_TIM_IC_Start_IT+0x284>)
 8107280:	4293      	cmp	r3, r2
 8107282:	d018      	beq.n	81072b6 <HAL_TIM_IC_Start_IT+0x236>
 8107284:	687b      	ldr	r3, [r7, #4]
 8107286:	681b      	ldr	r3, [r3, #0]
 8107288:	4a1f      	ldr	r2, [pc, #124]	; (8107308 <HAL_TIM_IC_Start_IT+0x288>)
 810728a:	4293      	cmp	r3, r2
 810728c:	d013      	beq.n	81072b6 <HAL_TIM_IC_Start_IT+0x236>
 810728e:	687b      	ldr	r3, [r7, #4]
 8107290:	681b      	ldr	r3, [r3, #0]
 8107292:	4a1e      	ldr	r2, [pc, #120]	; (810730c <HAL_TIM_IC_Start_IT+0x28c>)
 8107294:	4293      	cmp	r3, r2
 8107296:	d00e      	beq.n	81072b6 <HAL_TIM_IC_Start_IT+0x236>
 8107298:	687b      	ldr	r3, [r7, #4]
 810729a:	681b      	ldr	r3, [r3, #0]
 810729c:	4a1c      	ldr	r2, [pc, #112]	; (8107310 <HAL_TIM_IC_Start_IT+0x290>)
 810729e:	4293      	cmp	r3, r2
 81072a0:	d009      	beq.n	81072b6 <HAL_TIM_IC_Start_IT+0x236>
 81072a2:	687b      	ldr	r3, [r7, #4]
 81072a4:	681b      	ldr	r3, [r3, #0]
 81072a6:	4a1b      	ldr	r2, [pc, #108]	; (8107314 <HAL_TIM_IC_Start_IT+0x294>)
 81072a8:	4293      	cmp	r3, r2
 81072aa:	d004      	beq.n	81072b6 <HAL_TIM_IC_Start_IT+0x236>
 81072ac:	687b      	ldr	r3, [r7, #4]
 81072ae:	681b      	ldr	r3, [r3, #0]
 81072b0:	4a19      	ldr	r2, [pc, #100]	; (8107318 <HAL_TIM_IC_Start_IT+0x298>)
 81072b2:	4293      	cmp	r3, r2
 81072b4:	d115      	bne.n	81072e2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81072b6:	687b      	ldr	r3, [r7, #4]
 81072b8:	681b      	ldr	r3, [r3, #0]
 81072ba:	689a      	ldr	r2, [r3, #8]
 81072bc:	4b17      	ldr	r3, [pc, #92]	; (810731c <HAL_TIM_IC_Start_IT+0x29c>)
 81072be:	4013      	ands	r3, r2
 81072c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81072c2:	68bb      	ldr	r3, [r7, #8]
 81072c4:	2b06      	cmp	r3, #6
 81072c6:	d015      	beq.n	81072f4 <HAL_TIM_IC_Start_IT+0x274>
 81072c8:	68bb      	ldr	r3, [r7, #8]
 81072ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81072ce:	d011      	beq.n	81072f4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 81072d0:	687b      	ldr	r3, [r7, #4]
 81072d2:	681b      	ldr	r3, [r3, #0]
 81072d4:	681a      	ldr	r2, [r3, #0]
 81072d6:	687b      	ldr	r3, [r7, #4]
 81072d8:	681b      	ldr	r3, [r3, #0]
 81072da:	f042 0201 	orr.w	r2, r2, #1
 81072de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81072e0:	e008      	b.n	81072f4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 81072e2:	687b      	ldr	r3, [r7, #4]
 81072e4:	681b      	ldr	r3, [r3, #0]
 81072e6:	681a      	ldr	r2, [r3, #0]
 81072e8:	687b      	ldr	r3, [r7, #4]
 81072ea:	681b      	ldr	r3, [r3, #0]
 81072ec:	f042 0201 	orr.w	r2, r2, #1
 81072f0:	601a      	str	r2, [r3, #0]
 81072f2:	e000      	b.n	81072f6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81072f4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 81072f6:	7bfb      	ldrb	r3, [r7, #15]
}
 81072f8:	4618      	mov	r0, r3
 81072fa:	3710      	adds	r7, #16
 81072fc:	46bd      	mov	sp, r7
 81072fe:	bd80      	pop	{r7, pc}
 8107300:	40010000 	.word	0x40010000
 8107304:	40000400 	.word	0x40000400
 8107308:	40000800 	.word	0x40000800
 810730c:	40000c00 	.word	0x40000c00
 8107310:	40010400 	.word	0x40010400
 8107314:	40001800 	.word	0x40001800
 8107318:	40014000 	.word	0x40014000
 810731c:	00010007 	.word	0x00010007

08107320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8107320:	b580      	push	{r7, lr}
 8107322:	b084      	sub	sp, #16
 8107324:	af00      	add	r7, sp, #0
 8107326:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8107328:	687b      	ldr	r3, [r7, #4]
 810732a:	681b      	ldr	r3, [r3, #0]
 810732c:	68db      	ldr	r3, [r3, #12]
 810732e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	681b      	ldr	r3, [r3, #0]
 8107334:	691b      	ldr	r3, [r3, #16]
 8107336:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8107338:	68bb      	ldr	r3, [r7, #8]
 810733a:	f003 0302 	and.w	r3, r3, #2
 810733e:	2b00      	cmp	r3, #0
 8107340:	d020      	beq.n	8107384 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8107342:	68fb      	ldr	r3, [r7, #12]
 8107344:	f003 0302 	and.w	r3, r3, #2
 8107348:	2b00      	cmp	r3, #0
 810734a:	d01b      	beq.n	8107384 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810734c:	687b      	ldr	r3, [r7, #4]
 810734e:	681b      	ldr	r3, [r3, #0]
 8107350:	f06f 0202 	mvn.w	r2, #2
 8107354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8107356:	687b      	ldr	r3, [r7, #4]
 8107358:	2201      	movs	r2, #1
 810735a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810735c:	687b      	ldr	r3, [r7, #4]
 810735e:	681b      	ldr	r3, [r3, #0]
 8107360:	699b      	ldr	r3, [r3, #24]
 8107362:	f003 0303 	and.w	r3, r3, #3
 8107366:	2b00      	cmp	r3, #0
 8107368:	d003      	beq.n	8107372 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810736a:	6878      	ldr	r0, [r7, #4]
 810736c:	f7fb fa74 	bl	8102858 <HAL_TIM_IC_CaptureCallback>
 8107370:	e005      	b.n	810737e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8107372:	6878      	ldr	r0, [r7, #4]
 8107374:	f000 fc0a 	bl	8107b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107378:	6878      	ldr	r0, [r7, #4]
 810737a:	f000 fc11 	bl	8107ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810737e:	687b      	ldr	r3, [r7, #4]
 8107380:	2200      	movs	r2, #0
 8107382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8107384:	68bb      	ldr	r3, [r7, #8]
 8107386:	f003 0304 	and.w	r3, r3, #4
 810738a:	2b00      	cmp	r3, #0
 810738c:	d020      	beq.n	81073d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810738e:	68fb      	ldr	r3, [r7, #12]
 8107390:	f003 0304 	and.w	r3, r3, #4
 8107394:	2b00      	cmp	r3, #0
 8107396:	d01b      	beq.n	81073d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8107398:	687b      	ldr	r3, [r7, #4]
 810739a:	681b      	ldr	r3, [r3, #0]
 810739c:	f06f 0204 	mvn.w	r2, #4
 81073a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81073a2:	687b      	ldr	r3, [r7, #4]
 81073a4:	2202      	movs	r2, #2
 81073a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81073a8:	687b      	ldr	r3, [r7, #4]
 81073aa:	681b      	ldr	r3, [r3, #0]
 81073ac:	699b      	ldr	r3, [r3, #24]
 81073ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81073b2:	2b00      	cmp	r3, #0
 81073b4:	d003      	beq.n	81073be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81073b6:	6878      	ldr	r0, [r7, #4]
 81073b8:	f7fb fa4e 	bl	8102858 <HAL_TIM_IC_CaptureCallback>
 81073bc:	e005      	b.n	81073ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81073be:	6878      	ldr	r0, [r7, #4]
 81073c0:	f000 fbe4 	bl	8107b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81073c4:	6878      	ldr	r0, [r7, #4]
 81073c6:	f000 fbeb 	bl	8107ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81073ca:	687b      	ldr	r3, [r7, #4]
 81073cc:	2200      	movs	r2, #0
 81073ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 81073d0:	68bb      	ldr	r3, [r7, #8]
 81073d2:	f003 0308 	and.w	r3, r3, #8
 81073d6:	2b00      	cmp	r3, #0
 81073d8:	d020      	beq.n	810741c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 81073da:	68fb      	ldr	r3, [r7, #12]
 81073dc:	f003 0308 	and.w	r3, r3, #8
 81073e0:	2b00      	cmp	r3, #0
 81073e2:	d01b      	beq.n	810741c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 81073e4:	687b      	ldr	r3, [r7, #4]
 81073e6:	681b      	ldr	r3, [r3, #0]
 81073e8:	f06f 0208 	mvn.w	r2, #8
 81073ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81073ee:	687b      	ldr	r3, [r7, #4]
 81073f0:	2204      	movs	r2, #4
 81073f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81073f4:	687b      	ldr	r3, [r7, #4]
 81073f6:	681b      	ldr	r3, [r3, #0]
 81073f8:	69db      	ldr	r3, [r3, #28]
 81073fa:	f003 0303 	and.w	r3, r3, #3
 81073fe:	2b00      	cmp	r3, #0
 8107400:	d003      	beq.n	810740a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107402:	6878      	ldr	r0, [r7, #4]
 8107404:	f7fb fa28 	bl	8102858 <HAL_TIM_IC_CaptureCallback>
 8107408:	e005      	b.n	8107416 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810740a:	6878      	ldr	r0, [r7, #4]
 810740c:	f000 fbbe 	bl	8107b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107410:	6878      	ldr	r0, [r7, #4]
 8107412:	f000 fbc5 	bl	8107ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107416:	687b      	ldr	r3, [r7, #4]
 8107418:	2200      	movs	r2, #0
 810741a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810741c:	68bb      	ldr	r3, [r7, #8]
 810741e:	f003 0310 	and.w	r3, r3, #16
 8107422:	2b00      	cmp	r3, #0
 8107424:	d020      	beq.n	8107468 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8107426:	68fb      	ldr	r3, [r7, #12]
 8107428:	f003 0310 	and.w	r3, r3, #16
 810742c:	2b00      	cmp	r3, #0
 810742e:	d01b      	beq.n	8107468 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8107430:	687b      	ldr	r3, [r7, #4]
 8107432:	681b      	ldr	r3, [r3, #0]
 8107434:	f06f 0210 	mvn.w	r2, #16
 8107438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810743a:	687b      	ldr	r3, [r7, #4]
 810743c:	2208      	movs	r2, #8
 810743e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8107440:	687b      	ldr	r3, [r7, #4]
 8107442:	681b      	ldr	r3, [r3, #0]
 8107444:	69db      	ldr	r3, [r3, #28]
 8107446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810744a:	2b00      	cmp	r3, #0
 810744c:	d003      	beq.n	8107456 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810744e:	6878      	ldr	r0, [r7, #4]
 8107450:	f7fb fa02 	bl	8102858 <HAL_TIM_IC_CaptureCallback>
 8107454:	e005      	b.n	8107462 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107456:	6878      	ldr	r0, [r7, #4]
 8107458:	f000 fb98 	bl	8107b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810745c:	6878      	ldr	r0, [r7, #4]
 810745e:	f000 fb9f 	bl	8107ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107462:	687b      	ldr	r3, [r7, #4]
 8107464:	2200      	movs	r2, #0
 8107466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8107468:	68bb      	ldr	r3, [r7, #8]
 810746a:	f003 0301 	and.w	r3, r3, #1
 810746e:	2b00      	cmp	r3, #0
 8107470:	d00c      	beq.n	810748c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8107472:	68fb      	ldr	r3, [r7, #12]
 8107474:	f003 0301 	and.w	r3, r3, #1
 8107478:	2b00      	cmp	r3, #0
 810747a:	d007      	beq.n	810748c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810747c:	687b      	ldr	r3, [r7, #4]
 810747e:	681b      	ldr	r3, [r3, #0]
 8107480:	f06f 0201 	mvn.w	r2, #1
 8107484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8107486:	6878      	ldr	r0, [r7, #4]
 8107488:	f7fb f9bc 	bl	8102804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810748c:	68bb      	ldr	r3, [r7, #8]
 810748e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107492:	2b00      	cmp	r3, #0
 8107494:	d104      	bne.n	81074a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8107496:	68bb      	ldr	r3, [r7, #8]
 8107498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810749c:	2b00      	cmp	r3, #0
 810749e:	d00c      	beq.n	81074ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81074a0:	68fb      	ldr	r3, [r7, #12]
 81074a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81074a6:	2b00      	cmp	r3, #0
 81074a8:	d007      	beq.n	81074ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 81074aa:	687b      	ldr	r3, [r7, #4]
 81074ac:	681b      	ldr	r3, [r3, #0]
 81074ae:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 81074b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81074b4:	6878      	ldr	r0, [r7, #4]
 81074b6:	f001 fa71 	bl	810899c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 81074ba:	68bb      	ldr	r3, [r7, #8]
 81074bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81074c0:	2b00      	cmp	r3, #0
 81074c2:	d00c      	beq.n	81074de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81074c4:	68fb      	ldr	r3, [r7, #12]
 81074c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81074ca:	2b00      	cmp	r3, #0
 81074cc:	d007      	beq.n	81074de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81074ce:	687b      	ldr	r3, [r7, #4]
 81074d0:	681b      	ldr	r3, [r3, #0]
 81074d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81074d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81074d8:	6878      	ldr	r0, [r7, #4]
 81074da:	f001 fa69 	bl	81089b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 81074de:	68bb      	ldr	r3, [r7, #8]
 81074e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81074e4:	2b00      	cmp	r3, #0
 81074e6:	d00c      	beq.n	8107502 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 81074e8:	68fb      	ldr	r3, [r7, #12]
 81074ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81074ee:	2b00      	cmp	r3, #0
 81074f0:	d007      	beq.n	8107502 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 81074f2:	687b      	ldr	r3, [r7, #4]
 81074f4:	681b      	ldr	r3, [r3, #0]
 81074f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81074fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81074fc:	6878      	ldr	r0, [r7, #4]
 81074fe:	f000 fb59 	bl	8107bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8107502:	68bb      	ldr	r3, [r7, #8]
 8107504:	f003 0320 	and.w	r3, r3, #32
 8107508:	2b00      	cmp	r3, #0
 810750a:	d00c      	beq.n	8107526 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810750c:	68fb      	ldr	r3, [r7, #12]
 810750e:	f003 0320 	and.w	r3, r3, #32
 8107512:	2b00      	cmp	r3, #0
 8107514:	d007      	beq.n	8107526 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8107516:	687b      	ldr	r3, [r7, #4]
 8107518:	681b      	ldr	r3, [r3, #0]
 810751a:	f06f 0220 	mvn.w	r2, #32
 810751e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8107520:	6878      	ldr	r0, [r7, #4]
 8107522:	f001 fa31 	bl	8108988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8107526:	bf00      	nop
 8107528:	3710      	adds	r7, #16
 810752a:	46bd      	mov	sp, r7
 810752c:	bd80      	pop	{r7, pc}

0810752e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 810752e:	b580      	push	{r7, lr}
 8107530:	b086      	sub	sp, #24
 8107532:	af00      	add	r7, sp, #0
 8107534:	60f8      	str	r0, [r7, #12]
 8107536:	60b9      	str	r1, [r7, #8]
 8107538:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810753a:	2300      	movs	r3, #0
 810753c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 810753e:	68fb      	ldr	r3, [r7, #12]
 8107540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107544:	2b01      	cmp	r3, #1
 8107546:	d101      	bne.n	810754c <HAL_TIM_IC_ConfigChannel+0x1e>
 8107548:	2302      	movs	r3, #2
 810754a:	e088      	b.n	810765e <HAL_TIM_IC_ConfigChannel+0x130>
 810754c:	68fb      	ldr	r3, [r7, #12]
 810754e:	2201      	movs	r2, #1
 8107550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8107554:	687b      	ldr	r3, [r7, #4]
 8107556:	2b00      	cmp	r3, #0
 8107558:	d11b      	bne.n	8107592 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 810755a:	68fb      	ldr	r3, [r7, #12]
 810755c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810755e:	68bb      	ldr	r3, [r7, #8]
 8107560:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8107562:	68bb      	ldr	r3, [r7, #8]
 8107564:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8107566:	68bb      	ldr	r3, [r7, #8]
 8107568:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 810756a:	f000 ff93 	bl	8108494 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 810756e:	68fb      	ldr	r3, [r7, #12]
 8107570:	681b      	ldr	r3, [r3, #0]
 8107572:	699a      	ldr	r2, [r3, #24]
 8107574:	68fb      	ldr	r3, [r7, #12]
 8107576:	681b      	ldr	r3, [r3, #0]
 8107578:	f022 020c 	bic.w	r2, r2, #12
 810757c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 810757e:	68fb      	ldr	r3, [r7, #12]
 8107580:	681b      	ldr	r3, [r3, #0]
 8107582:	6999      	ldr	r1, [r3, #24]
 8107584:	68bb      	ldr	r3, [r7, #8]
 8107586:	689a      	ldr	r2, [r3, #8]
 8107588:	68fb      	ldr	r3, [r7, #12]
 810758a:	681b      	ldr	r3, [r3, #0]
 810758c:	430a      	orrs	r2, r1
 810758e:	619a      	str	r2, [r3, #24]
 8107590:	e060      	b.n	8107654 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8107592:	687b      	ldr	r3, [r7, #4]
 8107594:	2b04      	cmp	r3, #4
 8107596:	d11c      	bne.n	81075d2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8107598:	68fb      	ldr	r3, [r7, #12]
 810759a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810759c:	68bb      	ldr	r3, [r7, #8]
 810759e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 81075a0:	68bb      	ldr	r3, [r7, #8]
 81075a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 81075a4:	68bb      	ldr	r3, [r7, #8]
 81075a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 81075a8:	f001 f817 	bl	81085da <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 81075ac:	68fb      	ldr	r3, [r7, #12]
 81075ae:	681b      	ldr	r3, [r3, #0]
 81075b0:	699a      	ldr	r2, [r3, #24]
 81075b2:	68fb      	ldr	r3, [r7, #12]
 81075b4:	681b      	ldr	r3, [r3, #0]
 81075b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 81075ba:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 81075bc:	68fb      	ldr	r3, [r7, #12]
 81075be:	681b      	ldr	r3, [r3, #0]
 81075c0:	6999      	ldr	r1, [r3, #24]
 81075c2:	68bb      	ldr	r3, [r7, #8]
 81075c4:	689b      	ldr	r3, [r3, #8]
 81075c6:	021a      	lsls	r2, r3, #8
 81075c8:	68fb      	ldr	r3, [r7, #12]
 81075ca:	681b      	ldr	r3, [r3, #0]
 81075cc:	430a      	orrs	r2, r1
 81075ce:	619a      	str	r2, [r3, #24]
 81075d0:	e040      	b.n	8107654 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 81075d2:	687b      	ldr	r3, [r7, #4]
 81075d4:	2b08      	cmp	r3, #8
 81075d6:	d11b      	bne.n	8107610 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 81075d8:	68fb      	ldr	r3, [r7, #12]
 81075da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 81075dc:	68bb      	ldr	r3, [r7, #8]
 81075de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 81075e0:	68bb      	ldr	r3, [r7, #8]
 81075e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 81075e4:	68bb      	ldr	r3, [r7, #8]
 81075e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 81075e8:	f001 f864 	bl	81086b4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 81075ec:	68fb      	ldr	r3, [r7, #12]
 81075ee:	681b      	ldr	r3, [r3, #0]
 81075f0:	69da      	ldr	r2, [r3, #28]
 81075f2:	68fb      	ldr	r3, [r7, #12]
 81075f4:	681b      	ldr	r3, [r3, #0]
 81075f6:	f022 020c 	bic.w	r2, r2, #12
 81075fa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 81075fc:	68fb      	ldr	r3, [r7, #12]
 81075fe:	681b      	ldr	r3, [r3, #0]
 8107600:	69d9      	ldr	r1, [r3, #28]
 8107602:	68bb      	ldr	r3, [r7, #8]
 8107604:	689a      	ldr	r2, [r3, #8]
 8107606:	68fb      	ldr	r3, [r7, #12]
 8107608:	681b      	ldr	r3, [r3, #0]
 810760a:	430a      	orrs	r2, r1
 810760c:	61da      	str	r2, [r3, #28]
 810760e:	e021      	b.n	8107654 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8107610:	687b      	ldr	r3, [r7, #4]
 8107612:	2b0c      	cmp	r3, #12
 8107614:	d11c      	bne.n	8107650 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8107616:	68fb      	ldr	r3, [r7, #12]
 8107618:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810761a:	68bb      	ldr	r3, [r7, #8]
 810761c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810761e:	68bb      	ldr	r3, [r7, #8]
 8107620:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8107622:	68bb      	ldr	r3, [r7, #8]
 8107624:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8107626:	f001 f881 	bl	810872c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 810762a:	68fb      	ldr	r3, [r7, #12]
 810762c:	681b      	ldr	r3, [r3, #0]
 810762e:	69da      	ldr	r2, [r3, #28]
 8107630:	68fb      	ldr	r3, [r7, #12]
 8107632:	681b      	ldr	r3, [r3, #0]
 8107634:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8107638:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 810763a:	68fb      	ldr	r3, [r7, #12]
 810763c:	681b      	ldr	r3, [r3, #0]
 810763e:	69d9      	ldr	r1, [r3, #28]
 8107640:	68bb      	ldr	r3, [r7, #8]
 8107642:	689b      	ldr	r3, [r3, #8]
 8107644:	021a      	lsls	r2, r3, #8
 8107646:	68fb      	ldr	r3, [r7, #12]
 8107648:	681b      	ldr	r3, [r3, #0]
 810764a:	430a      	orrs	r2, r1
 810764c:	61da      	str	r2, [r3, #28]
 810764e:	e001      	b.n	8107654 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8107650:	2301      	movs	r3, #1
 8107652:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8107654:	68fb      	ldr	r3, [r7, #12]
 8107656:	2200      	movs	r2, #0
 8107658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810765c:	7dfb      	ldrb	r3, [r7, #23]
}
 810765e:	4618      	mov	r0, r3
 8107660:	3718      	adds	r7, #24
 8107662:	46bd      	mov	sp, r7
 8107664:	bd80      	pop	{r7, pc}
	...

08107668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8107668:	b580      	push	{r7, lr}
 810766a:	b086      	sub	sp, #24
 810766c:	af00      	add	r7, sp, #0
 810766e:	60f8      	str	r0, [r7, #12]
 8107670:	60b9      	str	r1, [r7, #8]
 8107672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107674:	2300      	movs	r3, #0
 8107676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107678:	68fb      	ldr	r3, [r7, #12]
 810767a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810767e:	2b01      	cmp	r3, #1
 8107680:	d101      	bne.n	8107686 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8107682:	2302      	movs	r3, #2
 8107684:	e0ff      	b.n	8107886 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8107686:	68fb      	ldr	r3, [r7, #12]
 8107688:	2201      	movs	r2, #1
 810768a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 810768e:	687b      	ldr	r3, [r7, #4]
 8107690:	2b14      	cmp	r3, #20
 8107692:	f200 80f0 	bhi.w	8107876 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8107696:	a201      	add	r2, pc, #4	; (adr r2, 810769c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8107698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810769c:	081076f1 	.word	0x081076f1
 81076a0:	08107877 	.word	0x08107877
 81076a4:	08107877 	.word	0x08107877
 81076a8:	08107877 	.word	0x08107877
 81076ac:	08107731 	.word	0x08107731
 81076b0:	08107877 	.word	0x08107877
 81076b4:	08107877 	.word	0x08107877
 81076b8:	08107877 	.word	0x08107877
 81076bc:	08107773 	.word	0x08107773
 81076c0:	08107877 	.word	0x08107877
 81076c4:	08107877 	.word	0x08107877
 81076c8:	08107877 	.word	0x08107877
 81076cc:	081077b3 	.word	0x081077b3
 81076d0:	08107877 	.word	0x08107877
 81076d4:	08107877 	.word	0x08107877
 81076d8:	08107877 	.word	0x08107877
 81076dc:	081077f5 	.word	0x081077f5
 81076e0:	08107877 	.word	0x08107877
 81076e4:	08107877 	.word	0x08107877
 81076e8:	08107877 	.word	0x08107877
 81076ec:	08107835 	.word	0x08107835
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81076f0:	68fb      	ldr	r3, [r7, #12]
 81076f2:	681b      	ldr	r3, [r3, #0]
 81076f4:	68b9      	ldr	r1, [r7, #8]
 81076f6:	4618      	mov	r0, r3
 81076f8:	f000 fb0c 	bl	8107d14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81076fc:	68fb      	ldr	r3, [r7, #12]
 81076fe:	681b      	ldr	r3, [r3, #0]
 8107700:	699a      	ldr	r2, [r3, #24]
 8107702:	68fb      	ldr	r3, [r7, #12]
 8107704:	681b      	ldr	r3, [r3, #0]
 8107706:	f042 0208 	orr.w	r2, r2, #8
 810770a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810770c:	68fb      	ldr	r3, [r7, #12]
 810770e:	681b      	ldr	r3, [r3, #0]
 8107710:	699a      	ldr	r2, [r3, #24]
 8107712:	68fb      	ldr	r3, [r7, #12]
 8107714:	681b      	ldr	r3, [r3, #0]
 8107716:	f022 0204 	bic.w	r2, r2, #4
 810771a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810771c:	68fb      	ldr	r3, [r7, #12]
 810771e:	681b      	ldr	r3, [r3, #0]
 8107720:	6999      	ldr	r1, [r3, #24]
 8107722:	68bb      	ldr	r3, [r7, #8]
 8107724:	691a      	ldr	r2, [r3, #16]
 8107726:	68fb      	ldr	r3, [r7, #12]
 8107728:	681b      	ldr	r3, [r3, #0]
 810772a:	430a      	orrs	r2, r1
 810772c:	619a      	str	r2, [r3, #24]
      break;
 810772e:	e0a5      	b.n	810787c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8107730:	68fb      	ldr	r3, [r7, #12]
 8107732:	681b      	ldr	r3, [r3, #0]
 8107734:	68b9      	ldr	r1, [r7, #8]
 8107736:	4618      	mov	r0, r3
 8107738:	f000 fb7c 	bl	8107e34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810773c:	68fb      	ldr	r3, [r7, #12]
 810773e:	681b      	ldr	r3, [r3, #0]
 8107740:	699a      	ldr	r2, [r3, #24]
 8107742:	68fb      	ldr	r3, [r7, #12]
 8107744:	681b      	ldr	r3, [r3, #0]
 8107746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810774a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810774c:	68fb      	ldr	r3, [r7, #12]
 810774e:	681b      	ldr	r3, [r3, #0]
 8107750:	699a      	ldr	r2, [r3, #24]
 8107752:	68fb      	ldr	r3, [r7, #12]
 8107754:	681b      	ldr	r3, [r3, #0]
 8107756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810775a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810775c:	68fb      	ldr	r3, [r7, #12]
 810775e:	681b      	ldr	r3, [r3, #0]
 8107760:	6999      	ldr	r1, [r3, #24]
 8107762:	68bb      	ldr	r3, [r7, #8]
 8107764:	691b      	ldr	r3, [r3, #16]
 8107766:	021a      	lsls	r2, r3, #8
 8107768:	68fb      	ldr	r3, [r7, #12]
 810776a:	681b      	ldr	r3, [r3, #0]
 810776c:	430a      	orrs	r2, r1
 810776e:	619a      	str	r2, [r3, #24]
      break;
 8107770:	e084      	b.n	810787c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8107772:	68fb      	ldr	r3, [r7, #12]
 8107774:	681b      	ldr	r3, [r3, #0]
 8107776:	68b9      	ldr	r1, [r7, #8]
 8107778:	4618      	mov	r0, r3
 810777a:	f000 fbe5 	bl	8107f48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810777e:	68fb      	ldr	r3, [r7, #12]
 8107780:	681b      	ldr	r3, [r3, #0]
 8107782:	69da      	ldr	r2, [r3, #28]
 8107784:	68fb      	ldr	r3, [r7, #12]
 8107786:	681b      	ldr	r3, [r3, #0]
 8107788:	f042 0208 	orr.w	r2, r2, #8
 810778c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810778e:	68fb      	ldr	r3, [r7, #12]
 8107790:	681b      	ldr	r3, [r3, #0]
 8107792:	69da      	ldr	r2, [r3, #28]
 8107794:	68fb      	ldr	r3, [r7, #12]
 8107796:	681b      	ldr	r3, [r3, #0]
 8107798:	f022 0204 	bic.w	r2, r2, #4
 810779c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810779e:	68fb      	ldr	r3, [r7, #12]
 81077a0:	681b      	ldr	r3, [r3, #0]
 81077a2:	69d9      	ldr	r1, [r3, #28]
 81077a4:	68bb      	ldr	r3, [r7, #8]
 81077a6:	691a      	ldr	r2, [r3, #16]
 81077a8:	68fb      	ldr	r3, [r7, #12]
 81077aa:	681b      	ldr	r3, [r3, #0]
 81077ac:	430a      	orrs	r2, r1
 81077ae:	61da      	str	r2, [r3, #28]
      break;
 81077b0:	e064      	b.n	810787c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81077b2:	68fb      	ldr	r3, [r7, #12]
 81077b4:	681b      	ldr	r3, [r3, #0]
 81077b6:	68b9      	ldr	r1, [r7, #8]
 81077b8:	4618      	mov	r0, r3
 81077ba:	f000 fc4d 	bl	8108058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81077be:	68fb      	ldr	r3, [r7, #12]
 81077c0:	681b      	ldr	r3, [r3, #0]
 81077c2:	69da      	ldr	r2, [r3, #28]
 81077c4:	68fb      	ldr	r3, [r7, #12]
 81077c6:	681b      	ldr	r3, [r3, #0]
 81077c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81077cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81077ce:	68fb      	ldr	r3, [r7, #12]
 81077d0:	681b      	ldr	r3, [r3, #0]
 81077d2:	69da      	ldr	r2, [r3, #28]
 81077d4:	68fb      	ldr	r3, [r7, #12]
 81077d6:	681b      	ldr	r3, [r3, #0]
 81077d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81077dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81077de:	68fb      	ldr	r3, [r7, #12]
 81077e0:	681b      	ldr	r3, [r3, #0]
 81077e2:	69d9      	ldr	r1, [r3, #28]
 81077e4:	68bb      	ldr	r3, [r7, #8]
 81077e6:	691b      	ldr	r3, [r3, #16]
 81077e8:	021a      	lsls	r2, r3, #8
 81077ea:	68fb      	ldr	r3, [r7, #12]
 81077ec:	681b      	ldr	r3, [r3, #0]
 81077ee:	430a      	orrs	r2, r1
 81077f0:	61da      	str	r2, [r3, #28]
      break;
 81077f2:	e043      	b.n	810787c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81077f4:	68fb      	ldr	r3, [r7, #12]
 81077f6:	681b      	ldr	r3, [r3, #0]
 81077f8:	68b9      	ldr	r1, [r7, #8]
 81077fa:	4618      	mov	r0, r3
 81077fc:	f000 fc96 	bl	810812c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8107800:	68fb      	ldr	r3, [r7, #12]
 8107802:	681b      	ldr	r3, [r3, #0]
 8107804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107806:	68fb      	ldr	r3, [r7, #12]
 8107808:	681b      	ldr	r3, [r3, #0]
 810780a:	f042 0208 	orr.w	r2, r2, #8
 810780e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8107810:	68fb      	ldr	r3, [r7, #12]
 8107812:	681b      	ldr	r3, [r3, #0]
 8107814:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107816:	68fb      	ldr	r3, [r7, #12]
 8107818:	681b      	ldr	r3, [r3, #0]
 810781a:	f022 0204 	bic.w	r2, r2, #4
 810781e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107820:	68fb      	ldr	r3, [r7, #12]
 8107822:	681b      	ldr	r3, [r3, #0]
 8107824:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8107826:	68bb      	ldr	r3, [r7, #8]
 8107828:	691a      	ldr	r2, [r3, #16]
 810782a:	68fb      	ldr	r3, [r7, #12]
 810782c:	681b      	ldr	r3, [r3, #0]
 810782e:	430a      	orrs	r2, r1
 8107830:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8107832:	e023      	b.n	810787c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8107834:	68fb      	ldr	r3, [r7, #12]
 8107836:	681b      	ldr	r3, [r3, #0]
 8107838:	68b9      	ldr	r1, [r7, #8]
 810783a:	4618      	mov	r0, r3
 810783c:	f000 fcda 	bl	81081f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8107840:	68fb      	ldr	r3, [r7, #12]
 8107842:	681b      	ldr	r3, [r3, #0]
 8107844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107846:	68fb      	ldr	r3, [r7, #12]
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810784e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8107850:	68fb      	ldr	r3, [r7, #12]
 8107852:	681b      	ldr	r3, [r3, #0]
 8107854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107856:	68fb      	ldr	r3, [r7, #12]
 8107858:	681b      	ldr	r3, [r3, #0]
 810785a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810785e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8107860:	68fb      	ldr	r3, [r7, #12]
 8107862:	681b      	ldr	r3, [r3, #0]
 8107864:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8107866:	68bb      	ldr	r3, [r7, #8]
 8107868:	691b      	ldr	r3, [r3, #16]
 810786a:	021a      	lsls	r2, r3, #8
 810786c:	68fb      	ldr	r3, [r7, #12]
 810786e:	681b      	ldr	r3, [r3, #0]
 8107870:	430a      	orrs	r2, r1
 8107872:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8107874:	e002      	b.n	810787c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8107876:	2301      	movs	r3, #1
 8107878:	75fb      	strb	r3, [r7, #23]
      break;
 810787a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810787c:	68fb      	ldr	r3, [r7, #12]
 810787e:	2200      	movs	r2, #0
 8107880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8107884:	7dfb      	ldrb	r3, [r7, #23]
}
 8107886:	4618      	mov	r0, r3
 8107888:	3718      	adds	r7, #24
 810788a:	46bd      	mov	sp, r7
 810788c:	bd80      	pop	{r7, pc}
 810788e:	bf00      	nop

08107890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8107890:	b580      	push	{r7, lr}
 8107892:	b084      	sub	sp, #16
 8107894:	af00      	add	r7, sp, #0
 8107896:	6078      	str	r0, [r7, #4]
 8107898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810789a:	2300      	movs	r3, #0
 810789c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810789e:	687b      	ldr	r3, [r7, #4]
 81078a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81078a4:	2b01      	cmp	r3, #1
 81078a6:	d101      	bne.n	81078ac <HAL_TIM_ConfigClockSource+0x1c>
 81078a8:	2302      	movs	r3, #2
 81078aa:	e0de      	b.n	8107a6a <HAL_TIM_ConfigClockSource+0x1da>
 81078ac:	687b      	ldr	r3, [r7, #4]
 81078ae:	2201      	movs	r2, #1
 81078b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81078b4:	687b      	ldr	r3, [r7, #4]
 81078b6:	2202      	movs	r2, #2
 81078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81078bc:	687b      	ldr	r3, [r7, #4]
 81078be:	681b      	ldr	r3, [r3, #0]
 81078c0:	689b      	ldr	r3, [r3, #8]
 81078c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81078c4:	68bb      	ldr	r3, [r7, #8]
 81078c6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81078ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81078ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81078d0:	68bb      	ldr	r3, [r7, #8]
 81078d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81078d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81078d8:	687b      	ldr	r3, [r7, #4]
 81078da:	681b      	ldr	r3, [r3, #0]
 81078dc:	68ba      	ldr	r2, [r7, #8]
 81078de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81078e0:	683b      	ldr	r3, [r7, #0]
 81078e2:	681b      	ldr	r3, [r3, #0]
 81078e4:	4a63      	ldr	r2, [pc, #396]	; (8107a74 <HAL_TIM_ConfigClockSource+0x1e4>)
 81078e6:	4293      	cmp	r3, r2
 81078e8:	f000 80a9 	beq.w	8107a3e <HAL_TIM_ConfigClockSource+0x1ae>
 81078ec:	4a61      	ldr	r2, [pc, #388]	; (8107a74 <HAL_TIM_ConfigClockSource+0x1e4>)
 81078ee:	4293      	cmp	r3, r2
 81078f0:	f200 80ae 	bhi.w	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 81078f4:	4a60      	ldr	r2, [pc, #384]	; (8107a78 <HAL_TIM_ConfigClockSource+0x1e8>)
 81078f6:	4293      	cmp	r3, r2
 81078f8:	f000 80a1 	beq.w	8107a3e <HAL_TIM_ConfigClockSource+0x1ae>
 81078fc:	4a5e      	ldr	r2, [pc, #376]	; (8107a78 <HAL_TIM_ConfigClockSource+0x1e8>)
 81078fe:	4293      	cmp	r3, r2
 8107900:	f200 80a6 	bhi.w	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 8107904:	4a5d      	ldr	r2, [pc, #372]	; (8107a7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8107906:	4293      	cmp	r3, r2
 8107908:	f000 8099 	beq.w	8107a3e <HAL_TIM_ConfigClockSource+0x1ae>
 810790c:	4a5b      	ldr	r2, [pc, #364]	; (8107a7c <HAL_TIM_ConfigClockSource+0x1ec>)
 810790e:	4293      	cmp	r3, r2
 8107910:	f200 809e 	bhi.w	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 8107914:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8107918:	f000 8091 	beq.w	8107a3e <HAL_TIM_ConfigClockSource+0x1ae>
 810791c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8107920:	f200 8096 	bhi.w	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 8107924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107928:	f000 8089 	beq.w	8107a3e <HAL_TIM_ConfigClockSource+0x1ae>
 810792c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107930:	f200 808e 	bhi.w	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 8107934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107938:	d03e      	beq.n	81079b8 <HAL_TIM_ConfigClockSource+0x128>
 810793a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810793e:	f200 8087 	bhi.w	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 8107942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107946:	f000 8086 	beq.w	8107a56 <HAL_TIM_ConfigClockSource+0x1c6>
 810794a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810794e:	d87f      	bhi.n	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 8107950:	2b70      	cmp	r3, #112	; 0x70
 8107952:	d01a      	beq.n	810798a <HAL_TIM_ConfigClockSource+0xfa>
 8107954:	2b70      	cmp	r3, #112	; 0x70
 8107956:	d87b      	bhi.n	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 8107958:	2b60      	cmp	r3, #96	; 0x60
 810795a:	d050      	beq.n	81079fe <HAL_TIM_ConfigClockSource+0x16e>
 810795c:	2b60      	cmp	r3, #96	; 0x60
 810795e:	d877      	bhi.n	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 8107960:	2b50      	cmp	r3, #80	; 0x50
 8107962:	d03c      	beq.n	81079de <HAL_TIM_ConfigClockSource+0x14e>
 8107964:	2b50      	cmp	r3, #80	; 0x50
 8107966:	d873      	bhi.n	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 8107968:	2b40      	cmp	r3, #64	; 0x40
 810796a:	d058      	beq.n	8107a1e <HAL_TIM_ConfigClockSource+0x18e>
 810796c:	2b40      	cmp	r3, #64	; 0x40
 810796e:	d86f      	bhi.n	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 8107970:	2b30      	cmp	r3, #48	; 0x30
 8107972:	d064      	beq.n	8107a3e <HAL_TIM_ConfigClockSource+0x1ae>
 8107974:	2b30      	cmp	r3, #48	; 0x30
 8107976:	d86b      	bhi.n	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 8107978:	2b20      	cmp	r3, #32
 810797a:	d060      	beq.n	8107a3e <HAL_TIM_ConfigClockSource+0x1ae>
 810797c:	2b20      	cmp	r3, #32
 810797e:	d867      	bhi.n	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
 8107980:	2b00      	cmp	r3, #0
 8107982:	d05c      	beq.n	8107a3e <HAL_TIM_ConfigClockSource+0x1ae>
 8107984:	2b10      	cmp	r3, #16
 8107986:	d05a      	beq.n	8107a3e <HAL_TIM_ConfigClockSource+0x1ae>
 8107988:	e062      	b.n	8107a50 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810798a:	687b      	ldr	r3, [r7, #4]
 810798c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810798e:	683b      	ldr	r3, [r7, #0]
 8107990:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8107992:	683b      	ldr	r3, [r7, #0]
 8107994:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8107996:	683b      	ldr	r3, [r7, #0]
 8107998:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810799a:	f000 ff21 	bl	81087e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810799e:	687b      	ldr	r3, [r7, #4]
 81079a0:	681b      	ldr	r3, [r3, #0]
 81079a2:	689b      	ldr	r3, [r3, #8]
 81079a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81079a6:	68bb      	ldr	r3, [r7, #8]
 81079a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81079ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 81079ae:	687b      	ldr	r3, [r7, #4]
 81079b0:	681b      	ldr	r3, [r3, #0]
 81079b2:	68ba      	ldr	r2, [r7, #8]
 81079b4:	609a      	str	r2, [r3, #8]
      break;
 81079b6:	e04f      	b.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81079b8:	687b      	ldr	r3, [r7, #4]
 81079ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 81079bc:	683b      	ldr	r3, [r7, #0]
 81079be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 81079c0:	683b      	ldr	r3, [r7, #0]
 81079c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 81079c4:	683b      	ldr	r3, [r7, #0]
 81079c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 81079c8:	f000 ff0a 	bl	81087e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81079cc:	687b      	ldr	r3, [r7, #4]
 81079ce:	681b      	ldr	r3, [r3, #0]
 81079d0:	689a      	ldr	r2, [r3, #8]
 81079d2:	687b      	ldr	r3, [r7, #4]
 81079d4:	681b      	ldr	r3, [r3, #0]
 81079d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81079da:	609a      	str	r2, [r3, #8]
      break;
 81079dc:	e03c      	b.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81079de:	687b      	ldr	r3, [r7, #4]
 81079e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81079e2:	683b      	ldr	r3, [r7, #0]
 81079e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81079e6:	683b      	ldr	r3, [r7, #0]
 81079e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 81079ea:	461a      	mov	r2, r3
 81079ec:	f000 fdc6 	bl	810857c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81079f0:	687b      	ldr	r3, [r7, #4]
 81079f2:	681b      	ldr	r3, [r3, #0]
 81079f4:	2150      	movs	r1, #80	; 0x50
 81079f6:	4618      	mov	r0, r3
 81079f8:	f000 fed5 	bl	81087a6 <TIM_ITRx_SetConfig>
      break;
 81079fc:	e02c      	b.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 81079fe:	687b      	ldr	r3, [r7, #4]
 8107a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8107a02:	683b      	ldr	r3, [r7, #0]
 8107a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8107a06:	683b      	ldr	r3, [r7, #0]
 8107a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8107a0a:	461a      	mov	r2, r3
 8107a0c:	f000 fe22 	bl	8108654 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8107a10:	687b      	ldr	r3, [r7, #4]
 8107a12:	681b      	ldr	r3, [r3, #0]
 8107a14:	2160      	movs	r1, #96	; 0x60
 8107a16:	4618      	mov	r0, r3
 8107a18:	f000 fec5 	bl	81087a6 <TIM_ITRx_SetConfig>
      break;
 8107a1c:	e01c      	b.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8107a1e:	687b      	ldr	r3, [r7, #4]
 8107a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8107a22:	683b      	ldr	r3, [r7, #0]
 8107a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8107a26:	683b      	ldr	r3, [r7, #0]
 8107a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8107a2a:	461a      	mov	r2, r3
 8107a2c:	f000 fda6 	bl	810857c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8107a30:	687b      	ldr	r3, [r7, #4]
 8107a32:	681b      	ldr	r3, [r3, #0]
 8107a34:	2140      	movs	r1, #64	; 0x40
 8107a36:	4618      	mov	r0, r3
 8107a38:	f000 feb5 	bl	81087a6 <TIM_ITRx_SetConfig>
      break;
 8107a3c:	e00c      	b.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8107a3e:	687b      	ldr	r3, [r7, #4]
 8107a40:	681a      	ldr	r2, [r3, #0]
 8107a42:	683b      	ldr	r3, [r7, #0]
 8107a44:	681b      	ldr	r3, [r3, #0]
 8107a46:	4619      	mov	r1, r3
 8107a48:	4610      	mov	r0, r2
 8107a4a:	f000 feac 	bl	81087a6 <TIM_ITRx_SetConfig>
      break;
 8107a4e:	e003      	b.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8107a50:	2301      	movs	r3, #1
 8107a52:	73fb      	strb	r3, [r7, #15]
      break;
 8107a54:	e000      	b.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8107a56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8107a58:	687b      	ldr	r3, [r7, #4]
 8107a5a:	2201      	movs	r2, #1
 8107a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107a60:	687b      	ldr	r3, [r7, #4]
 8107a62:	2200      	movs	r2, #0
 8107a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8107a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8107a6a:	4618      	mov	r0, r3
 8107a6c:	3710      	adds	r7, #16
 8107a6e:	46bd      	mov	sp, r7
 8107a70:	bd80      	pop	{r7, pc}
 8107a72:	bf00      	nop
 8107a74:	00100040 	.word	0x00100040
 8107a78:	00100030 	.word	0x00100030
 8107a7c:	00100020 	.word	0x00100020

08107a80 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8107a80:	b580      	push	{r7, lr}
 8107a82:	b082      	sub	sp, #8
 8107a84:	af00      	add	r7, sp, #0
 8107a86:	6078      	str	r0, [r7, #4]
 8107a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8107a8a:	687b      	ldr	r3, [r7, #4]
 8107a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107a90:	2b01      	cmp	r3, #1
 8107a92:	d101      	bne.n	8107a98 <HAL_TIM_SlaveConfigSynchro+0x18>
 8107a94:	2302      	movs	r3, #2
 8107a96:	e031      	b.n	8107afc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8107a98:	687b      	ldr	r3, [r7, #4]
 8107a9a:	2201      	movs	r2, #1
 8107a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	2202      	movs	r2, #2
 8107aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8107aa8:	6839      	ldr	r1, [r7, #0]
 8107aaa:	6878      	ldr	r0, [r7, #4]
 8107aac:	f000 fc08 	bl	81082c0 <TIM_SlaveTimer_SetConfig>
 8107ab0:	4603      	mov	r3, r0
 8107ab2:	2b00      	cmp	r3, #0
 8107ab4:	d009      	beq.n	8107aca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	2201      	movs	r2, #1
 8107aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8107abe:	687b      	ldr	r3, [r7, #4]
 8107ac0:	2200      	movs	r2, #0
 8107ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8107ac6:	2301      	movs	r3, #1
 8107ac8:	e018      	b.n	8107afc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8107aca:	687b      	ldr	r3, [r7, #4]
 8107acc:	681b      	ldr	r3, [r3, #0]
 8107ace:	68da      	ldr	r2, [r3, #12]
 8107ad0:	687b      	ldr	r3, [r7, #4]
 8107ad2:	681b      	ldr	r3, [r3, #0]
 8107ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8107ad8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8107ada:	687b      	ldr	r3, [r7, #4]
 8107adc:	681b      	ldr	r3, [r3, #0]
 8107ade:	68da      	ldr	r2, [r3, #12]
 8107ae0:	687b      	ldr	r3, [r7, #4]
 8107ae2:	681b      	ldr	r3, [r3, #0]
 8107ae4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107ae8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8107aea:	687b      	ldr	r3, [r7, #4]
 8107aec:	2201      	movs	r2, #1
 8107aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107af2:	687b      	ldr	r3, [r7, #4]
 8107af4:	2200      	movs	r2, #0
 8107af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107afa:	2300      	movs	r3, #0
}
 8107afc:	4618      	mov	r0, r3
 8107afe:	3708      	adds	r7, #8
 8107b00:	46bd      	mov	sp, r7
 8107b02:	bd80      	pop	{r7, pc}

08107b04 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8107b04:	b480      	push	{r7}
 8107b06:	b085      	sub	sp, #20
 8107b08:	af00      	add	r7, sp, #0
 8107b0a:	6078      	str	r0, [r7, #4]
 8107b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8107b0e:	2300      	movs	r3, #0
 8107b10:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8107b12:	683b      	ldr	r3, [r7, #0]
 8107b14:	2b0c      	cmp	r3, #12
 8107b16:	d831      	bhi.n	8107b7c <HAL_TIM_ReadCapturedValue+0x78>
 8107b18:	a201      	add	r2, pc, #4	; (adr r2, 8107b20 <HAL_TIM_ReadCapturedValue+0x1c>)
 8107b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b1e:	bf00      	nop
 8107b20:	08107b55 	.word	0x08107b55
 8107b24:	08107b7d 	.word	0x08107b7d
 8107b28:	08107b7d 	.word	0x08107b7d
 8107b2c:	08107b7d 	.word	0x08107b7d
 8107b30:	08107b5f 	.word	0x08107b5f
 8107b34:	08107b7d 	.word	0x08107b7d
 8107b38:	08107b7d 	.word	0x08107b7d
 8107b3c:	08107b7d 	.word	0x08107b7d
 8107b40:	08107b69 	.word	0x08107b69
 8107b44:	08107b7d 	.word	0x08107b7d
 8107b48:	08107b7d 	.word	0x08107b7d
 8107b4c:	08107b7d 	.word	0x08107b7d
 8107b50:	08107b73 	.word	0x08107b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8107b54:	687b      	ldr	r3, [r7, #4]
 8107b56:	681b      	ldr	r3, [r3, #0]
 8107b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107b5a:	60fb      	str	r3, [r7, #12]

      break;
 8107b5c:	e00f      	b.n	8107b7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8107b5e:	687b      	ldr	r3, [r7, #4]
 8107b60:	681b      	ldr	r3, [r3, #0]
 8107b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b64:	60fb      	str	r3, [r7, #12]

      break;
 8107b66:	e00a      	b.n	8107b7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8107b68:	687b      	ldr	r3, [r7, #4]
 8107b6a:	681b      	ldr	r3, [r3, #0]
 8107b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107b6e:	60fb      	str	r3, [r7, #12]

      break;
 8107b70:	e005      	b.n	8107b7e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8107b72:	687b      	ldr	r3, [r7, #4]
 8107b74:	681b      	ldr	r3, [r3, #0]
 8107b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107b78:	60fb      	str	r3, [r7, #12]

      break;
 8107b7a:	e000      	b.n	8107b7e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8107b7c:	bf00      	nop
  }

  return tmpreg;
 8107b7e:	68fb      	ldr	r3, [r7, #12]
}
 8107b80:	4618      	mov	r0, r3
 8107b82:	3714      	adds	r7, #20
 8107b84:	46bd      	mov	sp, r7
 8107b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b8a:	4770      	bx	lr

08107b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107b8c:	b480      	push	{r7}
 8107b8e:	b083      	sub	sp, #12
 8107b90:	af00      	add	r7, sp, #0
 8107b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107b94:	bf00      	nop
 8107b96:	370c      	adds	r7, #12
 8107b98:	46bd      	mov	sp, r7
 8107b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b9e:	4770      	bx	lr

08107ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107ba0:	b480      	push	{r7}
 8107ba2:	b083      	sub	sp, #12
 8107ba4:	af00      	add	r7, sp, #0
 8107ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8107ba8:	bf00      	nop
 8107baa:	370c      	adds	r7, #12
 8107bac:	46bd      	mov	sp, r7
 8107bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bb2:	4770      	bx	lr

08107bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8107bb4:	b480      	push	{r7}
 8107bb6:	b083      	sub	sp, #12
 8107bb8:	af00      	add	r7, sp, #0
 8107bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107bbc:	bf00      	nop
 8107bbe:	370c      	adds	r7, #12
 8107bc0:	46bd      	mov	sp, r7
 8107bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bc6:	4770      	bx	lr

08107bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8107bc8:	b480      	push	{r7}
 8107bca:	b085      	sub	sp, #20
 8107bcc:	af00      	add	r7, sp, #0
 8107bce:	6078      	str	r0, [r7, #4]
 8107bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107bd2:	687b      	ldr	r3, [r7, #4]
 8107bd4:	681b      	ldr	r3, [r3, #0]
 8107bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107bd8:	687b      	ldr	r3, [r7, #4]
 8107bda:	4a46      	ldr	r2, [pc, #280]	; (8107cf4 <TIM_Base_SetConfig+0x12c>)
 8107bdc:	4293      	cmp	r3, r2
 8107bde:	d013      	beq.n	8107c08 <TIM_Base_SetConfig+0x40>
 8107be0:	687b      	ldr	r3, [r7, #4]
 8107be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107be6:	d00f      	beq.n	8107c08 <TIM_Base_SetConfig+0x40>
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	4a43      	ldr	r2, [pc, #268]	; (8107cf8 <TIM_Base_SetConfig+0x130>)
 8107bec:	4293      	cmp	r3, r2
 8107bee:	d00b      	beq.n	8107c08 <TIM_Base_SetConfig+0x40>
 8107bf0:	687b      	ldr	r3, [r7, #4]
 8107bf2:	4a42      	ldr	r2, [pc, #264]	; (8107cfc <TIM_Base_SetConfig+0x134>)
 8107bf4:	4293      	cmp	r3, r2
 8107bf6:	d007      	beq.n	8107c08 <TIM_Base_SetConfig+0x40>
 8107bf8:	687b      	ldr	r3, [r7, #4]
 8107bfa:	4a41      	ldr	r2, [pc, #260]	; (8107d00 <TIM_Base_SetConfig+0x138>)
 8107bfc:	4293      	cmp	r3, r2
 8107bfe:	d003      	beq.n	8107c08 <TIM_Base_SetConfig+0x40>
 8107c00:	687b      	ldr	r3, [r7, #4]
 8107c02:	4a40      	ldr	r2, [pc, #256]	; (8107d04 <TIM_Base_SetConfig+0x13c>)
 8107c04:	4293      	cmp	r3, r2
 8107c06:	d108      	bne.n	8107c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107c08:	68fb      	ldr	r3, [r7, #12]
 8107c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107c10:	683b      	ldr	r3, [r7, #0]
 8107c12:	685b      	ldr	r3, [r3, #4]
 8107c14:	68fa      	ldr	r2, [r7, #12]
 8107c16:	4313      	orrs	r3, r2
 8107c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107c1a:	687b      	ldr	r3, [r7, #4]
 8107c1c:	4a35      	ldr	r2, [pc, #212]	; (8107cf4 <TIM_Base_SetConfig+0x12c>)
 8107c1e:	4293      	cmp	r3, r2
 8107c20:	d01f      	beq.n	8107c62 <TIM_Base_SetConfig+0x9a>
 8107c22:	687b      	ldr	r3, [r7, #4]
 8107c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107c28:	d01b      	beq.n	8107c62 <TIM_Base_SetConfig+0x9a>
 8107c2a:	687b      	ldr	r3, [r7, #4]
 8107c2c:	4a32      	ldr	r2, [pc, #200]	; (8107cf8 <TIM_Base_SetConfig+0x130>)
 8107c2e:	4293      	cmp	r3, r2
 8107c30:	d017      	beq.n	8107c62 <TIM_Base_SetConfig+0x9a>
 8107c32:	687b      	ldr	r3, [r7, #4]
 8107c34:	4a31      	ldr	r2, [pc, #196]	; (8107cfc <TIM_Base_SetConfig+0x134>)
 8107c36:	4293      	cmp	r3, r2
 8107c38:	d013      	beq.n	8107c62 <TIM_Base_SetConfig+0x9a>
 8107c3a:	687b      	ldr	r3, [r7, #4]
 8107c3c:	4a30      	ldr	r2, [pc, #192]	; (8107d00 <TIM_Base_SetConfig+0x138>)
 8107c3e:	4293      	cmp	r3, r2
 8107c40:	d00f      	beq.n	8107c62 <TIM_Base_SetConfig+0x9a>
 8107c42:	687b      	ldr	r3, [r7, #4]
 8107c44:	4a2f      	ldr	r2, [pc, #188]	; (8107d04 <TIM_Base_SetConfig+0x13c>)
 8107c46:	4293      	cmp	r3, r2
 8107c48:	d00b      	beq.n	8107c62 <TIM_Base_SetConfig+0x9a>
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	4a2e      	ldr	r2, [pc, #184]	; (8107d08 <TIM_Base_SetConfig+0x140>)
 8107c4e:	4293      	cmp	r3, r2
 8107c50:	d007      	beq.n	8107c62 <TIM_Base_SetConfig+0x9a>
 8107c52:	687b      	ldr	r3, [r7, #4]
 8107c54:	4a2d      	ldr	r2, [pc, #180]	; (8107d0c <TIM_Base_SetConfig+0x144>)
 8107c56:	4293      	cmp	r3, r2
 8107c58:	d003      	beq.n	8107c62 <TIM_Base_SetConfig+0x9a>
 8107c5a:	687b      	ldr	r3, [r7, #4]
 8107c5c:	4a2c      	ldr	r2, [pc, #176]	; (8107d10 <TIM_Base_SetConfig+0x148>)
 8107c5e:	4293      	cmp	r3, r2
 8107c60:	d108      	bne.n	8107c74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107c62:	68fb      	ldr	r3, [r7, #12]
 8107c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107c6a:	683b      	ldr	r3, [r7, #0]
 8107c6c:	68db      	ldr	r3, [r3, #12]
 8107c6e:	68fa      	ldr	r2, [r7, #12]
 8107c70:	4313      	orrs	r3, r2
 8107c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107c74:	68fb      	ldr	r3, [r7, #12]
 8107c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107c7a:	683b      	ldr	r3, [r7, #0]
 8107c7c:	695b      	ldr	r3, [r3, #20]
 8107c7e:	4313      	orrs	r3, r2
 8107c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107c82:	687b      	ldr	r3, [r7, #4]
 8107c84:	68fa      	ldr	r2, [r7, #12]
 8107c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107c88:	683b      	ldr	r3, [r7, #0]
 8107c8a:	689a      	ldr	r2, [r3, #8]
 8107c8c:	687b      	ldr	r3, [r7, #4]
 8107c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107c90:	683b      	ldr	r3, [r7, #0]
 8107c92:	681a      	ldr	r2, [r3, #0]
 8107c94:	687b      	ldr	r3, [r7, #4]
 8107c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	4a16      	ldr	r2, [pc, #88]	; (8107cf4 <TIM_Base_SetConfig+0x12c>)
 8107c9c:	4293      	cmp	r3, r2
 8107c9e:	d00f      	beq.n	8107cc0 <TIM_Base_SetConfig+0xf8>
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	4a18      	ldr	r2, [pc, #96]	; (8107d04 <TIM_Base_SetConfig+0x13c>)
 8107ca4:	4293      	cmp	r3, r2
 8107ca6:	d00b      	beq.n	8107cc0 <TIM_Base_SetConfig+0xf8>
 8107ca8:	687b      	ldr	r3, [r7, #4]
 8107caa:	4a17      	ldr	r2, [pc, #92]	; (8107d08 <TIM_Base_SetConfig+0x140>)
 8107cac:	4293      	cmp	r3, r2
 8107cae:	d007      	beq.n	8107cc0 <TIM_Base_SetConfig+0xf8>
 8107cb0:	687b      	ldr	r3, [r7, #4]
 8107cb2:	4a16      	ldr	r2, [pc, #88]	; (8107d0c <TIM_Base_SetConfig+0x144>)
 8107cb4:	4293      	cmp	r3, r2
 8107cb6:	d003      	beq.n	8107cc0 <TIM_Base_SetConfig+0xf8>
 8107cb8:	687b      	ldr	r3, [r7, #4]
 8107cba:	4a15      	ldr	r2, [pc, #84]	; (8107d10 <TIM_Base_SetConfig+0x148>)
 8107cbc:	4293      	cmp	r3, r2
 8107cbe:	d103      	bne.n	8107cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107cc0:	683b      	ldr	r3, [r7, #0]
 8107cc2:	691a      	ldr	r2, [r3, #16]
 8107cc4:	687b      	ldr	r3, [r7, #4]
 8107cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107cc8:	687b      	ldr	r3, [r7, #4]
 8107cca:	2201      	movs	r2, #1
 8107ccc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8107cce:	687b      	ldr	r3, [r7, #4]
 8107cd0:	691b      	ldr	r3, [r3, #16]
 8107cd2:	f003 0301 	and.w	r3, r3, #1
 8107cd6:	2b01      	cmp	r3, #1
 8107cd8:	d105      	bne.n	8107ce6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	691b      	ldr	r3, [r3, #16]
 8107cde:	f023 0201 	bic.w	r2, r3, #1
 8107ce2:	687b      	ldr	r3, [r7, #4]
 8107ce4:	611a      	str	r2, [r3, #16]
  }
}
 8107ce6:	bf00      	nop
 8107ce8:	3714      	adds	r7, #20
 8107cea:	46bd      	mov	sp, r7
 8107cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cf0:	4770      	bx	lr
 8107cf2:	bf00      	nop
 8107cf4:	40010000 	.word	0x40010000
 8107cf8:	40000400 	.word	0x40000400
 8107cfc:	40000800 	.word	0x40000800
 8107d00:	40000c00 	.word	0x40000c00
 8107d04:	40010400 	.word	0x40010400
 8107d08:	40014000 	.word	0x40014000
 8107d0c:	40014400 	.word	0x40014400
 8107d10:	40014800 	.word	0x40014800

08107d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107d14:	b480      	push	{r7}
 8107d16:	b087      	sub	sp, #28
 8107d18:	af00      	add	r7, sp, #0
 8107d1a:	6078      	str	r0, [r7, #4]
 8107d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107d1e:	687b      	ldr	r3, [r7, #4]
 8107d20:	6a1b      	ldr	r3, [r3, #32]
 8107d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107d24:	687b      	ldr	r3, [r7, #4]
 8107d26:	6a1b      	ldr	r3, [r3, #32]
 8107d28:	f023 0201 	bic.w	r2, r3, #1
 8107d2c:	687b      	ldr	r3, [r7, #4]
 8107d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	685b      	ldr	r3, [r3, #4]
 8107d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107d36:	687b      	ldr	r3, [r7, #4]
 8107d38:	699b      	ldr	r3, [r3, #24]
 8107d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8107d3c:	68fb      	ldr	r3, [r7, #12]
 8107d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107d48:	68fb      	ldr	r3, [r7, #12]
 8107d4a:	f023 0303 	bic.w	r3, r3, #3
 8107d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107d50:	683b      	ldr	r3, [r7, #0]
 8107d52:	681b      	ldr	r3, [r3, #0]
 8107d54:	68fa      	ldr	r2, [r7, #12]
 8107d56:	4313      	orrs	r3, r2
 8107d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8107d5a:	697b      	ldr	r3, [r7, #20]
 8107d5c:	f023 0302 	bic.w	r3, r3, #2
 8107d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8107d62:	683b      	ldr	r3, [r7, #0]
 8107d64:	689b      	ldr	r3, [r3, #8]
 8107d66:	697a      	ldr	r2, [r7, #20]
 8107d68:	4313      	orrs	r3, r2
 8107d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	4a2c      	ldr	r2, [pc, #176]	; (8107e20 <TIM_OC1_SetConfig+0x10c>)
 8107d70:	4293      	cmp	r3, r2
 8107d72:	d00f      	beq.n	8107d94 <TIM_OC1_SetConfig+0x80>
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	4a2b      	ldr	r2, [pc, #172]	; (8107e24 <TIM_OC1_SetConfig+0x110>)
 8107d78:	4293      	cmp	r3, r2
 8107d7a:	d00b      	beq.n	8107d94 <TIM_OC1_SetConfig+0x80>
 8107d7c:	687b      	ldr	r3, [r7, #4]
 8107d7e:	4a2a      	ldr	r2, [pc, #168]	; (8107e28 <TIM_OC1_SetConfig+0x114>)
 8107d80:	4293      	cmp	r3, r2
 8107d82:	d007      	beq.n	8107d94 <TIM_OC1_SetConfig+0x80>
 8107d84:	687b      	ldr	r3, [r7, #4]
 8107d86:	4a29      	ldr	r2, [pc, #164]	; (8107e2c <TIM_OC1_SetConfig+0x118>)
 8107d88:	4293      	cmp	r3, r2
 8107d8a:	d003      	beq.n	8107d94 <TIM_OC1_SetConfig+0x80>
 8107d8c:	687b      	ldr	r3, [r7, #4]
 8107d8e:	4a28      	ldr	r2, [pc, #160]	; (8107e30 <TIM_OC1_SetConfig+0x11c>)
 8107d90:	4293      	cmp	r3, r2
 8107d92:	d10c      	bne.n	8107dae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107d94:	697b      	ldr	r3, [r7, #20]
 8107d96:	f023 0308 	bic.w	r3, r3, #8
 8107d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107d9c:	683b      	ldr	r3, [r7, #0]
 8107d9e:	68db      	ldr	r3, [r3, #12]
 8107da0:	697a      	ldr	r2, [r7, #20]
 8107da2:	4313      	orrs	r3, r2
 8107da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8107da6:	697b      	ldr	r3, [r7, #20]
 8107da8:	f023 0304 	bic.w	r3, r3, #4
 8107dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107dae:	687b      	ldr	r3, [r7, #4]
 8107db0:	4a1b      	ldr	r2, [pc, #108]	; (8107e20 <TIM_OC1_SetConfig+0x10c>)
 8107db2:	4293      	cmp	r3, r2
 8107db4:	d00f      	beq.n	8107dd6 <TIM_OC1_SetConfig+0xc2>
 8107db6:	687b      	ldr	r3, [r7, #4]
 8107db8:	4a1a      	ldr	r2, [pc, #104]	; (8107e24 <TIM_OC1_SetConfig+0x110>)
 8107dba:	4293      	cmp	r3, r2
 8107dbc:	d00b      	beq.n	8107dd6 <TIM_OC1_SetConfig+0xc2>
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	4a19      	ldr	r2, [pc, #100]	; (8107e28 <TIM_OC1_SetConfig+0x114>)
 8107dc2:	4293      	cmp	r3, r2
 8107dc4:	d007      	beq.n	8107dd6 <TIM_OC1_SetConfig+0xc2>
 8107dc6:	687b      	ldr	r3, [r7, #4]
 8107dc8:	4a18      	ldr	r2, [pc, #96]	; (8107e2c <TIM_OC1_SetConfig+0x118>)
 8107dca:	4293      	cmp	r3, r2
 8107dcc:	d003      	beq.n	8107dd6 <TIM_OC1_SetConfig+0xc2>
 8107dce:	687b      	ldr	r3, [r7, #4]
 8107dd0:	4a17      	ldr	r2, [pc, #92]	; (8107e30 <TIM_OC1_SetConfig+0x11c>)
 8107dd2:	4293      	cmp	r3, r2
 8107dd4:	d111      	bne.n	8107dfa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8107dd6:	693b      	ldr	r3, [r7, #16]
 8107dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107dde:	693b      	ldr	r3, [r7, #16]
 8107de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8107de6:	683b      	ldr	r3, [r7, #0]
 8107de8:	695b      	ldr	r3, [r3, #20]
 8107dea:	693a      	ldr	r2, [r7, #16]
 8107dec:	4313      	orrs	r3, r2
 8107dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107df0:	683b      	ldr	r3, [r7, #0]
 8107df2:	699b      	ldr	r3, [r3, #24]
 8107df4:	693a      	ldr	r2, [r7, #16]
 8107df6:	4313      	orrs	r3, r2
 8107df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107dfa:	687b      	ldr	r3, [r7, #4]
 8107dfc:	693a      	ldr	r2, [r7, #16]
 8107dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107e00:	687b      	ldr	r3, [r7, #4]
 8107e02:	68fa      	ldr	r2, [r7, #12]
 8107e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8107e06:	683b      	ldr	r3, [r7, #0]
 8107e08:	685a      	ldr	r2, [r3, #4]
 8107e0a:	687b      	ldr	r3, [r7, #4]
 8107e0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107e0e:	687b      	ldr	r3, [r7, #4]
 8107e10:	697a      	ldr	r2, [r7, #20]
 8107e12:	621a      	str	r2, [r3, #32]
}
 8107e14:	bf00      	nop
 8107e16:	371c      	adds	r7, #28
 8107e18:	46bd      	mov	sp, r7
 8107e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e1e:	4770      	bx	lr
 8107e20:	40010000 	.word	0x40010000
 8107e24:	40010400 	.word	0x40010400
 8107e28:	40014000 	.word	0x40014000
 8107e2c:	40014400 	.word	0x40014400
 8107e30:	40014800 	.word	0x40014800

08107e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107e34:	b480      	push	{r7}
 8107e36:	b087      	sub	sp, #28
 8107e38:	af00      	add	r7, sp, #0
 8107e3a:	6078      	str	r0, [r7, #4]
 8107e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107e3e:	687b      	ldr	r3, [r7, #4]
 8107e40:	6a1b      	ldr	r3, [r3, #32]
 8107e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	6a1b      	ldr	r3, [r3, #32]
 8107e48:	f023 0210 	bic.w	r2, r3, #16
 8107e4c:	687b      	ldr	r3, [r7, #4]
 8107e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107e50:	687b      	ldr	r3, [r7, #4]
 8107e52:	685b      	ldr	r3, [r3, #4]
 8107e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107e56:	687b      	ldr	r3, [r7, #4]
 8107e58:	699b      	ldr	r3, [r3, #24]
 8107e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107e5c:	68fb      	ldr	r3, [r7, #12]
 8107e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107e68:	68fb      	ldr	r3, [r7, #12]
 8107e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107e70:	683b      	ldr	r3, [r7, #0]
 8107e72:	681b      	ldr	r3, [r3, #0]
 8107e74:	021b      	lsls	r3, r3, #8
 8107e76:	68fa      	ldr	r2, [r7, #12]
 8107e78:	4313      	orrs	r3, r2
 8107e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107e7c:	697b      	ldr	r3, [r7, #20]
 8107e7e:	f023 0320 	bic.w	r3, r3, #32
 8107e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107e84:	683b      	ldr	r3, [r7, #0]
 8107e86:	689b      	ldr	r3, [r3, #8]
 8107e88:	011b      	lsls	r3, r3, #4
 8107e8a:	697a      	ldr	r2, [r7, #20]
 8107e8c:	4313      	orrs	r3, r2
 8107e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107e90:	687b      	ldr	r3, [r7, #4]
 8107e92:	4a28      	ldr	r2, [pc, #160]	; (8107f34 <TIM_OC2_SetConfig+0x100>)
 8107e94:	4293      	cmp	r3, r2
 8107e96:	d003      	beq.n	8107ea0 <TIM_OC2_SetConfig+0x6c>
 8107e98:	687b      	ldr	r3, [r7, #4]
 8107e9a:	4a27      	ldr	r2, [pc, #156]	; (8107f38 <TIM_OC2_SetConfig+0x104>)
 8107e9c:	4293      	cmp	r3, r2
 8107e9e:	d10d      	bne.n	8107ebc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107ea0:	697b      	ldr	r3, [r7, #20]
 8107ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107ea8:	683b      	ldr	r3, [r7, #0]
 8107eaa:	68db      	ldr	r3, [r3, #12]
 8107eac:	011b      	lsls	r3, r3, #4
 8107eae:	697a      	ldr	r2, [r7, #20]
 8107eb0:	4313      	orrs	r3, r2
 8107eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107eb4:	697b      	ldr	r3, [r7, #20]
 8107eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107eba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	4a1d      	ldr	r2, [pc, #116]	; (8107f34 <TIM_OC2_SetConfig+0x100>)
 8107ec0:	4293      	cmp	r3, r2
 8107ec2:	d00f      	beq.n	8107ee4 <TIM_OC2_SetConfig+0xb0>
 8107ec4:	687b      	ldr	r3, [r7, #4]
 8107ec6:	4a1c      	ldr	r2, [pc, #112]	; (8107f38 <TIM_OC2_SetConfig+0x104>)
 8107ec8:	4293      	cmp	r3, r2
 8107eca:	d00b      	beq.n	8107ee4 <TIM_OC2_SetConfig+0xb0>
 8107ecc:	687b      	ldr	r3, [r7, #4]
 8107ece:	4a1b      	ldr	r2, [pc, #108]	; (8107f3c <TIM_OC2_SetConfig+0x108>)
 8107ed0:	4293      	cmp	r3, r2
 8107ed2:	d007      	beq.n	8107ee4 <TIM_OC2_SetConfig+0xb0>
 8107ed4:	687b      	ldr	r3, [r7, #4]
 8107ed6:	4a1a      	ldr	r2, [pc, #104]	; (8107f40 <TIM_OC2_SetConfig+0x10c>)
 8107ed8:	4293      	cmp	r3, r2
 8107eda:	d003      	beq.n	8107ee4 <TIM_OC2_SetConfig+0xb0>
 8107edc:	687b      	ldr	r3, [r7, #4]
 8107ede:	4a19      	ldr	r2, [pc, #100]	; (8107f44 <TIM_OC2_SetConfig+0x110>)
 8107ee0:	4293      	cmp	r3, r2
 8107ee2:	d113      	bne.n	8107f0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107ee4:	693b      	ldr	r3, [r7, #16]
 8107ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107eec:	693b      	ldr	r3, [r7, #16]
 8107eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107ef4:	683b      	ldr	r3, [r7, #0]
 8107ef6:	695b      	ldr	r3, [r3, #20]
 8107ef8:	009b      	lsls	r3, r3, #2
 8107efa:	693a      	ldr	r2, [r7, #16]
 8107efc:	4313      	orrs	r3, r2
 8107efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107f00:	683b      	ldr	r3, [r7, #0]
 8107f02:	699b      	ldr	r3, [r3, #24]
 8107f04:	009b      	lsls	r3, r3, #2
 8107f06:	693a      	ldr	r2, [r7, #16]
 8107f08:	4313      	orrs	r3, r2
 8107f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107f0c:	687b      	ldr	r3, [r7, #4]
 8107f0e:	693a      	ldr	r2, [r7, #16]
 8107f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107f12:	687b      	ldr	r3, [r7, #4]
 8107f14:	68fa      	ldr	r2, [r7, #12]
 8107f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107f18:	683b      	ldr	r3, [r7, #0]
 8107f1a:	685a      	ldr	r2, [r3, #4]
 8107f1c:	687b      	ldr	r3, [r7, #4]
 8107f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107f20:	687b      	ldr	r3, [r7, #4]
 8107f22:	697a      	ldr	r2, [r7, #20]
 8107f24:	621a      	str	r2, [r3, #32]
}
 8107f26:	bf00      	nop
 8107f28:	371c      	adds	r7, #28
 8107f2a:	46bd      	mov	sp, r7
 8107f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f30:	4770      	bx	lr
 8107f32:	bf00      	nop
 8107f34:	40010000 	.word	0x40010000
 8107f38:	40010400 	.word	0x40010400
 8107f3c:	40014000 	.word	0x40014000
 8107f40:	40014400 	.word	0x40014400
 8107f44:	40014800 	.word	0x40014800

08107f48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107f48:	b480      	push	{r7}
 8107f4a:	b087      	sub	sp, #28
 8107f4c:	af00      	add	r7, sp, #0
 8107f4e:	6078      	str	r0, [r7, #4]
 8107f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107f52:	687b      	ldr	r3, [r7, #4]
 8107f54:	6a1b      	ldr	r3, [r3, #32]
 8107f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107f58:	687b      	ldr	r3, [r7, #4]
 8107f5a:	6a1b      	ldr	r3, [r3, #32]
 8107f5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8107f60:	687b      	ldr	r3, [r7, #4]
 8107f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107f64:	687b      	ldr	r3, [r7, #4]
 8107f66:	685b      	ldr	r3, [r3, #4]
 8107f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107f6a:	687b      	ldr	r3, [r7, #4]
 8107f6c:	69db      	ldr	r3, [r3, #28]
 8107f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107f70:	68fb      	ldr	r3, [r7, #12]
 8107f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107f7c:	68fb      	ldr	r3, [r7, #12]
 8107f7e:	f023 0303 	bic.w	r3, r3, #3
 8107f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107f84:	683b      	ldr	r3, [r7, #0]
 8107f86:	681b      	ldr	r3, [r3, #0]
 8107f88:	68fa      	ldr	r2, [r7, #12]
 8107f8a:	4313      	orrs	r3, r2
 8107f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107f8e:	697b      	ldr	r3, [r7, #20]
 8107f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107f96:	683b      	ldr	r3, [r7, #0]
 8107f98:	689b      	ldr	r3, [r3, #8]
 8107f9a:	021b      	lsls	r3, r3, #8
 8107f9c:	697a      	ldr	r2, [r7, #20]
 8107f9e:	4313      	orrs	r3, r2
 8107fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8107fa2:	687b      	ldr	r3, [r7, #4]
 8107fa4:	4a27      	ldr	r2, [pc, #156]	; (8108044 <TIM_OC3_SetConfig+0xfc>)
 8107fa6:	4293      	cmp	r3, r2
 8107fa8:	d003      	beq.n	8107fb2 <TIM_OC3_SetConfig+0x6a>
 8107faa:	687b      	ldr	r3, [r7, #4]
 8107fac:	4a26      	ldr	r2, [pc, #152]	; (8108048 <TIM_OC3_SetConfig+0x100>)
 8107fae:	4293      	cmp	r3, r2
 8107fb0:	d10d      	bne.n	8107fce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8107fb2:	697b      	ldr	r3, [r7, #20]
 8107fb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107fba:	683b      	ldr	r3, [r7, #0]
 8107fbc:	68db      	ldr	r3, [r3, #12]
 8107fbe:	021b      	lsls	r3, r3, #8
 8107fc0:	697a      	ldr	r2, [r7, #20]
 8107fc2:	4313      	orrs	r3, r2
 8107fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8107fc6:	697b      	ldr	r3, [r7, #20]
 8107fc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107fce:	687b      	ldr	r3, [r7, #4]
 8107fd0:	4a1c      	ldr	r2, [pc, #112]	; (8108044 <TIM_OC3_SetConfig+0xfc>)
 8107fd2:	4293      	cmp	r3, r2
 8107fd4:	d00f      	beq.n	8107ff6 <TIM_OC3_SetConfig+0xae>
 8107fd6:	687b      	ldr	r3, [r7, #4]
 8107fd8:	4a1b      	ldr	r2, [pc, #108]	; (8108048 <TIM_OC3_SetConfig+0x100>)
 8107fda:	4293      	cmp	r3, r2
 8107fdc:	d00b      	beq.n	8107ff6 <TIM_OC3_SetConfig+0xae>
 8107fde:	687b      	ldr	r3, [r7, #4]
 8107fe0:	4a1a      	ldr	r2, [pc, #104]	; (810804c <TIM_OC3_SetConfig+0x104>)
 8107fe2:	4293      	cmp	r3, r2
 8107fe4:	d007      	beq.n	8107ff6 <TIM_OC3_SetConfig+0xae>
 8107fe6:	687b      	ldr	r3, [r7, #4]
 8107fe8:	4a19      	ldr	r2, [pc, #100]	; (8108050 <TIM_OC3_SetConfig+0x108>)
 8107fea:	4293      	cmp	r3, r2
 8107fec:	d003      	beq.n	8107ff6 <TIM_OC3_SetConfig+0xae>
 8107fee:	687b      	ldr	r3, [r7, #4]
 8107ff0:	4a18      	ldr	r2, [pc, #96]	; (8108054 <TIM_OC3_SetConfig+0x10c>)
 8107ff2:	4293      	cmp	r3, r2
 8107ff4:	d113      	bne.n	810801e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8107ff6:	693b      	ldr	r3, [r7, #16]
 8107ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107ffe:	693b      	ldr	r3, [r7, #16]
 8108000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8108004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8108006:	683b      	ldr	r3, [r7, #0]
 8108008:	695b      	ldr	r3, [r3, #20]
 810800a:	011b      	lsls	r3, r3, #4
 810800c:	693a      	ldr	r2, [r7, #16]
 810800e:	4313      	orrs	r3, r2
 8108010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8108012:	683b      	ldr	r3, [r7, #0]
 8108014:	699b      	ldr	r3, [r3, #24]
 8108016:	011b      	lsls	r3, r3, #4
 8108018:	693a      	ldr	r2, [r7, #16]
 810801a:	4313      	orrs	r3, r2
 810801c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810801e:	687b      	ldr	r3, [r7, #4]
 8108020:	693a      	ldr	r2, [r7, #16]
 8108022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8108024:	687b      	ldr	r3, [r7, #4]
 8108026:	68fa      	ldr	r2, [r7, #12]
 8108028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810802a:	683b      	ldr	r3, [r7, #0]
 810802c:	685a      	ldr	r2, [r3, #4]
 810802e:	687b      	ldr	r3, [r7, #4]
 8108030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108032:	687b      	ldr	r3, [r7, #4]
 8108034:	697a      	ldr	r2, [r7, #20]
 8108036:	621a      	str	r2, [r3, #32]
}
 8108038:	bf00      	nop
 810803a:	371c      	adds	r7, #28
 810803c:	46bd      	mov	sp, r7
 810803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108042:	4770      	bx	lr
 8108044:	40010000 	.word	0x40010000
 8108048:	40010400 	.word	0x40010400
 810804c:	40014000 	.word	0x40014000
 8108050:	40014400 	.word	0x40014400
 8108054:	40014800 	.word	0x40014800

08108058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8108058:	b480      	push	{r7}
 810805a:	b087      	sub	sp, #28
 810805c:	af00      	add	r7, sp, #0
 810805e:	6078      	str	r0, [r7, #4]
 8108060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108062:	687b      	ldr	r3, [r7, #4]
 8108064:	6a1b      	ldr	r3, [r3, #32]
 8108066:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8108068:	687b      	ldr	r3, [r7, #4]
 810806a:	6a1b      	ldr	r3, [r3, #32]
 810806c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108074:	687b      	ldr	r3, [r7, #4]
 8108076:	685b      	ldr	r3, [r3, #4]
 8108078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810807a:	687b      	ldr	r3, [r7, #4]
 810807c:	69db      	ldr	r3, [r3, #28]
 810807e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8108080:	68fb      	ldr	r3, [r7, #12]
 8108082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8108086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810808a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810808c:	68fb      	ldr	r3, [r7, #12]
 810808e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108094:	683b      	ldr	r3, [r7, #0]
 8108096:	681b      	ldr	r3, [r3, #0]
 8108098:	021b      	lsls	r3, r3, #8
 810809a:	68fa      	ldr	r2, [r7, #12]
 810809c:	4313      	orrs	r3, r2
 810809e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81080a0:	693b      	ldr	r3, [r7, #16]
 81080a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81080a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81080a8:	683b      	ldr	r3, [r7, #0]
 81080aa:	689b      	ldr	r3, [r3, #8]
 81080ac:	031b      	lsls	r3, r3, #12
 81080ae:	693a      	ldr	r2, [r7, #16]
 81080b0:	4313      	orrs	r3, r2
 81080b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81080b4:	687b      	ldr	r3, [r7, #4]
 81080b6:	4a18      	ldr	r2, [pc, #96]	; (8108118 <TIM_OC4_SetConfig+0xc0>)
 81080b8:	4293      	cmp	r3, r2
 81080ba:	d00f      	beq.n	81080dc <TIM_OC4_SetConfig+0x84>
 81080bc:	687b      	ldr	r3, [r7, #4]
 81080be:	4a17      	ldr	r2, [pc, #92]	; (810811c <TIM_OC4_SetConfig+0xc4>)
 81080c0:	4293      	cmp	r3, r2
 81080c2:	d00b      	beq.n	81080dc <TIM_OC4_SetConfig+0x84>
 81080c4:	687b      	ldr	r3, [r7, #4]
 81080c6:	4a16      	ldr	r2, [pc, #88]	; (8108120 <TIM_OC4_SetConfig+0xc8>)
 81080c8:	4293      	cmp	r3, r2
 81080ca:	d007      	beq.n	81080dc <TIM_OC4_SetConfig+0x84>
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	4a15      	ldr	r2, [pc, #84]	; (8108124 <TIM_OC4_SetConfig+0xcc>)
 81080d0:	4293      	cmp	r3, r2
 81080d2:	d003      	beq.n	81080dc <TIM_OC4_SetConfig+0x84>
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	4a14      	ldr	r2, [pc, #80]	; (8108128 <TIM_OC4_SetConfig+0xd0>)
 81080d8:	4293      	cmp	r3, r2
 81080da:	d109      	bne.n	81080f0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81080dc:	697b      	ldr	r3, [r7, #20]
 81080de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81080e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81080e4:	683b      	ldr	r3, [r7, #0]
 81080e6:	695b      	ldr	r3, [r3, #20]
 81080e8:	019b      	lsls	r3, r3, #6
 81080ea:	697a      	ldr	r2, [r7, #20]
 81080ec:	4313      	orrs	r3, r2
 81080ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81080f0:	687b      	ldr	r3, [r7, #4]
 81080f2:	697a      	ldr	r2, [r7, #20]
 81080f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81080f6:	687b      	ldr	r3, [r7, #4]
 81080f8:	68fa      	ldr	r2, [r7, #12]
 81080fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81080fc:	683b      	ldr	r3, [r7, #0]
 81080fe:	685a      	ldr	r2, [r3, #4]
 8108100:	687b      	ldr	r3, [r7, #4]
 8108102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108104:	687b      	ldr	r3, [r7, #4]
 8108106:	693a      	ldr	r2, [r7, #16]
 8108108:	621a      	str	r2, [r3, #32]
}
 810810a:	bf00      	nop
 810810c:	371c      	adds	r7, #28
 810810e:	46bd      	mov	sp, r7
 8108110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108114:	4770      	bx	lr
 8108116:	bf00      	nop
 8108118:	40010000 	.word	0x40010000
 810811c:	40010400 	.word	0x40010400
 8108120:	40014000 	.word	0x40014000
 8108124:	40014400 	.word	0x40014400
 8108128:	40014800 	.word	0x40014800

0810812c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810812c:	b480      	push	{r7}
 810812e:	b087      	sub	sp, #28
 8108130:	af00      	add	r7, sp, #0
 8108132:	6078      	str	r0, [r7, #4]
 8108134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108136:	687b      	ldr	r3, [r7, #4]
 8108138:	6a1b      	ldr	r3, [r3, #32]
 810813a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810813c:	687b      	ldr	r3, [r7, #4]
 810813e:	6a1b      	ldr	r3, [r3, #32]
 8108140:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8108144:	687b      	ldr	r3, [r7, #4]
 8108146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108148:	687b      	ldr	r3, [r7, #4]
 810814a:	685b      	ldr	r3, [r3, #4]
 810814c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810814e:	687b      	ldr	r3, [r7, #4]
 8108150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8108154:	68fb      	ldr	r3, [r7, #12]
 8108156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810815a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810815e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108160:	683b      	ldr	r3, [r7, #0]
 8108162:	681b      	ldr	r3, [r3, #0]
 8108164:	68fa      	ldr	r2, [r7, #12]
 8108166:	4313      	orrs	r3, r2
 8108168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810816a:	693b      	ldr	r3, [r7, #16]
 810816c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8108170:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8108172:	683b      	ldr	r3, [r7, #0]
 8108174:	689b      	ldr	r3, [r3, #8]
 8108176:	041b      	lsls	r3, r3, #16
 8108178:	693a      	ldr	r2, [r7, #16]
 810817a:	4313      	orrs	r3, r2
 810817c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810817e:	687b      	ldr	r3, [r7, #4]
 8108180:	4a17      	ldr	r2, [pc, #92]	; (81081e0 <TIM_OC5_SetConfig+0xb4>)
 8108182:	4293      	cmp	r3, r2
 8108184:	d00f      	beq.n	81081a6 <TIM_OC5_SetConfig+0x7a>
 8108186:	687b      	ldr	r3, [r7, #4]
 8108188:	4a16      	ldr	r2, [pc, #88]	; (81081e4 <TIM_OC5_SetConfig+0xb8>)
 810818a:	4293      	cmp	r3, r2
 810818c:	d00b      	beq.n	81081a6 <TIM_OC5_SetConfig+0x7a>
 810818e:	687b      	ldr	r3, [r7, #4]
 8108190:	4a15      	ldr	r2, [pc, #84]	; (81081e8 <TIM_OC5_SetConfig+0xbc>)
 8108192:	4293      	cmp	r3, r2
 8108194:	d007      	beq.n	81081a6 <TIM_OC5_SetConfig+0x7a>
 8108196:	687b      	ldr	r3, [r7, #4]
 8108198:	4a14      	ldr	r2, [pc, #80]	; (81081ec <TIM_OC5_SetConfig+0xc0>)
 810819a:	4293      	cmp	r3, r2
 810819c:	d003      	beq.n	81081a6 <TIM_OC5_SetConfig+0x7a>
 810819e:	687b      	ldr	r3, [r7, #4]
 81081a0:	4a13      	ldr	r2, [pc, #76]	; (81081f0 <TIM_OC5_SetConfig+0xc4>)
 81081a2:	4293      	cmp	r3, r2
 81081a4:	d109      	bne.n	81081ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81081a6:	697b      	ldr	r3, [r7, #20]
 81081a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81081ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81081ae:	683b      	ldr	r3, [r7, #0]
 81081b0:	695b      	ldr	r3, [r3, #20]
 81081b2:	021b      	lsls	r3, r3, #8
 81081b4:	697a      	ldr	r2, [r7, #20]
 81081b6:	4313      	orrs	r3, r2
 81081b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81081ba:	687b      	ldr	r3, [r7, #4]
 81081bc:	697a      	ldr	r2, [r7, #20]
 81081be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81081c0:	687b      	ldr	r3, [r7, #4]
 81081c2:	68fa      	ldr	r2, [r7, #12]
 81081c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81081c6:	683b      	ldr	r3, [r7, #0]
 81081c8:	685a      	ldr	r2, [r3, #4]
 81081ca:	687b      	ldr	r3, [r7, #4]
 81081cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81081ce:	687b      	ldr	r3, [r7, #4]
 81081d0:	693a      	ldr	r2, [r7, #16]
 81081d2:	621a      	str	r2, [r3, #32]
}
 81081d4:	bf00      	nop
 81081d6:	371c      	adds	r7, #28
 81081d8:	46bd      	mov	sp, r7
 81081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081de:	4770      	bx	lr
 81081e0:	40010000 	.word	0x40010000
 81081e4:	40010400 	.word	0x40010400
 81081e8:	40014000 	.word	0x40014000
 81081ec:	40014400 	.word	0x40014400
 81081f0:	40014800 	.word	0x40014800

081081f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81081f4:	b480      	push	{r7}
 81081f6:	b087      	sub	sp, #28
 81081f8:	af00      	add	r7, sp, #0
 81081fa:	6078      	str	r0, [r7, #4]
 81081fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81081fe:	687b      	ldr	r3, [r7, #4]
 8108200:	6a1b      	ldr	r3, [r3, #32]
 8108202:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8108204:	687b      	ldr	r3, [r7, #4]
 8108206:	6a1b      	ldr	r3, [r3, #32]
 8108208:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810820c:	687b      	ldr	r3, [r7, #4]
 810820e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108210:	687b      	ldr	r3, [r7, #4]
 8108212:	685b      	ldr	r3, [r3, #4]
 8108214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108216:	687b      	ldr	r3, [r7, #4]
 8108218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810821a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810821c:	68fb      	ldr	r3, [r7, #12]
 810821e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8108222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8108226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108228:	683b      	ldr	r3, [r7, #0]
 810822a:	681b      	ldr	r3, [r3, #0]
 810822c:	021b      	lsls	r3, r3, #8
 810822e:	68fa      	ldr	r2, [r7, #12]
 8108230:	4313      	orrs	r3, r2
 8108232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8108234:	693b      	ldr	r3, [r7, #16]
 8108236:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810823a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810823c:	683b      	ldr	r3, [r7, #0]
 810823e:	689b      	ldr	r3, [r3, #8]
 8108240:	051b      	lsls	r3, r3, #20
 8108242:	693a      	ldr	r2, [r7, #16]
 8108244:	4313      	orrs	r3, r2
 8108246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108248:	687b      	ldr	r3, [r7, #4]
 810824a:	4a18      	ldr	r2, [pc, #96]	; (81082ac <TIM_OC6_SetConfig+0xb8>)
 810824c:	4293      	cmp	r3, r2
 810824e:	d00f      	beq.n	8108270 <TIM_OC6_SetConfig+0x7c>
 8108250:	687b      	ldr	r3, [r7, #4]
 8108252:	4a17      	ldr	r2, [pc, #92]	; (81082b0 <TIM_OC6_SetConfig+0xbc>)
 8108254:	4293      	cmp	r3, r2
 8108256:	d00b      	beq.n	8108270 <TIM_OC6_SetConfig+0x7c>
 8108258:	687b      	ldr	r3, [r7, #4]
 810825a:	4a16      	ldr	r2, [pc, #88]	; (81082b4 <TIM_OC6_SetConfig+0xc0>)
 810825c:	4293      	cmp	r3, r2
 810825e:	d007      	beq.n	8108270 <TIM_OC6_SetConfig+0x7c>
 8108260:	687b      	ldr	r3, [r7, #4]
 8108262:	4a15      	ldr	r2, [pc, #84]	; (81082b8 <TIM_OC6_SetConfig+0xc4>)
 8108264:	4293      	cmp	r3, r2
 8108266:	d003      	beq.n	8108270 <TIM_OC6_SetConfig+0x7c>
 8108268:	687b      	ldr	r3, [r7, #4]
 810826a:	4a14      	ldr	r2, [pc, #80]	; (81082bc <TIM_OC6_SetConfig+0xc8>)
 810826c:	4293      	cmp	r3, r2
 810826e:	d109      	bne.n	8108284 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8108270:	697b      	ldr	r3, [r7, #20]
 8108272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8108276:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8108278:	683b      	ldr	r3, [r7, #0]
 810827a:	695b      	ldr	r3, [r3, #20]
 810827c:	029b      	lsls	r3, r3, #10
 810827e:	697a      	ldr	r2, [r7, #20]
 8108280:	4313      	orrs	r3, r2
 8108282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108284:	687b      	ldr	r3, [r7, #4]
 8108286:	697a      	ldr	r2, [r7, #20]
 8108288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810828a:	687b      	ldr	r3, [r7, #4]
 810828c:	68fa      	ldr	r2, [r7, #12]
 810828e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8108290:	683b      	ldr	r3, [r7, #0]
 8108292:	685a      	ldr	r2, [r3, #4]
 8108294:	687b      	ldr	r3, [r7, #4]
 8108296:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108298:	687b      	ldr	r3, [r7, #4]
 810829a:	693a      	ldr	r2, [r7, #16]
 810829c:	621a      	str	r2, [r3, #32]
}
 810829e:	bf00      	nop
 81082a0:	371c      	adds	r7, #28
 81082a2:	46bd      	mov	sp, r7
 81082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082a8:	4770      	bx	lr
 81082aa:	bf00      	nop
 81082ac:	40010000 	.word	0x40010000
 81082b0:	40010400 	.word	0x40010400
 81082b4:	40014000 	.word	0x40014000
 81082b8:	40014400 	.word	0x40014400
 81082bc:	40014800 	.word	0x40014800

081082c0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 81082c0:	b580      	push	{r7, lr}
 81082c2:	b086      	sub	sp, #24
 81082c4:	af00      	add	r7, sp, #0
 81082c6:	6078      	str	r0, [r7, #4]
 81082c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81082ca:	2300      	movs	r3, #0
 81082cc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81082ce:	687b      	ldr	r3, [r7, #4]
 81082d0:	681b      	ldr	r3, [r3, #0]
 81082d2:	689b      	ldr	r3, [r3, #8]
 81082d4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81082d6:	693b      	ldr	r3, [r7, #16]
 81082d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81082dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81082e0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 81082e2:	683b      	ldr	r3, [r7, #0]
 81082e4:	685b      	ldr	r3, [r3, #4]
 81082e6:	693a      	ldr	r2, [r7, #16]
 81082e8:	4313      	orrs	r3, r2
 81082ea:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 81082ec:	693b      	ldr	r3, [r7, #16]
 81082ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81082f2:	f023 0307 	bic.w	r3, r3, #7
 81082f6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 81082f8:	683b      	ldr	r3, [r7, #0]
 81082fa:	681b      	ldr	r3, [r3, #0]
 81082fc:	693a      	ldr	r2, [r7, #16]
 81082fe:	4313      	orrs	r3, r2
 8108300:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8108302:	687b      	ldr	r3, [r7, #4]
 8108304:	681b      	ldr	r3, [r3, #0]
 8108306:	693a      	ldr	r2, [r7, #16]
 8108308:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 810830a:	683b      	ldr	r3, [r7, #0]
 810830c:	685b      	ldr	r3, [r3, #4]
 810830e:	4a5a      	ldr	r2, [pc, #360]	; (8108478 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8108310:	4293      	cmp	r3, r2
 8108312:	f000 80ab 	beq.w	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 8108316:	4a58      	ldr	r2, [pc, #352]	; (8108478 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8108318:	4293      	cmp	r3, r2
 810831a:	f200 80a4 	bhi.w	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 810831e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108322:	f000 80a3 	beq.w	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 8108326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810832a:	f200 809c 	bhi.w	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 810832e:	4a53      	ldr	r2, [pc, #332]	; (810847c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8108330:	4293      	cmp	r3, r2
 8108332:	f000 809b 	beq.w	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 8108336:	4a51      	ldr	r2, [pc, #324]	; (810847c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8108338:	4293      	cmp	r3, r2
 810833a:	f200 8094 	bhi.w	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 810833e:	4a50      	ldr	r2, [pc, #320]	; (8108480 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8108340:	4293      	cmp	r3, r2
 8108342:	f000 8093 	beq.w	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 8108346:	4a4e      	ldr	r2, [pc, #312]	; (8108480 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8108348:	4293      	cmp	r3, r2
 810834a:	f200 808c 	bhi.w	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 810834e:	4a4d      	ldr	r2, [pc, #308]	; (8108484 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8108350:	4293      	cmp	r3, r2
 8108352:	f000 808b 	beq.w	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 8108356:	4a4b      	ldr	r2, [pc, #300]	; (8108484 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8108358:	4293      	cmp	r3, r2
 810835a:	f200 8084 	bhi.w	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 810835e:	4a4a      	ldr	r2, [pc, #296]	; (8108488 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8108360:	4293      	cmp	r3, r2
 8108362:	f000 8083 	beq.w	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 8108366:	4a48      	ldr	r2, [pc, #288]	; (8108488 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8108368:	4293      	cmp	r3, r2
 810836a:	d87c      	bhi.n	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 810836c:	4a47      	ldr	r2, [pc, #284]	; (810848c <TIM_SlaveTimer_SetConfig+0x1cc>)
 810836e:	4293      	cmp	r3, r2
 8108370:	d07c      	beq.n	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 8108372:	4a46      	ldr	r2, [pc, #280]	; (810848c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8108374:	4293      	cmp	r3, r2
 8108376:	d876      	bhi.n	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 8108378:	4a45      	ldr	r2, [pc, #276]	; (8108490 <TIM_SlaveTimer_SetConfig+0x1d0>)
 810837a:	4293      	cmp	r3, r2
 810837c:	d076      	beq.n	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 810837e:	4a44      	ldr	r2, [pc, #272]	; (8108490 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8108380:	4293      	cmp	r3, r2
 8108382:	d870      	bhi.n	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 8108384:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8108388:	d070      	beq.n	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 810838a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810838e:	d86a      	bhi.n	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 8108390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108394:	d06a      	beq.n	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 8108396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810839a:	d864      	bhi.n	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 810839c:	2b70      	cmp	r3, #112	; 0x70
 810839e:	d01a      	beq.n	81083d6 <TIM_SlaveTimer_SetConfig+0x116>
 81083a0:	2b70      	cmp	r3, #112	; 0x70
 81083a2:	d860      	bhi.n	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 81083a4:	2b60      	cmp	r3, #96	; 0x60
 81083a6:	d054      	beq.n	8108452 <TIM_SlaveTimer_SetConfig+0x192>
 81083a8:	2b60      	cmp	r3, #96	; 0x60
 81083aa:	d85c      	bhi.n	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 81083ac:	2b50      	cmp	r3, #80	; 0x50
 81083ae:	d046      	beq.n	810843e <TIM_SlaveTimer_SetConfig+0x17e>
 81083b0:	2b50      	cmp	r3, #80	; 0x50
 81083b2:	d858      	bhi.n	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 81083b4:	2b40      	cmp	r3, #64	; 0x40
 81083b6:	d019      	beq.n	81083ec <TIM_SlaveTimer_SetConfig+0x12c>
 81083b8:	2b40      	cmp	r3, #64	; 0x40
 81083ba:	d854      	bhi.n	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 81083bc:	2b30      	cmp	r3, #48	; 0x30
 81083be:	d055      	beq.n	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 81083c0:	2b30      	cmp	r3, #48	; 0x30
 81083c2:	d850      	bhi.n	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 81083c4:	2b20      	cmp	r3, #32
 81083c6:	d051      	beq.n	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 81083c8:	2b20      	cmp	r3, #32
 81083ca:	d84c      	bhi.n	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
 81083cc:	2b00      	cmp	r3, #0
 81083ce:	d04d      	beq.n	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 81083d0:	2b10      	cmp	r3, #16
 81083d2:	d04b      	beq.n	810846c <TIM_SlaveTimer_SetConfig+0x1ac>
 81083d4:	e047      	b.n	8108466 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 81083d6:	687b      	ldr	r3, [r7, #4]
 81083d8:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 81083da:	683b      	ldr	r3, [r7, #0]
 81083dc:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 81083de:	683b      	ldr	r3, [r7, #0]
 81083e0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 81083e2:	683b      	ldr	r3, [r7, #0]
 81083e4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 81083e6:	f000 f9fb 	bl	81087e0 <TIM_ETR_SetConfig>
      break;
 81083ea:	e040      	b.n	810846e <TIM_SlaveTimer_SetConfig+0x1ae>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 81083ec:	683b      	ldr	r3, [r7, #0]
 81083ee:	681b      	ldr	r3, [r3, #0]
 81083f0:	2b05      	cmp	r3, #5
 81083f2:	d101      	bne.n	81083f8 <TIM_SlaveTimer_SetConfig+0x138>
      {
        return HAL_ERROR;
 81083f4:	2301      	movs	r3, #1
 81083f6:	e03b      	b.n	8108470 <TIM_SlaveTimer_SetConfig+0x1b0>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 81083f8:	687b      	ldr	r3, [r7, #4]
 81083fa:	681b      	ldr	r3, [r3, #0]
 81083fc:	6a1b      	ldr	r3, [r3, #32]
 81083fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8108400:	687b      	ldr	r3, [r7, #4]
 8108402:	681b      	ldr	r3, [r3, #0]
 8108404:	6a1a      	ldr	r2, [r3, #32]
 8108406:	687b      	ldr	r3, [r7, #4]
 8108408:	681b      	ldr	r3, [r3, #0]
 810840a:	f022 0201 	bic.w	r2, r2, #1
 810840e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8108410:	687b      	ldr	r3, [r7, #4]
 8108412:	681b      	ldr	r3, [r3, #0]
 8108414:	699b      	ldr	r3, [r3, #24]
 8108416:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8108418:	68bb      	ldr	r3, [r7, #8]
 810841a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810841e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8108420:	683b      	ldr	r3, [r7, #0]
 8108422:	691b      	ldr	r3, [r3, #16]
 8108424:	011b      	lsls	r3, r3, #4
 8108426:	68ba      	ldr	r2, [r7, #8]
 8108428:	4313      	orrs	r3, r2
 810842a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 810842c:	687b      	ldr	r3, [r7, #4]
 810842e:	681b      	ldr	r3, [r3, #0]
 8108430:	68ba      	ldr	r2, [r7, #8]
 8108432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	681b      	ldr	r3, [r3, #0]
 8108438:	68fa      	ldr	r2, [r7, #12]
 810843a:	621a      	str	r2, [r3, #32]
      break;
 810843c:	e017      	b.n	810846e <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 810843e:	687b      	ldr	r3, [r7, #4]
 8108440:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8108442:	683b      	ldr	r3, [r7, #0]
 8108444:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8108446:	683b      	ldr	r3, [r7, #0]
 8108448:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810844a:	461a      	mov	r2, r3
 810844c:	f000 f896 	bl	810857c <TIM_TI1_ConfigInputStage>
      break;
 8108450:	e00d      	b.n	810846e <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8108452:	687b      	ldr	r3, [r7, #4]
 8108454:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8108456:	683b      	ldr	r3, [r7, #0]
 8108458:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 810845a:	683b      	ldr	r3, [r7, #0]
 810845c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810845e:	461a      	mov	r2, r3
 8108460:	f000 f8f8 	bl	8108654 <TIM_TI2_ConfigInputStage>
      break;
 8108464:	e003      	b.n	810846e <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8108466:	2301      	movs	r3, #1
 8108468:	75fb      	strb	r3, [r7, #23]
      break;
 810846a:	e000      	b.n	810846e <TIM_SlaveTimer_SetConfig+0x1ae>
      break;
 810846c:	bf00      	nop
  }

  return status;
 810846e:	7dfb      	ldrb	r3, [r7, #23]
}
 8108470:	4618      	mov	r0, r3
 8108472:	3718      	adds	r7, #24
 8108474:	46bd      	mov	sp, r7
 8108476:	bd80      	pop	{r7, pc}
 8108478:	00200010 	.word	0x00200010
 810847c:	00100070 	.word	0x00100070
 8108480:	00100060 	.word	0x00100060
 8108484:	00100050 	.word	0x00100050
 8108488:	00100040 	.word	0x00100040
 810848c:	00100030 	.word	0x00100030
 8108490:	00100020 	.word	0x00100020

08108494 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8108494:	b480      	push	{r7}
 8108496:	b087      	sub	sp, #28
 8108498:	af00      	add	r7, sp, #0
 810849a:	60f8      	str	r0, [r7, #12]
 810849c:	60b9      	str	r1, [r7, #8]
 810849e:	607a      	str	r2, [r7, #4]
 81084a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81084a2:	68fb      	ldr	r3, [r7, #12]
 81084a4:	6a1b      	ldr	r3, [r3, #32]
 81084a6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81084a8:	68fb      	ldr	r3, [r7, #12]
 81084aa:	6a1b      	ldr	r3, [r3, #32]
 81084ac:	f023 0201 	bic.w	r2, r3, #1
 81084b0:	68fb      	ldr	r3, [r7, #12]
 81084b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81084b4:	68fb      	ldr	r3, [r7, #12]
 81084b6:	699b      	ldr	r3, [r3, #24]
 81084b8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 81084ba:	68fb      	ldr	r3, [r7, #12]
 81084bc:	4a28      	ldr	r2, [pc, #160]	; (8108560 <TIM_TI1_SetConfig+0xcc>)
 81084be:	4293      	cmp	r3, r2
 81084c0:	d01b      	beq.n	81084fa <TIM_TI1_SetConfig+0x66>
 81084c2:	68fb      	ldr	r3, [r7, #12]
 81084c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81084c8:	d017      	beq.n	81084fa <TIM_TI1_SetConfig+0x66>
 81084ca:	68fb      	ldr	r3, [r7, #12]
 81084cc:	4a25      	ldr	r2, [pc, #148]	; (8108564 <TIM_TI1_SetConfig+0xd0>)
 81084ce:	4293      	cmp	r3, r2
 81084d0:	d013      	beq.n	81084fa <TIM_TI1_SetConfig+0x66>
 81084d2:	68fb      	ldr	r3, [r7, #12]
 81084d4:	4a24      	ldr	r2, [pc, #144]	; (8108568 <TIM_TI1_SetConfig+0xd4>)
 81084d6:	4293      	cmp	r3, r2
 81084d8:	d00f      	beq.n	81084fa <TIM_TI1_SetConfig+0x66>
 81084da:	68fb      	ldr	r3, [r7, #12]
 81084dc:	4a23      	ldr	r2, [pc, #140]	; (810856c <TIM_TI1_SetConfig+0xd8>)
 81084de:	4293      	cmp	r3, r2
 81084e0:	d00b      	beq.n	81084fa <TIM_TI1_SetConfig+0x66>
 81084e2:	68fb      	ldr	r3, [r7, #12]
 81084e4:	4a22      	ldr	r2, [pc, #136]	; (8108570 <TIM_TI1_SetConfig+0xdc>)
 81084e6:	4293      	cmp	r3, r2
 81084e8:	d007      	beq.n	81084fa <TIM_TI1_SetConfig+0x66>
 81084ea:	68fb      	ldr	r3, [r7, #12]
 81084ec:	4a21      	ldr	r2, [pc, #132]	; (8108574 <TIM_TI1_SetConfig+0xe0>)
 81084ee:	4293      	cmp	r3, r2
 81084f0:	d003      	beq.n	81084fa <TIM_TI1_SetConfig+0x66>
 81084f2:	68fb      	ldr	r3, [r7, #12]
 81084f4:	4a20      	ldr	r2, [pc, #128]	; (8108578 <TIM_TI1_SetConfig+0xe4>)
 81084f6:	4293      	cmp	r3, r2
 81084f8:	d101      	bne.n	81084fe <TIM_TI1_SetConfig+0x6a>
 81084fa:	2301      	movs	r3, #1
 81084fc:	e000      	b.n	8108500 <TIM_TI1_SetConfig+0x6c>
 81084fe:	2300      	movs	r3, #0
 8108500:	2b00      	cmp	r3, #0
 8108502:	d008      	beq.n	8108516 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8108504:	697b      	ldr	r3, [r7, #20]
 8108506:	f023 0303 	bic.w	r3, r3, #3
 810850a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 810850c:	697a      	ldr	r2, [r7, #20]
 810850e:	687b      	ldr	r3, [r7, #4]
 8108510:	4313      	orrs	r3, r2
 8108512:	617b      	str	r3, [r7, #20]
 8108514:	e003      	b.n	810851e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8108516:	697b      	ldr	r3, [r7, #20]
 8108518:	f043 0301 	orr.w	r3, r3, #1
 810851c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810851e:	697b      	ldr	r3, [r7, #20]
 8108520:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8108524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8108526:	683b      	ldr	r3, [r7, #0]
 8108528:	011b      	lsls	r3, r3, #4
 810852a:	b2db      	uxtb	r3, r3
 810852c:	697a      	ldr	r2, [r7, #20]
 810852e:	4313      	orrs	r3, r2
 8108530:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8108532:	693b      	ldr	r3, [r7, #16]
 8108534:	f023 030a 	bic.w	r3, r3, #10
 8108538:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 810853a:	68bb      	ldr	r3, [r7, #8]
 810853c:	f003 030a 	and.w	r3, r3, #10
 8108540:	693a      	ldr	r2, [r7, #16]
 8108542:	4313      	orrs	r3, r2
 8108544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8108546:	68fb      	ldr	r3, [r7, #12]
 8108548:	697a      	ldr	r2, [r7, #20]
 810854a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810854c:	68fb      	ldr	r3, [r7, #12]
 810854e:	693a      	ldr	r2, [r7, #16]
 8108550:	621a      	str	r2, [r3, #32]
}
 8108552:	bf00      	nop
 8108554:	371c      	adds	r7, #28
 8108556:	46bd      	mov	sp, r7
 8108558:	f85d 7b04 	ldr.w	r7, [sp], #4
 810855c:	4770      	bx	lr
 810855e:	bf00      	nop
 8108560:	40010000 	.word	0x40010000
 8108564:	40000400 	.word	0x40000400
 8108568:	40000800 	.word	0x40000800
 810856c:	40000c00 	.word	0x40000c00
 8108570:	40010400 	.word	0x40010400
 8108574:	40001800 	.word	0x40001800
 8108578:	40014000 	.word	0x40014000

0810857c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810857c:	b480      	push	{r7}
 810857e:	b087      	sub	sp, #28
 8108580:	af00      	add	r7, sp, #0
 8108582:	60f8      	str	r0, [r7, #12]
 8108584:	60b9      	str	r1, [r7, #8]
 8108586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8108588:	68fb      	ldr	r3, [r7, #12]
 810858a:	6a1b      	ldr	r3, [r3, #32]
 810858c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810858e:	68fb      	ldr	r3, [r7, #12]
 8108590:	6a1b      	ldr	r3, [r3, #32]
 8108592:	f023 0201 	bic.w	r2, r3, #1
 8108596:	68fb      	ldr	r3, [r7, #12]
 8108598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810859a:	68fb      	ldr	r3, [r7, #12]
 810859c:	699b      	ldr	r3, [r3, #24]
 810859e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81085a0:	693b      	ldr	r3, [r7, #16]
 81085a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81085a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81085a8:	687b      	ldr	r3, [r7, #4]
 81085aa:	011b      	lsls	r3, r3, #4
 81085ac:	693a      	ldr	r2, [r7, #16]
 81085ae:	4313      	orrs	r3, r2
 81085b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81085b2:	697b      	ldr	r3, [r7, #20]
 81085b4:	f023 030a 	bic.w	r3, r3, #10
 81085b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 81085ba:	697a      	ldr	r2, [r7, #20]
 81085bc:	68bb      	ldr	r3, [r7, #8]
 81085be:	4313      	orrs	r3, r2
 81085c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81085c2:	68fb      	ldr	r3, [r7, #12]
 81085c4:	693a      	ldr	r2, [r7, #16]
 81085c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81085c8:	68fb      	ldr	r3, [r7, #12]
 81085ca:	697a      	ldr	r2, [r7, #20]
 81085cc:	621a      	str	r2, [r3, #32]
}
 81085ce:	bf00      	nop
 81085d0:	371c      	adds	r7, #28
 81085d2:	46bd      	mov	sp, r7
 81085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085d8:	4770      	bx	lr

081085da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81085da:	b480      	push	{r7}
 81085dc:	b087      	sub	sp, #28
 81085de:	af00      	add	r7, sp, #0
 81085e0:	60f8      	str	r0, [r7, #12]
 81085e2:	60b9      	str	r1, [r7, #8]
 81085e4:	607a      	str	r2, [r7, #4]
 81085e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 81085e8:	68fb      	ldr	r3, [r7, #12]
 81085ea:	6a1b      	ldr	r3, [r3, #32]
 81085ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81085ee:	68fb      	ldr	r3, [r7, #12]
 81085f0:	6a1b      	ldr	r3, [r3, #32]
 81085f2:	f023 0210 	bic.w	r2, r3, #16
 81085f6:	68fb      	ldr	r3, [r7, #12]
 81085f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81085fa:	68fb      	ldr	r3, [r7, #12]
 81085fc:	699b      	ldr	r3, [r3, #24]
 81085fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8108600:	693b      	ldr	r3, [r7, #16]
 8108602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8108608:	687b      	ldr	r3, [r7, #4]
 810860a:	021b      	lsls	r3, r3, #8
 810860c:	693a      	ldr	r2, [r7, #16]
 810860e:	4313      	orrs	r3, r2
 8108610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8108612:	693b      	ldr	r3, [r7, #16]
 8108614:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8108618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 810861a:	683b      	ldr	r3, [r7, #0]
 810861c:	031b      	lsls	r3, r3, #12
 810861e:	b29b      	uxth	r3, r3
 8108620:	693a      	ldr	r2, [r7, #16]
 8108622:	4313      	orrs	r3, r2
 8108624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8108626:	697b      	ldr	r3, [r7, #20]
 8108628:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810862c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 810862e:	68bb      	ldr	r3, [r7, #8]
 8108630:	011b      	lsls	r3, r3, #4
 8108632:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8108636:	697a      	ldr	r2, [r7, #20]
 8108638:	4313      	orrs	r3, r2
 810863a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810863c:	68fb      	ldr	r3, [r7, #12]
 810863e:	693a      	ldr	r2, [r7, #16]
 8108640:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8108642:	68fb      	ldr	r3, [r7, #12]
 8108644:	697a      	ldr	r2, [r7, #20]
 8108646:	621a      	str	r2, [r3, #32]
}
 8108648:	bf00      	nop
 810864a:	371c      	adds	r7, #28
 810864c:	46bd      	mov	sp, r7
 810864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108652:	4770      	bx	lr

08108654 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8108654:	b480      	push	{r7}
 8108656:	b087      	sub	sp, #28
 8108658:	af00      	add	r7, sp, #0
 810865a:	60f8      	str	r0, [r7, #12]
 810865c:	60b9      	str	r1, [r7, #8]
 810865e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8108660:	68fb      	ldr	r3, [r7, #12]
 8108662:	6a1b      	ldr	r3, [r3, #32]
 8108664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8108666:	68fb      	ldr	r3, [r7, #12]
 8108668:	6a1b      	ldr	r3, [r3, #32]
 810866a:	f023 0210 	bic.w	r2, r3, #16
 810866e:	68fb      	ldr	r3, [r7, #12]
 8108670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8108672:	68fb      	ldr	r3, [r7, #12]
 8108674:	699b      	ldr	r3, [r3, #24]
 8108676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8108678:	693b      	ldr	r3, [r7, #16]
 810867a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810867e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8108680:	687b      	ldr	r3, [r7, #4]
 8108682:	031b      	lsls	r3, r3, #12
 8108684:	693a      	ldr	r2, [r7, #16]
 8108686:	4313      	orrs	r3, r2
 8108688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810868a:	697b      	ldr	r3, [r7, #20]
 810868c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8108690:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8108692:	68bb      	ldr	r3, [r7, #8]
 8108694:	011b      	lsls	r3, r3, #4
 8108696:	697a      	ldr	r2, [r7, #20]
 8108698:	4313      	orrs	r3, r2
 810869a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810869c:	68fb      	ldr	r3, [r7, #12]
 810869e:	693a      	ldr	r2, [r7, #16]
 81086a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81086a2:	68fb      	ldr	r3, [r7, #12]
 81086a4:	697a      	ldr	r2, [r7, #20]
 81086a6:	621a      	str	r2, [r3, #32]
}
 81086a8:	bf00      	nop
 81086aa:	371c      	adds	r7, #28
 81086ac:	46bd      	mov	sp, r7
 81086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086b2:	4770      	bx	lr

081086b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81086b4:	b480      	push	{r7}
 81086b6:	b087      	sub	sp, #28
 81086b8:	af00      	add	r7, sp, #0
 81086ba:	60f8      	str	r0, [r7, #12]
 81086bc:	60b9      	str	r1, [r7, #8]
 81086be:	607a      	str	r2, [r7, #4]
 81086c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 81086c2:	68fb      	ldr	r3, [r7, #12]
 81086c4:	6a1b      	ldr	r3, [r3, #32]
 81086c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81086c8:	68fb      	ldr	r3, [r7, #12]
 81086ca:	6a1b      	ldr	r3, [r3, #32]
 81086cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81086d0:	68fb      	ldr	r3, [r7, #12]
 81086d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 81086d4:	68fb      	ldr	r3, [r7, #12]
 81086d6:	69db      	ldr	r3, [r3, #28]
 81086d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 81086da:	693b      	ldr	r3, [r7, #16]
 81086dc:	f023 0303 	bic.w	r3, r3, #3
 81086e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 81086e2:	693a      	ldr	r2, [r7, #16]
 81086e4:	687b      	ldr	r3, [r7, #4]
 81086e6:	4313      	orrs	r3, r2
 81086e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 81086ea:	693b      	ldr	r3, [r7, #16]
 81086ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81086f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 81086f2:	683b      	ldr	r3, [r7, #0]
 81086f4:	011b      	lsls	r3, r3, #4
 81086f6:	b2db      	uxtb	r3, r3
 81086f8:	693a      	ldr	r2, [r7, #16]
 81086fa:	4313      	orrs	r3, r2
 81086fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 81086fe:	697b      	ldr	r3, [r7, #20]
 8108700:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8108704:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8108706:	68bb      	ldr	r3, [r7, #8]
 8108708:	021b      	lsls	r3, r3, #8
 810870a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 810870e:	697a      	ldr	r2, [r7, #20]
 8108710:	4313      	orrs	r3, r2
 8108712:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8108714:	68fb      	ldr	r3, [r7, #12]
 8108716:	693a      	ldr	r2, [r7, #16]
 8108718:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 810871a:	68fb      	ldr	r3, [r7, #12]
 810871c:	697a      	ldr	r2, [r7, #20]
 810871e:	621a      	str	r2, [r3, #32]
}
 8108720:	bf00      	nop
 8108722:	371c      	adds	r7, #28
 8108724:	46bd      	mov	sp, r7
 8108726:	f85d 7b04 	ldr.w	r7, [sp], #4
 810872a:	4770      	bx	lr

0810872c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810872c:	b480      	push	{r7}
 810872e:	b087      	sub	sp, #28
 8108730:	af00      	add	r7, sp, #0
 8108732:	60f8      	str	r0, [r7, #12]
 8108734:	60b9      	str	r1, [r7, #8]
 8108736:	607a      	str	r2, [r7, #4]
 8108738:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 810873a:	68fb      	ldr	r3, [r7, #12]
 810873c:	6a1b      	ldr	r3, [r3, #32]
 810873e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8108740:	68fb      	ldr	r3, [r7, #12]
 8108742:	6a1b      	ldr	r3, [r3, #32]
 8108744:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8108748:	68fb      	ldr	r3, [r7, #12]
 810874a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810874c:	68fb      	ldr	r3, [r7, #12]
 810874e:	69db      	ldr	r3, [r3, #28]
 8108750:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8108752:	693b      	ldr	r3, [r7, #16]
 8108754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108758:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 810875a:	687b      	ldr	r3, [r7, #4]
 810875c:	021b      	lsls	r3, r3, #8
 810875e:	693a      	ldr	r2, [r7, #16]
 8108760:	4313      	orrs	r3, r2
 8108762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8108764:	693b      	ldr	r3, [r7, #16]
 8108766:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810876a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 810876c:	683b      	ldr	r3, [r7, #0]
 810876e:	031b      	lsls	r3, r3, #12
 8108770:	b29b      	uxth	r3, r3
 8108772:	693a      	ldr	r2, [r7, #16]
 8108774:	4313      	orrs	r3, r2
 8108776:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8108778:	697b      	ldr	r3, [r7, #20]
 810877a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 810877e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8108780:	68bb      	ldr	r3, [r7, #8]
 8108782:	031b      	lsls	r3, r3, #12
 8108784:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8108788:	697a      	ldr	r2, [r7, #20]
 810878a:	4313      	orrs	r3, r2
 810878c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810878e:	68fb      	ldr	r3, [r7, #12]
 8108790:	693a      	ldr	r2, [r7, #16]
 8108792:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8108794:	68fb      	ldr	r3, [r7, #12]
 8108796:	697a      	ldr	r2, [r7, #20]
 8108798:	621a      	str	r2, [r3, #32]
}
 810879a:	bf00      	nop
 810879c:	371c      	adds	r7, #28
 810879e:	46bd      	mov	sp, r7
 81087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81087a4:	4770      	bx	lr

081087a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 81087a6:	b480      	push	{r7}
 81087a8:	b085      	sub	sp, #20
 81087aa:	af00      	add	r7, sp, #0
 81087ac:	6078      	str	r0, [r7, #4]
 81087ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 81087b0:	687b      	ldr	r3, [r7, #4]
 81087b2:	689b      	ldr	r3, [r3, #8]
 81087b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81087b6:	68fb      	ldr	r3, [r7, #12]
 81087b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81087bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81087c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81087c2:	683a      	ldr	r2, [r7, #0]
 81087c4:	68fb      	ldr	r3, [r7, #12]
 81087c6:	4313      	orrs	r3, r2
 81087c8:	f043 0307 	orr.w	r3, r3, #7
 81087cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81087ce:	687b      	ldr	r3, [r7, #4]
 81087d0:	68fa      	ldr	r2, [r7, #12]
 81087d2:	609a      	str	r2, [r3, #8]
}
 81087d4:	bf00      	nop
 81087d6:	3714      	adds	r7, #20
 81087d8:	46bd      	mov	sp, r7
 81087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81087de:	4770      	bx	lr

081087e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81087e0:	b480      	push	{r7}
 81087e2:	b087      	sub	sp, #28
 81087e4:	af00      	add	r7, sp, #0
 81087e6:	60f8      	str	r0, [r7, #12]
 81087e8:	60b9      	str	r1, [r7, #8]
 81087ea:	607a      	str	r2, [r7, #4]
 81087ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81087ee:	68fb      	ldr	r3, [r7, #12]
 81087f0:	689b      	ldr	r3, [r3, #8]
 81087f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81087f4:	697b      	ldr	r3, [r7, #20]
 81087f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81087fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81087fc:	683b      	ldr	r3, [r7, #0]
 81087fe:	021a      	lsls	r2, r3, #8
 8108800:	687b      	ldr	r3, [r7, #4]
 8108802:	431a      	orrs	r2, r3
 8108804:	68bb      	ldr	r3, [r7, #8]
 8108806:	4313      	orrs	r3, r2
 8108808:	697a      	ldr	r2, [r7, #20]
 810880a:	4313      	orrs	r3, r2
 810880c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810880e:	68fb      	ldr	r3, [r7, #12]
 8108810:	697a      	ldr	r2, [r7, #20]
 8108812:	609a      	str	r2, [r3, #8]
}
 8108814:	bf00      	nop
 8108816:	371c      	adds	r7, #28
 8108818:	46bd      	mov	sp, r7
 810881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810881e:	4770      	bx	lr

08108820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8108820:	b480      	push	{r7}
 8108822:	b087      	sub	sp, #28
 8108824:	af00      	add	r7, sp, #0
 8108826:	60f8      	str	r0, [r7, #12]
 8108828:	60b9      	str	r1, [r7, #8]
 810882a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810882c:	68bb      	ldr	r3, [r7, #8]
 810882e:	f003 031f 	and.w	r3, r3, #31
 8108832:	2201      	movs	r2, #1
 8108834:	fa02 f303 	lsl.w	r3, r2, r3
 8108838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810883a:	68fb      	ldr	r3, [r7, #12]
 810883c:	6a1a      	ldr	r2, [r3, #32]
 810883e:	697b      	ldr	r3, [r7, #20]
 8108840:	43db      	mvns	r3, r3
 8108842:	401a      	ands	r2, r3
 8108844:	68fb      	ldr	r3, [r7, #12]
 8108846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8108848:	68fb      	ldr	r3, [r7, #12]
 810884a:	6a1a      	ldr	r2, [r3, #32]
 810884c:	68bb      	ldr	r3, [r7, #8]
 810884e:	f003 031f 	and.w	r3, r3, #31
 8108852:	6879      	ldr	r1, [r7, #4]
 8108854:	fa01 f303 	lsl.w	r3, r1, r3
 8108858:	431a      	orrs	r2, r3
 810885a:	68fb      	ldr	r3, [r7, #12]
 810885c:	621a      	str	r2, [r3, #32]
}
 810885e:	bf00      	nop
 8108860:	371c      	adds	r7, #28
 8108862:	46bd      	mov	sp, r7
 8108864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108868:	4770      	bx	lr
	...

0810886c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810886c:	b480      	push	{r7}
 810886e:	b085      	sub	sp, #20
 8108870:	af00      	add	r7, sp, #0
 8108872:	6078      	str	r0, [r7, #4]
 8108874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8108876:	687b      	ldr	r3, [r7, #4]
 8108878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810887c:	2b01      	cmp	r3, #1
 810887e:	d101      	bne.n	8108884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8108880:	2302      	movs	r3, #2
 8108882:	e06d      	b.n	8108960 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8108884:	687b      	ldr	r3, [r7, #4]
 8108886:	2201      	movs	r2, #1
 8108888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810888c:	687b      	ldr	r3, [r7, #4]
 810888e:	2202      	movs	r2, #2
 8108890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8108894:	687b      	ldr	r3, [r7, #4]
 8108896:	681b      	ldr	r3, [r3, #0]
 8108898:	685b      	ldr	r3, [r3, #4]
 810889a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810889c:	687b      	ldr	r3, [r7, #4]
 810889e:	681b      	ldr	r3, [r3, #0]
 81088a0:	689b      	ldr	r3, [r3, #8]
 81088a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81088a4:	687b      	ldr	r3, [r7, #4]
 81088a6:	681b      	ldr	r3, [r3, #0]
 81088a8:	4a30      	ldr	r2, [pc, #192]	; (810896c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81088aa:	4293      	cmp	r3, r2
 81088ac:	d004      	beq.n	81088b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81088ae:	687b      	ldr	r3, [r7, #4]
 81088b0:	681b      	ldr	r3, [r3, #0]
 81088b2:	4a2f      	ldr	r2, [pc, #188]	; (8108970 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81088b4:	4293      	cmp	r3, r2
 81088b6:	d108      	bne.n	81088ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81088b8:	68fb      	ldr	r3, [r7, #12]
 81088ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81088be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81088c0:	683b      	ldr	r3, [r7, #0]
 81088c2:	685b      	ldr	r3, [r3, #4]
 81088c4:	68fa      	ldr	r2, [r7, #12]
 81088c6:	4313      	orrs	r3, r2
 81088c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81088ca:	68fb      	ldr	r3, [r7, #12]
 81088cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81088d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81088d2:	683b      	ldr	r3, [r7, #0]
 81088d4:	681b      	ldr	r3, [r3, #0]
 81088d6:	68fa      	ldr	r2, [r7, #12]
 81088d8:	4313      	orrs	r3, r2
 81088da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81088dc:	687b      	ldr	r3, [r7, #4]
 81088de:	681b      	ldr	r3, [r3, #0]
 81088e0:	68fa      	ldr	r2, [r7, #12]
 81088e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81088e4:	687b      	ldr	r3, [r7, #4]
 81088e6:	681b      	ldr	r3, [r3, #0]
 81088e8:	4a20      	ldr	r2, [pc, #128]	; (810896c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81088ea:	4293      	cmp	r3, r2
 81088ec:	d022      	beq.n	8108934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81088ee:	687b      	ldr	r3, [r7, #4]
 81088f0:	681b      	ldr	r3, [r3, #0]
 81088f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81088f6:	d01d      	beq.n	8108934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81088f8:	687b      	ldr	r3, [r7, #4]
 81088fa:	681b      	ldr	r3, [r3, #0]
 81088fc:	4a1d      	ldr	r2, [pc, #116]	; (8108974 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81088fe:	4293      	cmp	r3, r2
 8108900:	d018      	beq.n	8108934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108902:	687b      	ldr	r3, [r7, #4]
 8108904:	681b      	ldr	r3, [r3, #0]
 8108906:	4a1c      	ldr	r2, [pc, #112]	; (8108978 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8108908:	4293      	cmp	r3, r2
 810890a:	d013      	beq.n	8108934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810890c:	687b      	ldr	r3, [r7, #4]
 810890e:	681b      	ldr	r3, [r3, #0]
 8108910:	4a1a      	ldr	r2, [pc, #104]	; (810897c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8108912:	4293      	cmp	r3, r2
 8108914:	d00e      	beq.n	8108934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108916:	687b      	ldr	r3, [r7, #4]
 8108918:	681b      	ldr	r3, [r3, #0]
 810891a:	4a15      	ldr	r2, [pc, #84]	; (8108970 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810891c:	4293      	cmp	r3, r2
 810891e:	d009      	beq.n	8108934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108920:	687b      	ldr	r3, [r7, #4]
 8108922:	681b      	ldr	r3, [r3, #0]
 8108924:	4a16      	ldr	r2, [pc, #88]	; (8108980 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8108926:	4293      	cmp	r3, r2
 8108928:	d004      	beq.n	8108934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810892a:	687b      	ldr	r3, [r7, #4]
 810892c:	681b      	ldr	r3, [r3, #0]
 810892e:	4a15      	ldr	r2, [pc, #84]	; (8108984 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8108930:	4293      	cmp	r3, r2
 8108932:	d10c      	bne.n	810894e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8108934:	68bb      	ldr	r3, [r7, #8]
 8108936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810893a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810893c:	683b      	ldr	r3, [r7, #0]
 810893e:	689b      	ldr	r3, [r3, #8]
 8108940:	68ba      	ldr	r2, [r7, #8]
 8108942:	4313      	orrs	r3, r2
 8108944:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8108946:	687b      	ldr	r3, [r7, #4]
 8108948:	681b      	ldr	r3, [r3, #0]
 810894a:	68ba      	ldr	r2, [r7, #8]
 810894c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810894e:	687b      	ldr	r3, [r7, #4]
 8108950:	2201      	movs	r2, #1
 8108952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8108956:	687b      	ldr	r3, [r7, #4]
 8108958:	2200      	movs	r2, #0
 810895a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810895e:	2300      	movs	r3, #0
}
 8108960:	4618      	mov	r0, r3
 8108962:	3714      	adds	r7, #20
 8108964:	46bd      	mov	sp, r7
 8108966:	f85d 7b04 	ldr.w	r7, [sp], #4
 810896a:	4770      	bx	lr
 810896c:	40010000 	.word	0x40010000
 8108970:	40010400 	.word	0x40010400
 8108974:	40000400 	.word	0x40000400
 8108978:	40000800 	.word	0x40000800
 810897c:	40000c00 	.word	0x40000c00
 8108980:	40001800 	.word	0x40001800
 8108984:	40014000 	.word	0x40014000

08108988 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8108988:	b480      	push	{r7}
 810898a:	b083      	sub	sp, #12
 810898c:	af00      	add	r7, sp, #0
 810898e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8108990:	bf00      	nop
 8108992:	370c      	adds	r7, #12
 8108994:	46bd      	mov	sp, r7
 8108996:	f85d 7b04 	ldr.w	r7, [sp], #4
 810899a:	4770      	bx	lr

0810899c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810899c:	b480      	push	{r7}
 810899e:	b083      	sub	sp, #12
 81089a0:	af00      	add	r7, sp, #0
 81089a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81089a4:	bf00      	nop
 81089a6:	370c      	adds	r7, #12
 81089a8:	46bd      	mov	sp, r7
 81089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089ae:	4770      	bx	lr

081089b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81089b0:	b480      	push	{r7}
 81089b2:	b083      	sub	sp, #12
 81089b4:	af00      	add	r7, sp, #0
 81089b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81089b8:	bf00      	nop
 81089ba:	370c      	adds	r7, #12
 81089bc:	46bd      	mov	sp, r7
 81089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089c2:	4770      	bx	lr

081089c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81089c4:	b580      	push	{r7, lr}
 81089c6:	b082      	sub	sp, #8
 81089c8:	af00      	add	r7, sp, #0
 81089ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81089cc:	687b      	ldr	r3, [r7, #4]
 81089ce:	2b00      	cmp	r3, #0
 81089d0:	d101      	bne.n	81089d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81089d2:	2301      	movs	r3, #1
 81089d4:	e042      	b.n	8108a5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81089d6:	687b      	ldr	r3, [r7, #4]
 81089d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81089dc:	2b00      	cmp	r3, #0
 81089de:	d106      	bne.n	81089ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81089e0:	687b      	ldr	r3, [r7, #4]
 81089e2:	2200      	movs	r2, #0
 81089e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81089e8:	6878      	ldr	r0, [r7, #4]
 81089ea:	f7fa fb77 	bl	81030dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81089ee:	687b      	ldr	r3, [r7, #4]
 81089f0:	2224      	movs	r2, #36	; 0x24
 81089f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 81089f6:	687b      	ldr	r3, [r7, #4]
 81089f8:	681b      	ldr	r3, [r3, #0]
 81089fa:	681a      	ldr	r2, [r3, #0]
 81089fc:	687b      	ldr	r3, [r7, #4]
 81089fe:	681b      	ldr	r3, [r3, #0]
 8108a00:	f022 0201 	bic.w	r2, r2, #1
 8108a04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8108a06:	687b      	ldr	r3, [r7, #4]
 8108a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a0a:	2b00      	cmp	r3, #0
 8108a0c:	d002      	beq.n	8108a14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8108a0e:	6878      	ldr	r0, [r7, #4]
 8108a10:	f000 fe1e 	bl	8109650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8108a14:	6878      	ldr	r0, [r7, #4]
 8108a16:	f000 f8b3 	bl	8108b80 <UART_SetConfig>
 8108a1a:	4603      	mov	r3, r0
 8108a1c:	2b01      	cmp	r3, #1
 8108a1e:	d101      	bne.n	8108a24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8108a20:	2301      	movs	r3, #1
 8108a22:	e01b      	b.n	8108a5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8108a24:	687b      	ldr	r3, [r7, #4]
 8108a26:	681b      	ldr	r3, [r3, #0]
 8108a28:	685a      	ldr	r2, [r3, #4]
 8108a2a:	687b      	ldr	r3, [r7, #4]
 8108a2c:	681b      	ldr	r3, [r3, #0]
 8108a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8108a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8108a34:	687b      	ldr	r3, [r7, #4]
 8108a36:	681b      	ldr	r3, [r3, #0]
 8108a38:	689a      	ldr	r2, [r3, #8]
 8108a3a:	687b      	ldr	r3, [r7, #4]
 8108a3c:	681b      	ldr	r3, [r3, #0]
 8108a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8108a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8108a44:	687b      	ldr	r3, [r7, #4]
 8108a46:	681b      	ldr	r3, [r3, #0]
 8108a48:	681a      	ldr	r2, [r3, #0]
 8108a4a:	687b      	ldr	r3, [r7, #4]
 8108a4c:	681b      	ldr	r3, [r3, #0]
 8108a4e:	f042 0201 	orr.w	r2, r2, #1
 8108a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8108a54:	6878      	ldr	r0, [r7, #4]
 8108a56:	f000 fe9d 	bl	8109794 <UART_CheckIdleState>
 8108a5a:	4603      	mov	r3, r0
}
 8108a5c:	4618      	mov	r0, r3
 8108a5e:	3708      	adds	r7, #8
 8108a60:	46bd      	mov	sp, r7
 8108a62:	bd80      	pop	{r7, pc}

08108a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8108a64:	b580      	push	{r7, lr}
 8108a66:	b08a      	sub	sp, #40	; 0x28
 8108a68:	af02      	add	r7, sp, #8
 8108a6a:	60f8      	str	r0, [r7, #12]
 8108a6c:	60b9      	str	r1, [r7, #8]
 8108a6e:	603b      	str	r3, [r7, #0]
 8108a70:	4613      	mov	r3, r2
 8108a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8108a74:	68fb      	ldr	r3, [r7, #12]
 8108a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108a7a:	2b20      	cmp	r3, #32
 8108a7c:	d17b      	bne.n	8108b76 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8108a7e:	68bb      	ldr	r3, [r7, #8]
 8108a80:	2b00      	cmp	r3, #0
 8108a82:	d002      	beq.n	8108a8a <HAL_UART_Transmit+0x26>
 8108a84:	88fb      	ldrh	r3, [r7, #6]
 8108a86:	2b00      	cmp	r3, #0
 8108a88:	d101      	bne.n	8108a8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8108a8a:	2301      	movs	r3, #1
 8108a8c:	e074      	b.n	8108b78 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108a8e:	68fb      	ldr	r3, [r7, #12]
 8108a90:	2200      	movs	r2, #0
 8108a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108a96:	68fb      	ldr	r3, [r7, #12]
 8108a98:	2221      	movs	r2, #33	; 0x21
 8108a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8108a9e:	f7fa fd69 	bl	8103574 <HAL_GetTick>
 8108aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8108aa4:	68fb      	ldr	r3, [r7, #12]
 8108aa6:	88fa      	ldrh	r2, [r7, #6]
 8108aa8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8108aac:	68fb      	ldr	r3, [r7, #12]
 8108aae:	88fa      	ldrh	r2, [r7, #6]
 8108ab0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8108ab4:	68fb      	ldr	r3, [r7, #12]
 8108ab6:	689b      	ldr	r3, [r3, #8]
 8108ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108abc:	d108      	bne.n	8108ad0 <HAL_UART_Transmit+0x6c>
 8108abe:	68fb      	ldr	r3, [r7, #12]
 8108ac0:	691b      	ldr	r3, [r3, #16]
 8108ac2:	2b00      	cmp	r3, #0
 8108ac4:	d104      	bne.n	8108ad0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8108ac6:	2300      	movs	r3, #0
 8108ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8108aca:	68bb      	ldr	r3, [r7, #8]
 8108acc:	61bb      	str	r3, [r7, #24]
 8108ace:	e003      	b.n	8108ad8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8108ad0:	68bb      	ldr	r3, [r7, #8]
 8108ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8108ad4:	2300      	movs	r3, #0
 8108ad6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8108ad8:	e030      	b.n	8108b3c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8108ada:	683b      	ldr	r3, [r7, #0]
 8108adc:	9300      	str	r3, [sp, #0]
 8108ade:	697b      	ldr	r3, [r7, #20]
 8108ae0:	2200      	movs	r2, #0
 8108ae2:	2180      	movs	r1, #128	; 0x80
 8108ae4:	68f8      	ldr	r0, [r7, #12]
 8108ae6:	f000 feff 	bl	81098e8 <UART_WaitOnFlagUntilTimeout>
 8108aea:	4603      	mov	r3, r0
 8108aec:	2b00      	cmp	r3, #0
 8108aee:	d005      	beq.n	8108afc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8108af0:	68fb      	ldr	r3, [r7, #12]
 8108af2:	2220      	movs	r2, #32
 8108af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8108af8:	2303      	movs	r3, #3
 8108afa:	e03d      	b.n	8108b78 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8108afc:	69fb      	ldr	r3, [r7, #28]
 8108afe:	2b00      	cmp	r3, #0
 8108b00:	d10b      	bne.n	8108b1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8108b02:	69bb      	ldr	r3, [r7, #24]
 8108b04:	881b      	ldrh	r3, [r3, #0]
 8108b06:	461a      	mov	r2, r3
 8108b08:	68fb      	ldr	r3, [r7, #12]
 8108b0a:	681b      	ldr	r3, [r3, #0]
 8108b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108b10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8108b12:	69bb      	ldr	r3, [r7, #24]
 8108b14:	3302      	adds	r3, #2
 8108b16:	61bb      	str	r3, [r7, #24]
 8108b18:	e007      	b.n	8108b2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8108b1a:	69fb      	ldr	r3, [r7, #28]
 8108b1c:	781a      	ldrb	r2, [r3, #0]
 8108b1e:	68fb      	ldr	r3, [r7, #12]
 8108b20:	681b      	ldr	r3, [r3, #0]
 8108b22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8108b24:	69fb      	ldr	r3, [r7, #28]
 8108b26:	3301      	adds	r3, #1
 8108b28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8108b2a:	68fb      	ldr	r3, [r7, #12]
 8108b2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108b30:	b29b      	uxth	r3, r3
 8108b32:	3b01      	subs	r3, #1
 8108b34:	b29a      	uxth	r2, r3
 8108b36:	68fb      	ldr	r3, [r7, #12]
 8108b38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8108b3c:	68fb      	ldr	r3, [r7, #12]
 8108b3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108b42:	b29b      	uxth	r3, r3
 8108b44:	2b00      	cmp	r3, #0
 8108b46:	d1c8      	bne.n	8108ada <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8108b48:	683b      	ldr	r3, [r7, #0]
 8108b4a:	9300      	str	r3, [sp, #0]
 8108b4c:	697b      	ldr	r3, [r7, #20]
 8108b4e:	2200      	movs	r2, #0
 8108b50:	2140      	movs	r1, #64	; 0x40
 8108b52:	68f8      	ldr	r0, [r7, #12]
 8108b54:	f000 fec8 	bl	81098e8 <UART_WaitOnFlagUntilTimeout>
 8108b58:	4603      	mov	r3, r0
 8108b5a:	2b00      	cmp	r3, #0
 8108b5c:	d005      	beq.n	8108b6a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8108b5e:	68fb      	ldr	r3, [r7, #12]
 8108b60:	2220      	movs	r2, #32
 8108b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8108b66:	2303      	movs	r3, #3
 8108b68:	e006      	b.n	8108b78 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108b6a:	68fb      	ldr	r3, [r7, #12]
 8108b6c:	2220      	movs	r2, #32
 8108b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8108b72:	2300      	movs	r3, #0
 8108b74:	e000      	b.n	8108b78 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8108b76:	2302      	movs	r3, #2
  }
}
 8108b78:	4618      	mov	r0, r3
 8108b7a:	3720      	adds	r7, #32
 8108b7c:	46bd      	mov	sp, r7
 8108b7e:	bd80      	pop	{r7, pc}

08108b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8108b84:	b092      	sub	sp, #72	; 0x48
 8108b86:	af00      	add	r7, sp, #0
 8108b88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8108b8a:	2300      	movs	r3, #0
 8108b8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108b90:	697b      	ldr	r3, [r7, #20]
 8108b92:	689a      	ldr	r2, [r3, #8]
 8108b94:	697b      	ldr	r3, [r7, #20]
 8108b96:	691b      	ldr	r3, [r3, #16]
 8108b98:	431a      	orrs	r2, r3
 8108b9a:	697b      	ldr	r3, [r7, #20]
 8108b9c:	695b      	ldr	r3, [r3, #20]
 8108b9e:	431a      	orrs	r2, r3
 8108ba0:	697b      	ldr	r3, [r7, #20]
 8108ba2:	69db      	ldr	r3, [r3, #28]
 8108ba4:	4313      	orrs	r3, r2
 8108ba6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108ba8:	697b      	ldr	r3, [r7, #20]
 8108baa:	681b      	ldr	r3, [r3, #0]
 8108bac:	681a      	ldr	r2, [r3, #0]
 8108bae:	4bbd      	ldr	r3, [pc, #756]	; (8108ea4 <UART_SetConfig+0x324>)
 8108bb0:	4013      	ands	r3, r2
 8108bb2:	697a      	ldr	r2, [r7, #20]
 8108bb4:	6812      	ldr	r2, [r2, #0]
 8108bb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108bb8:	430b      	orrs	r3, r1
 8108bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8108bbc:	697b      	ldr	r3, [r7, #20]
 8108bbe:	681b      	ldr	r3, [r3, #0]
 8108bc0:	685b      	ldr	r3, [r3, #4]
 8108bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8108bc6:	697b      	ldr	r3, [r7, #20]
 8108bc8:	68da      	ldr	r2, [r3, #12]
 8108bca:	697b      	ldr	r3, [r7, #20]
 8108bcc:	681b      	ldr	r3, [r3, #0]
 8108bce:	430a      	orrs	r2, r1
 8108bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8108bd2:	697b      	ldr	r3, [r7, #20]
 8108bd4:	699b      	ldr	r3, [r3, #24]
 8108bd6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108bd8:	697b      	ldr	r3, [r7, #20]
 8108bda:	681b      	ldr	r3, [r3, #0]
 8108bdc:	4ab2      	ldr	r2, [pc, #712]	; (8108ea8 <UART_SetConfig+0x328>)
 8108bde:	4293      	cmp	r3, r2
 8108be0:	d004      	beq.n	8108bec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8108be2:	697b      	ldr	r3, [r7, #20]
 8108be4:	6a1b      	ldr	r3, [r3, #32]
 8108be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108be8:	4313      	orrs	r3, r2
 8108bea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108bec:	697b      	ldr	r3, [r7, #20]
 8108bee:	681b      	ldr	r3, [r3, #0]
 8108bf0:	689b      	ldr	r3, [r3, #8]
 8108bf2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8108bf6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8108bfa:	697a      	ldr	r2, [r7, #20]
 8108bfc:	6812      	ldr	r2, [r2, #0]
 8108bfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108c00:	430b      	orrs	r3, r1
 8108c02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8108c04:	697b      	ldr	r3, [r7, #20]
 8108c06:	681b      	ldr	r3, [r3, #0]
 8108c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108c0a:	f023 010f 	bic.w	r1, r3, #15
 8108c0e:	697b      	ldr	r3, [r7, #20]
 8108c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8108c12:	697b      	ldr	r3, [r7, #20]
 8108c14:	681b      	ldr	r3, [r3, #0]
 8108c16:	430a      	orrs	r2, r1
 8108c18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108c1a:	697b      	ldr	r3, [r7, #20]
 8108c1c:	681b      	ldr	r3, [r3, #0]
 8108c1e:	4aa3      	ldr	r2, [pc, #652]	; (8108eac <UART_SetConfig+0x32c>)
 8108c20:	4293      	cmp	r3, r2
 8108c22:	d177      	bne.n	8108d14 <UART_SetConfig+0x194>
 8108c24:	4ba2      	ldr	r3, [pc, #648]	; (8108eb0 <UART_SetConfig+0x330>)
 8108c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108c28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108c2c:	2b28      	cmp	r3, #40	; 0x28
 8108c2e:	d86d      	bhi.n	8108d0c <UART_SetConfig+0x18c>
 8108c30:	a201      	add	r2, pc, #4	; (adr r2, 8108c38 <UART_SetConfig+0xb8>)
 8108c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c36:	bf00      	nop
 8108c38:	08108cdd 	.word	0x08108cdd
 8108c3c:	08108d0d 	.word	0x08108d0d
 8108c40:	08108d0d 	.word	0x08108d0d
 8108c44:	08108d0d 	.word	0x08108d0d
 8108c48:	08108d0d 	.word	0x08108d0d
 8108c4c:	08108d0d 	.word	0x08108d0d
 8108c50:	08108d0d 	.word	0x08108d0d
 8108c54:	08108d0d 	.word	0x08108d0d
 8108c58:	08108ce5 	.word	0x08108ce5
 8108c5c:	08108d0d 	.word	0x08108d0d
 8108c60:	08108d0d 	.word	0x08108d0d
 8108c64:	08108d0d 	.word	0x08108d0d
 8108c68:	08108d0d 	.word	0x08108d0d
 8108c6c:	08108d0d 	.word	0x08108d0d
 8108c70:	08108d0d 	.word	0x08108d0d
 8108c74:	08108d0d 	.word	0x08108d0d
 8108c78:	08108ced 	.word	0x08108ced
 8108c7c:	08108d0d 	.word	0x08108d0d
 8108c80:	08108d0d 	.word	0x08108d0d
 8108c84:	08108d0d 	.word	0x08108d0d
 8108c88:	08108d0d 	.word	0x08108d0d
 8108c8c:	08108d0d 	.word	0x08108d0d
 8108c90:	08108d0d 	.word	0x08108d0d
 8108c94:	08108d0d 	.word	0x08108d0d
 8108c98:	08108cf5 	.word	0x08108cf5
 8108c9c:	08108d0d 	.word	0x08108d0d
 8108ca0:	08108d0d 	.word	0x08108d0d
 8108ca4:	08108d0d 	.word	0x08108d0d
 8108ca8:	08108d0d 	.word	0x08108d0d
 8108cac:	08108d0d 	.word	0x08108d0d
 8108cb0:	08108d0d 	.word	0x08108d0d
 8108cb4:	08108d0d 	.word	0x08108d0d
 8108cb8:	08108cfd 	.word	0x08108cfd
 8108cbc:	08108d0d 	.word	0x08108d0d
 8108cc0:	08108d0d 	.word	0x08108d0d
 8108cc4:	08108d0d 	.word	0x08108d0d
 8108cc8:	08108d0d 	.word	0x08108d0d
 8108ccc:	08108d0d 	.word	0x08108d0d
 8108cd0:	08108d0d 	.word	0x08108d0d
 8108cd4:	08108d0d 	.word	0x08108d0d
 8108cd8:	08108d05 	.word	0x08108d05
 8108cdc:	2301      	movs	r3, #1
 8108cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ce2:	e220      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108ce4:	2304      	movs	r3, #4
 8108ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108cea:	e21c      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108cec:	2308      	movs	r3, #8
 8108cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108cf2:	e218      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108cf4:	2310      	movs	r3, #16
 8108cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108cfa:	e214      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108cfc:	2320      	movs	r3, #32
 8108cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d02:	e210      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108d04:	2340      	movs	r3, #64	; 0x40
 8108d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d0a:	e20c      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108d0c:	2380      	movs	r3, #128	; 0x80
 8108d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d12:	e208      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108d14:	697b      	ldr	r3, [r7, #20]
 8108d16:	681b      	ldr	r3, [r3, #0]
 8108d18:	4a66      	ldr	r2, [pc, #408]	; (8108eb4 <UART_SetConfig+0x334>)
 8108d1a:	4293      	cmp	r3, r2
 8108d1c:	d130      	bne.n	8108d80 <UART_SetConfig+0x200>
 8108d1e:	4b64      	ldr	r3, [pc, #400]	; (8108eb0 <UART_SetConfig+0x330>)
 8108d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108d22:	f003 0307 	and.w	r3, r3, #7
 8108d26:	2b05      	cmp	r3, #5
 8108d28:	d826      	bhi.n	8108d78 <UART_SetConfig+0x1f8>
 8108d2a:	a201      	add	r2, pc, #4	; (adr r2, 8108d30 <UART_SetConfig+0x1b0>)
 8108d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108d30:	08108d49 	.word	0x08108d49
 8108d34:	08108d51 	.word	0x08108d51
 8108d38:	08108d59 	.word	0x08108d59
 8108d3c:	08108d61 	.word	0x08108d61
 8108d40:	08108d69 	.word	0x08108d69
 8108d44:	08108d71 	.word	0x08108d71
 8108d48:	2300      	movs	r3, #0
 8108d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d4e:	e1ea      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108d50:	2304      	movs	r3, #4
 8108d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d56:	e1e6      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108d58:	2308      	movs	r3, #8
 8108d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d5e:	e1e2      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108d60:	2310      	movs	r3, #16
 8108d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d66:	e1de      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108d68:	2320      	movs	r3, #32
 8108d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d6e:	e1da      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108d70:	2340      	movs	r3, #64	; 0x40
 8108d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d76:	e1d6      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108d78:	2380      	movs	r3, #128	; 0x80
 8108d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d7e:	e1d2      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108d80:	697b      	ldr	r3, [r7, #20]
 8108d82:	681b      	ldr	r3, [r3, #0]
 8108d84:	4a4c      	ldr	r2, [pc, #304]	; (8108eb8 <UART_SetConfig+0x338>)
 8108d86:	4293      	cmp	r3, r2
 8108d88:	d130      	bne.n	8108dec <UART_SetConfig+0x26c>
 8108d8a:	4b49      	ldr	r3, [pc, #292]	; (8108eb0 <UART_SetConfig+0x330>)
 8108d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108d8e:	f003 0307 	and.w	r3, r3, #7
 8108d92:	2b05      	cmp	r3, #5
 8108d94:	d826      	bhi.n	8108de4 <UART_SetConfig+0x264>
 8108d96:	a201      	add	r2, pc, #4	; (adr r2, 8108d9c <UART_SetConfig+0x21c>)
 8108d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108d9c:	08108db5 	.word	0x08108db5
 8108da0:	08108dbd 	.word	0x08108dbd
 8108da4:	08108dc5 	.word	0x08108dc5
 8108da8:	08108dcd 	.word	0x08108dcd
 8108dac:	08108dd5 	.word	0x08108dd5
 8108db0:	08108ddd 	.word	0x08108ddd
 8108db4:	2300      	movs	r3, #0
 8108db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108dba:	e1b4      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108dbc:	2304      	movs	r3, #4
 8108dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108dc2:	e1b0      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108dc4:	2308      	movs	r3, #8
 8108dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108dca:	e1ac      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108dcc:	2310      	movs	r3, #16
 8108dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108dd2:	e1a8      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108dd4:	2320      	movs	r3, #32
 8108dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108dda:	e1a4      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108ddc:	2340      	movs	r3, #64	; 0x40
 8108dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108de2:	e1a0      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108de4:	2380      	movs	r3, #128	; 0x80
 8108de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108dea:	e19c      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108dec:	697b      	ldr	r3, [r7, #20]
 8108dee:	681b      	ldr	r3, [r3, #0]
 8108df0:	4a32      	ldr	r2, [pc, #200]	; (8108ebc <UART_SetConfig+0x33c>)
 8108df2:	4293      	cmp	r3, r2
 8108df4:	d130      	bne.n	8108e58 <UART_SetConfig+0x2d8>
 8108df6:	4b2e      	ldr	r3, [pc, #184]	; (8108eb0 <UART_SetConfig+0x330>)
 8108df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108dfa:	f003 0307 	and.w	r3, r3, #7
 8108dfe:	2b05      	cmp	r3, #5
 8108e00:	d826      	bhi.n	8108e50 <UART_SetConfig+0x2d0>
 8108e02:	a201      	add	r2, pc, #4	; (adr r2, 8108e08 <UART_SetConfig+0x288>)
 8108e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108e08:	08108e21 	.word	0x08108e21
 8108e0c:	08108e29 	.word	0x08108e29
 8108e10:	08108e31 	.word	0x08108e31
 8108e14:	08108e39 	.word	0x08108e39
 8108e18:	08108e41 	.word	0x08108e41
 8108e1c:	08108e49 	.word	0x08108e49
 8108e20:	2300      	movs	r3, #0
 8108e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e26:	e17e      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108e28:	2304      	movs	r3, #4
 8108e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e2e:	e17a      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108e30:	2308      	movs	r3, #8
 8108e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e36:	e176      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108e38:	2310      	movs	r3, #16
 8108e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e3e:	e172      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108e40:	2320      	movs	r3, #32
 8108e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e46:	e16e      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108e48:	2340      	movs	r3, #64	; 0x40
 8108e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e4e:	e16a      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108e50:	2380      	movs	r3, #128	; 0x80
 8108e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e56:	e166      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108e58:	697b      	ldr	r3, [r7, #20]
 8108e5a:	681b      	ldr	r3, [r3, #0]
 8108e5c:	4a18      	ldr	r2, [pc, #96]	; (8108ec0 <UART_SetConfig+0x340>)
 8108e5e:	4293      	cmp	r3, r2
 8108e60:	d140      	bne.n	8108ee4 <UART_SetConfig+0x364>
 8108e62:	4b13      	ldr	r3, [pc, #76]	; (8108eb0 <UART_SetConfig+0x330>)
 8108e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108e66:	f003 0307 	and.w	r3, r3, #7
 8108e6a:	2b05      	cmp	r3, #5
 8108e6c:	d836      	bhi.n	8108edc <UART_SetConfig+0x35c>
 8108e6e:	a201      	add	r2, pc, #4	; (adr r2, 8108e74 <UART_SetConfig+0x2f4>)
 8108e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108e74:	08108e8d 	.word	0x08108e8d
 8108e78:	08108e95 	.word	0x08108e95
 8108e7c:	08108e9d 	.word	0x08108e9d
 8108e80:	08108ec5 	.word	0x08108ec5
 8108e84:	08108ecd 	.word	0x08108ecd
 8108e88:	08108ed5 	.word	0x08108ed5
 8108e8c:	2300      	movs	r3, #0
 8108e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e92:	e148      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108e94:	2304      	movs	r3, #4
 8108e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e9a:	e144      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108e9c:	2308      	movs	r3, #8
 8108e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ea2:	e140      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108ea4:	cfff69f3 	.word	0xcfff69f3
 8108ea8:	58000c00 	.word	0x58000c00
 8108eac:	40011000 	.word	0x40011000
 8108eb0:	58024400 	.word	0x58024400
 8108eb4:	40004400 	.word	0x40004400
 8108eb8:	40004800 	.word	0x40004800
 8108ebc:	40004c00 	.word	0x40004c00
 8108ec0:	40005000 	.word	0x40005000
 8108ec4:	2310      	movs	r3, #16
 8108ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108eca:	e12c      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108ecc:	2320      	movs	r3, #32
 8108ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ed2:	e128      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108ed4:	2340      	movs	r3, #64	; 0x40
 8108ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108eda:	e124      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108edc:	2380      	movs	r3, #128	; 0x80
 8108ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ee2:	e120      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108ee4:	697b      	ldr	r3, [r7, #20]
 8108ee6:	681b      	ldr	r3, [r3, #0]
 8108ee8:	4acb      	ldr	r2, [pc, #812]	; (8109218 <UART_SetConfig+0x698>)
 8108eea:	4293      	cmp	r3, r2
 8108eec:	d176      	bne.n	8108fdc <UART_SetConfig+0x45c>
 8108eee:	4bcb      	ldr	r3, [pc, #812]	; (810921c <UART_SetConfig+0x69c>)
 8108ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108ef6:	2b28      	cmp	r3, #40	; 0x28
 8108ef8:	d86c      	bhi.n	8108fd4 <UART_SetConfig+0x454>
 8108efa:	a201      	add	r2, pc, #4	; (adr r2, 8108f00 <UART_SetConfig+0x380>)
 8108efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108f00:	08108fa5 	.word	0x08108fa5
 8108f04:	08108fd5 	.word	0x08108fd5
 8108f08:	08108fd5 	.word	0x08108fd5
 8108f0c:	08108fd5 	.word	0x08108fd5
 8108f10:	08108fd5 	.word	0x08108fd5
 8108f14:	08108fd5 	.word	0x08108fd5
 8108f18:	08108fd5 	.word	0x08108fd5
 8108f1c:	08108fd5 	.word	0x08108fd5
 8108f20:	08108fad 	.word	0x08108fad
 8108f24:	08108fd5 	.word	0x08108fd5
 8108f28:	08108fd5 	.word	0x08108fd5
 8108f2c:	08108fd5 	.word	0x08108fd5
 8108f30:	08108fd5 	.word	0x08108fd5
 8108f34:	08108fd5 	.word	0x08108fd5
 8108f38:	08108fd5 	.word	0x08108fd5
 8108f3c:	08108fd5 	.word	0x08108fd5
 8108f40:	08108fb5 	.word	0x08108fb5
 8108f44:	08108fd5 	.word	0x08108fd5
 8108f48:	08108fd5 	.word	0x08108fd5
 8108f4c:	08108fd5 	.word	0x08108fd5
 8108f50:	08108fd5 	.word	0x08108fd5
 8108f54:	08108fd5 	.word	0x08108fd5
 8108f58:	08108fd5 	.word	0x08108fd5
 8108f5c:	08108fd5 	.word	0x08108fd5
 8108f60:	08108fbd 	.word	0x08108fbd
 8108f64:	08108fd5 	.word	0x08108fd5
 8108f68:	08108fd5 	.word	0x08108fd5
 8108f6c:	08108fd5 	.word	0x08108fd5
 8108f70:	08108fd5 	.word	0x08108fd5
 8108f74:	08108fd5 	.word	0x08108fd5
 8108f78:	08108fd5 	.word	0x08108fd5
 8108f7c:	08108fd5 	.word	0x08108fd5
 8108f80:	08108fc5 	.word	0x08108fc5
 8108f84:	08108fd5 	.word	0x08108fd5
 8108f88:	08108fd5 	.word	0x08108fd5
 8108f8c:	08108fd5 	.word	0x08108fd5
 8108f90:	08108fd5 	.word	0x08108fd5
 8108f94:	08108fd5 	.word	0x08108fd5
 8108f98:	08108fd5 	.word	0x08108fd5
 8108f9c:	08108fd5 	.word	0x08108fd5
 8108fa0:	08108fcd 	.word	0x08108fcd
 8108fa4:	2301      	movs	r3, #1
 8108fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108faa:	e0bc      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108fac:	2304      	movs	r3, #4
 8108fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fb2:	e0b8      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108fb4:	2308      	movs	r3, #8
 8108fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fba:	e0b4      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108fbc:	2310      	movs	r3, #16
 8108fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fc2:	e0b0      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108fc4:	2320      	movs	r3, #32
 8108fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fca:	e0ac      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108fcc:	2340      	movs	r3, #64	; 0x40
 8108fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fd2:	e0a8      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108fd4:	2380      	movs	r3, #128	; 0x80
 8108fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fda:	e0a4      	b.n	8109126 <UART_SetConfig+0x5a6>
 8108fdc:	697b      	ldr	r3, [r7, #20]
 8108fde:	681b      	ldr	r3, [r3, #0]
 8108fe0:	4a8f      	ldr	r2, [pc, #572]	; (8109220 <UART_SetConfig+0x6a0>)
 8108fe2:	4293      	cmp	r3, r2
 8108fe4:	d130      	bne.n	8109048 <UART_SetConfig+0x4c8>
 8108fe6:	4b8d      	ldr	r3, [pc, #564]	; (810921c <UART_SetConfig+0x69c>)
 8108fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108fea:	f003 0307 	and.w	r3, r3, #7
 8108fee:	2b05      	cmp	r3, #5
 8108ff0:	d826      	bhi.n	8109040 <UART_SetConfig+0x4c0>
 8108ff2:	a201      	add	r2, pc, #4	; (adr r2, 8108ff8 <UART_SetConfig+0x478>)
 8108ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108ff8:	08109011 	.word	0x08109011
 8108ffc:	08109019 	.word	0x08109019
 8109000:	08109021 	.word	0x08109021
 8109004:	08109029 	.word	0x08109029
 8109008:	08109031 	.word	0x08109031
 810900c:	08109039 	.word	0x08109039
 8109010:	2300      	movs	r3, #0
 8109012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109016:	e086      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109018:	2304      	movs	r3, #4
 810901a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810901e:	e082      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109020:	2308      	movs	r3, #8
 8109022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109026:	e07e      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109028:	2310      	movs	r3, #16
 810902a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810902e:	e07a      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109030:	2320      	movs	r3, #32
 8109032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109036:	e076      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109038:	2340      	movs	r3, #64	; 0x40
 810903a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810903e:	e072      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109040:	2380      	movs	r3, #128	; 0x80
 8109042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109046:	e06e      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109048:	697b      	ldr	r3, [r7, #20]
 810904a:	681b      	ldr	r3, [r3, #0]
 810904c:	4a75      	ldr	r2, [pc, #468]	; (8109224 <UART_SetConfig+0x6a4>)
 810904e:	4293      	cmp	r3, r2
 8109050:	d130      	bne.n	81090b4 <UART_SetConfig+0x534>
 8109052:	4b72      	ldr	r3, [pc, #456]	; (810921c <UART_SetConfig+0x69c>)
 8109054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109056:	f003 0307 	and.w	r3, r3, #7
 810905a:	2b05      	cmp	r3, #5
 810905c:	d826      	bhi.n	81090ac <UART_SetConfig+0x52c>
 810905e:	a201      	add	r2, pc, #4	; (adr r2, 8109064 <UART_SetConfig+0x4e4>)
 8109060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109064:	0810907d 	.word	0x0810907d
 8109068:	08109085 	.word	0x08109085
 810906c:	0810908d 	.word	0x0810908d
 8109070:	08109095 	.word	0x08109095
 8109074:	0810909d 	.word	0x0810909d
 8109078:	081090a5 	.word	0x081090a5
 810907c:	2300      	movs	r3, #0
 810907e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109082:	e050      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109084:	2304      	movs	r3, #4
 8109086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810908a:	e04c      	b.n	8109126 <UART_SetConfig+0x5a6>
 810908c:	2308      	movs	r3, #8
 810908e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109092:	e048      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109094:	2310      	movs	r3, #16
 8109096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810909a:	e044      	b.n	8109126 <UART_SetConfig+0x5a6>
 810909c:	2320      	movs	r3, #32
 810909e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81090a2:	e040      	b.n	8109126 <UART_SetConfig+0x5a6>
 81090a4:	2340      	movs	r3, #64	; 0x40
 81090a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81090aa:	e03c      	b.n	8109126 <UART_SetConfig+0x5a6>
 81090ac:	2380      	movs	r3, #128	; 0x80
 81090ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81090b2:	e038      	b.n	8109126 <UART_SetConfig+0x5a6>
 81090b4:	697b      	ldr	r3, [r7, #20]
 81090b6:	681b      	ldr	r3, [r3, #0]
 81090b8:	4a5b      	ldr	r2, [pc, #364]	; (8109228 <UART_SetConfig+0x6a8>)
 81090ba:	4293      	cmp	r3, r2
 81090bc:	d130      	bne.n	8109120 <UART_SetConfig+0x5a0>
 81090be:	4b57      	ldr	r3, [pc, #348]	; (810921c <UART_SetConfig+0x69c>)
 81090c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81090c2:	f003 0307 	and.w	r3, r3, #7
 81090c6:	2b05      	cmp	r3, #5
 81090c8:	d826      	bhi.n	8109118 <UART_SetConfig+0x598>
 81090ca:	a201      	add	r2, pc, #4	; (adr r2, 81090d0 <UART_SetConfig+0x550>)
 81090cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81090d0:	081090e9 	.word	0x081090e9
 81090d4:	081090f1 	.word	0x081090f1
 81090d8:	081090f9 	.word	0x081090f9
 81090dc:	08109101 	.word	0x08109101
 81090e0:	08109109 	.word	0x08109109
 81090e4:	08109111 	.word	0x08109111
 81090e8:	2302      	movs	r3, #2
 81090ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81090ee:	e01a      	b.n	8109126 <UART_SetConfig+0x5a6>
 81090f0:	2304      	movs	r3, #4
 81090f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81090f6:	e016      	b.n	8109126 <UART_SetConfig+0x5a6>
 81090f8:	2308      	movs	r3, #8
 81090fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81090fe:	e012      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109100:	2310      	movs	r3, #16
 8109102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109106:	e00e      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109108:	2320      	movs	r3, #32
 810910a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810910e:	e00a      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109110:	2340      	movs	r3, #64	; 0x40
 8109112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109116:	e006      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109118:	2380      	movs	r3, #128	; 0x80
 810911a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810911e:	e002      	b.n	8109126 <UART_SetConfig+0x5a6>
 8109120:	2380      	movs	r3, #128	; 0x80
 8109122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8109126:	697b      	ldr	r3, [r7, #20]
 8109128:	681b      	ldr	r3, [r3, #0]
 810912a:	4a3f      	ldr	r2, [pc, #252]	; (8109228 <UART_SetConfig+0x6a8>)
 810912c:	4293      	cmp	r3, r2
 810912e:	f040 80f8 	bne.w	8109322 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8109132:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109136:	2b20      	cmp	r3, #32
 8109138:	dc46      	bgt.n	81091c8 <UART_SetConfig+0x648>
 810913a:	2b02      	cmp	r3, #2
 810913c:	f2c0 8082 	blt.w	8109244 <UART_SetConfig+0x6c4>
 8109140:	3b02      	subs	r3, #2
 8109142:	2b1e      	cmp	r3, #30
 8109144:	d87e      	bhi.n	8109244 <UART_SetConfig+0x6c4>
 8109146:	a201      	add	r2, pc, #4	; (adr r2, 810914c <UART_SetConfig+0x5cc>)
 8109148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810914c:	081091cf 	.word	0x081091cf
 8109150:	08109245 	.word	0x08109245
 8109154:	081091d7 	.word	0x081091d7
 8109158:	08109245 	.word	0x08109245
 810915c:	08109245 	.word	0x08109245
 8109160:	08109245 	.word	0x08109245
 8109164:	081091e7 	.word	0x081091e7
 8109168:	08109245 	.word	0x08109245
 810916c:	08109245 	.word	0x08109245
 8109170:	08109245 	.word	0x08109245
 8109174:	08109245 	.word	0x08109245
 8109178:	08109245 	.word	0x08109245
 810917c:	08109245 	.word	0x08109245
 8109180:	08109245 	.word	0x08109245
 8109184:	081091f7 	.word	0x081091f7
 8109188:	08109245 	.word	0x08109245
 810918c:	08109245 	.word	0x08109245
 8109190:	08109245 	.word	0x08109245
 8109194:	08109245 	.word	0x08109245
 8109198:	08109245 	.word	0x08109245
 810919c:	08109245 	.word	0x08109245
 81091a0:	08109245 	.word	0x08109245
 81091a4:	08109245 	.word	0x08109245
 81091a8:	08109245 	.word	0x08109245
 81091ac:	08109245 	.word	0x08109245
 81091b0:	08109245 	.word	0x08109245
 81091b4:	08109245 	.word	0x08109245
 81091b8:	08109245 	.word	0x08109245
 81091bc:	08109245 	.word	0x08109245
 81091c0:	08109245 	.word	0x08109245
 81091c4:	08109237 	.word	0x08109237
 81091c8:	2b40      	cmp	r3, #64	; 0x40
 81091ca:	d037      	beq.n	810923c <UART_SetConfig+0x6bc>
 81091cc:	e03a      	b.n	8109244 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81091ce:	f7fc ff8f 	bl	81060f0 <HAL_RCCEx_GetD3PCLK1Freq>
 81091d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81091d4:	e03c      	b.n	8109250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81091d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81091da:	4618      	mov	r0, r3
 81091dc:	f7fc ff9e 	bl	810611c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81091e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81091e4:	e034      	b.n	8109250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81091e6:	f107 0318 	add.w	r3, r7, #24
 81091ea:	4618      	mov	r0, r3
 81091ec:	f7fd f8ea 	bl	81063c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81091f0:	69fb      	ldr	r3, [r7, #28]
 81091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81091f4:	e02c      	b.n	8109250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81091f6:	4b09      	ldr	r3, [pc, #36]	; (810921c <UART_SetConfig+0x69c>)
 81091f8:	681b      	ldr	r3, [r3, #0]
 81091fa:	f003 0320 	and.w	r3, r3, #32
 81091fe:	2b00      	cmp	r3, #0
 8109200:	d016      	beq.n	8109230 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109202:	4b06      	ldr	r3, [pc, #24]	; (810921c <UART_SetConfig+0x69c>)
 8109204:	681b      	ldr	r3, [r3, #0]
 8109206:	08db      	lsrs	r3, r3, #3
 8109208:	f003 0303 	and.w	r3, r3, #3
 810920c:	4a07      	ldr	r2, [pc, #28]	; (810922c <UART_SetConfig+0x6ac>)
 810920e:	fa22 f303 	lsr.w	r3, r2, r3
 8109212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109214:	e01c      	b.n	8109250 <UART_SetConfig+0x6d0>
 8109216:	bf00      	nop
 8109218:	40011400 	.word	0x40011400
 810921c:	58024400 	.word	0x58024400
 8109220:	40007800 	.word	0x40007800
 8109224:	40007c00 	.word	0x40007c00
 8109228:	58000c00 	.word	0x58000c00
 810922c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8109230:	4b9d      	ldr	r3, [pc, #628]	; (81094a8 <UART_SetConfig+0x928>)
 8109232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109234:	e00c      	b.n	8109250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109236:	4b9d      	ldr	r3, [pc, #628]	; (81094ac <UART_SetConfig+0x92c>)
 8109238:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810923a:	e009      	b.n	8109250 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810923c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109242:	e005      	b.n	8109250 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8109244:	2300      	movs	r3, #0
 8109246:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109248:	2301      	movs	r3, #1
 810924a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810924e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8109250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109252:	2b00      	cmp	r3, #0
 8109254:	f000 81de 	beq.w	8109614 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8109258:	697b      	ldr	r3, [r7, #20]
 810925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810925c:	4a94      	ldr	r2, [pc, #592]	; (81094b0 <UART_SetConfig+0x930>)
 810925e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109262:	461a      	mov	r2, r3
 8109264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109266:	fbb3 f3f2 	udiv	r3, r3, r2
 810926a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810926c:	697b      	ldr	r3, [r7, #20]
 810926e:	685a      	ldr	r2, [r3, #4]
 8109270:	4613      	mov	r3, r2
 8109272:	005b      	lsls	r3, r3, #1
 8109274:	4413      	add	r3, r2
 8109276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109278:	429a      	cmp	r2, r3
 810927a:	d305      	bcc.n	8109288 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810927c:	697b      	ldr	r3, [r7, #20]
 810927e:	685b      	ldr	r3, [r3, #4]
 8109280:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109284:	429a      	cmp	r2, r3
 8109286:	d903      	bls.n	8109290 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8109288:	2301      	movs	r3, #1
 810928a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810928e:	e1c1      	b.n	8109614 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109292:	2200      	movs	r2, #0
 8109294:	60bb      	str	r3, [r7, #8]
 8109296:	60fa      	str	r2, [r7, #12]
 8109298:	697b      	ldr	r3, [r7, #20]
 810929a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810929c:	4a84      	ldr	r2, [pc, #528]	; (81094b0 <UART_SetConfig+0x930>)
 810929e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81092a2:	b29b      	uxth	r3, r3
 81092a4:	2200      	movs	r2, #0
 81092a6:	603b      	str	r3, [r7, #0]
 81092a8:	607a      	str	r2, [r7, #4]
 81092aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 81092ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81092b2:	f7f7 fd71 	bl	8100d98 <__aeabi_uldivmod>
 81092b6:	4602      	mov	r2, r0
 81092b8:	460b      	mov	r3, r1
 81092ba:	4610      	mov	r0, r2
 81092bc:	4619      	mov	r1, r3
 81092be:	f04f 0200 	mov.w	r2, #0
 81092c2:	f04f 0300 	mov.w	r3, #0
 81092c6:	020b      	lsls	r3, r1, #8
 81092c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81092cc:	0202      	lsls	r2, r0, #8
 81092ce:	6979      	ldr	r1, [r7, #20]
 81092d0:	6849      	ldr	r1, [r1, #4]
 81092d2:	0849      	lsrs	r1, r1, #1
 81092d4:	2000      	movs	r0, #0
 81092d6:	460c      	mov	r4, r1
 81092d8:	4605      	mov	r5, r0
 81092da:	eb12 0804 	adds.w	r8, r2, r4
 81092de:	eb43 0905 	adc.w	r9, r3, r5
 81092e2:	697b      	ldr	r3, [r7, #20]
 81092e4:	685b      	ldr	r3, [r3, #4]
 81092e6:	2200      	movs	r2, #0
 81092e8:	469a      	mov	sl, r3
 81092ea:	4693      	mov	fp, r2
 81092ec:	4652      	mov	r2, sl
 81092ee:	465b      	mov	r3, fp
 81092f0:	4640      	mov	r0, r8
 81092f2:	4649      	mov	r1, r9
 81092f4:	f7f7 fd50 	bl	8100d98 <__aeabi_uldivmod>
 81092f8:	4602      	mov	r2, r0
 81092fa:	460b      	mov	r3, r1
 81092fc:	4613      	mov	r3, r2
 81092fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8109300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109306:	d308      	bcc.n	810931a <UART_SetConfig+0x79a>
 8109308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810930a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810930e:	d204      	bcs.n	810931a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8109310:	697b      	ldr	r3, [r7, #20]
 8109312:	681b      	ldr	r3, [r3, #0]
 8109314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8109316:	60da      	str	r2, [r3, #12]
 8109318:	e17c      	b.n	8109614 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810931a:	2301      	movs	r3, #1
 810931c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109320:	e178      	b.n	8109614 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8109322:	697b      	ldr	r3, [r7, #20]
 8109324:	69db      	ldr	r3, [r3, #28]
 8109326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810932a:	f040 80c5 	bne.w	81094b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810932e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109332:	2b20      	cmp	r3, #32
 8109334:	dc48      	bgt.n	81093c8 <UART_SetConfig+0x848>
 8109336:	2b00      	cmp	r3, #0
 8109338:	db7b      	blt.n	8109432 <UART_SetConfig+0x8b2>
 810933a:	2b20      	cmp	r3, #32
 810933c:	d879      	bhi.n	8109432 <UART_SetConfig+0x8b2>
 810933e:	a201      	add	r2, pc, #4	; (adr r2, 8109344 <UART_SetConfig+0x7c4>)
 8109340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109344:	081093cf 	.word	0x081093cf
 8109348:	081093d7 	.word	0x081093d7
 810934c:	08109433 	.word	0x08109433
 8109350:	08109433 	.word	0x08109433
 8109354:	081093df 	.word	0x081093df
 8109358:	08109433 	.word	0x08109433
 810935c:	08109433 	.word	0x08109433
 8109360:	08109433 	.word	0x08109433
 8109364:	081093ef 	.word	0x081093ef
 8109368:	08109433 	.word	0x08109433
 810936c:	08109433 	.word	0x08109433
 8109370:	08109433 	.word	0x08109433
 8109374:	08109433 	.word	0x08109433
 8109378:	08109433 	.word	0x08109433
 810937c:	08109433 	.word	0x08109433
 8109380:	08109433 	.word	0x08109433
 8109384:	081093ff 	.word	0x081093ff
 8109388:	08109433 	.word	0x08109433
 810938c:	08109433 	.word	0x08109433
 8109390:	08109433 	.word	0x08109433
 8109394:	08109433 	.word	0x08109433
 8109398:	08109433 	.word	0x08109433
 810939c:	08109433 	.word	0x08109433
 81093a0:	08109433 	.word	0x08109433
 81093a4:	08109433 	.word	0x08109433
 81093a8:	08109433 	.word	0x08109433
 81093ac:	08109433 	.word	0x08109433
 81093b0:	08109433 	.word	0x08109433
 81093b4:	08109433 	.word	0x08109433
 81093b8:	08109433 	.word	0x08109433
 81093bc:	08109433 	.word	0x08109433
 81093c0:	08109433 	.word	0x08109433
 81093c4:	08109425 	.word	0x08109425
 81093c8:	2b40      	cmp	r3, #64	; 0x40
 81093ca:	d02e      	beq.n	810942a <UART_SetConfig+0x8aa>
 81093cc:	e031      	b.n	8109432 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81093ce:	f7fb fc59 	bl	8104c84 <HAL_RCC_GetPCLK1Freq>
 81093d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81093d4:	e033      	b.n	810943e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81093d6:	f7fb fc6b 	bl	8104cb0 <HAL_RCC_GetPCLK2Freq>
 81093da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81093dc:	e02f      	b.n	810943e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81093de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81093e2:	4618      	mov	r0, r3
 81093e4:	f7fc fe9a 	bl	810611c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81093ec:	e027      	b.n	810943e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81093ee:	f107 0318 	add.w	r3, r7, #24
 81093f2:	4618      	mov	r0, r3
 81093f4:	f7fc ffe6 	bl	81063c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81093f8:	69fb      	ldr	r3, [r7, #28]
 81093fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81093fc:	e01f      	b.n	810943e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81093fe:	4b2d      	ldr	r3, [pc, #180]	; (81094b4 <UART_SetConfig+0x934>)
 8109400:	681b      	ldr	r3, [r3, #0]
 8109402:	f003 0320 	and.w	r3, r3, #32
 8109406:	2b00      	cmp	r3, #0
 8109408:	d009      	beq.n	810941e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810940a:	4b2a      	ldr	r3, [pc, #168]	; (81094b4 <UART_SetConfig+0x934>)
 810940c:	681b      	ldr	r3, [r3, #0]
 810940e:	08db      	lsrs	r3, r3, #3
 8109410:	f003 0303 	and.w	r3, r3, #3
 8109414:	4a24      	ldr	r2, [pc, #144]	; (81094a8 <UART_SetConfig+0x928>)
 8109416:	fa22 f303 	lsr.w	r3, r2, r3
 810941a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810941c:	e00f      	b.n	810943e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810941e:	4b22      	ldr	r3, [pc, #136]	; (81094a8 <UART_SetConfig+0x928>)
 8109420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109422:	e00c      	b.n	810943e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109424:	4b21      	ldr	r3, [pc, #132]	; (81094ac <UART_SetConfig+0x92c>)
 8109426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109428:	e009      	b.n	810943e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810942a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810942e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109430:	e005      	b.n	810943e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8109432:	2300      	movs	r3, #0
 8109434:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109436:	2301      	movs	r3, #1
 8109438:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810943c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810943e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109440:	2b00      	cmp	r3, #0
 8109442:	f000 80e7 	beq.w	8109614 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109446:	697b      	ldr	r3, [r7, #20]
 8109448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810944a:	4a19      	ldr	r2, [pc, #100]	; (81094b0 <UART_SetConfig+0x930>)
 810944c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109450:	461a      	mov	r2, r3
 8109452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109454:	fbb3 f3f2 	udiv	r3, r3, r2
 8109458:	005a      	lsls	r2, r3, #1
 810945a:	697b      	ldr	r3, [r7, #20]
 810945c:	685b      	ldr	r3, [r3, #4]
 810945e:	085b      	lsrs	r3, r3, #1
 8109460:	441a      	add	r2, r3
 8109462:	697b      	ldr	r3, [r7, #20]
 8109464:	685b      	ldr	r3, [r3, #4]
 8109466:	fbb2 f3f3 	udiv	r3, r2, r3
 810946a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810946e:	2b0f      	cmp	r3, #15
 8109470:	d916      	bls.n	81094a0 <UART_SetConfig+0x920>
 8109472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109478:	d212      	bcs.n	81094a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810947c:	b29b      	uxth	r3, r3
 810947e:	f023 030f 	bic.w	r3, r3, #15
 8109482:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8109484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109486:	085b      	lsrs	r3, r3, #1
 8109488:	b29b      	uxth	r3, r3
 810948a:	f003 0307 	and.w	r3, r3, #7
 810948e:	b29a      	uxth	r2, r3
 8109490:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8109492:	4313      	orrs	r3, r2
 8109494:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8109496:	697b      	ldr	r3, [r7, #20]
 8109498:	681b      	ldr	r3, [r3, #0]
 810949a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810949c:	60da      	str	r2, [r3, #12]
 810949e:	e0b9      	b.n	8109614 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81094a0:	2301      	movs	r3, #1
 81094a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81094a6:	e0b5      	b.n	8109614 <UART_SetConfig+0xa94>
 81094a8:	03d09000 	.word	0x03d09000
 81094ac:	003d0900 	.word	0x003d0900
 81094b0:	0810e840 	.word	0x0810e840
 81094b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81094b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81094bc:	2b20      	cmp	r3, #32
 81094be:	dc49      	bgt.n	8109554 <UART_SetConfig+0x9d4>
 81094c0:	2b00      	cmp	r3, #0
 81094c2:	db7c      	blt.n	81095be <UART_SetConfig+0xa3e>
 81094c4:	2b20      	cmp	r3, #32
 81094c6:	d87a      	bhi.n	81095be <UART_SetConfig+0xa3e>
 81094c8:	a201      	add	r2, pc, #4	; (adr r2, 81094d0 <UART_SetConfig+0x950>)
 81094ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81094ce:	bf00      	nop
 81094d0:	0810955b 	.word	0x0810955b
 81094d4:	08109563 	.word	0x08109563
 81094d8:	081095bf 	.word	0x081095bf
 81094dc:	081095bf 	.word	0x081095bf
 81094e0:	0810956b 	.word	0x0810956b
 81094e4:	081095bf 	.word	0x081095bf
 81094e8:	081095bf 	.word	0x081095bf
 81094ec:	081095bf 	.word	0x081095bf
 81094f0:	0810957b 	.word	0x0810957b
 81094f4:	081095bf 	.word	0x081095bf
 81094f8:	081095bf 	.word	0x081095bf
 81094fc:	081095bf 	.word	0x081095bf
 8109500:	081095bf 	.word	0x081095bf
 8109504:	081095bf 	.word	0x081095bf
 8109508:	081095bf 	.word	0x081095bf
 810950c:	081095bf 	.word	0x081095bf
 8109510:	0810958b 	.word	0x0810958b
 8109514:	081095bf 	.word	0x081095bf
 8109518:	081095bf 	.word	0x081095bf
 810951c:	081095bf 	.word	0x081095bf
 8109520:	081095bf 	.word	0x081095bf
 8109524:	081095bf 	.word	0x081095bf
 8109528:	081095bf 	.word	0x081095bf
 810952c:	081095bf 	.word	0x081095bf
 8109530:	081095bf 	.word	0x081095bf
 8109534:	081095bf 	.word	0x081095bf
 8109538:	081095bf 	.word	0x081095bf
 810953c:	081095bf 	.word	0x081095bf
 8109540:	081095bf 	.word	0x081095bf
 8109544:	081095bf 	.word	0x081095bf
 8109548:	081095bf 	.word	0x081095bf
 810954c:	081095bf 	.word	0x081095bf
 8109550:	081095b1 	.word	0x081095b1
 8109554:	2b40      	cmp	r3, #64	; 0x40
 8109556:	d02e      	beq.n	81095b6 <UART_SetConfig+0xa36>
 8109558:	e031      	b.n	81095be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810955a:	f7fb fb93 	bl	8104c84 <HAL_RCC_GetPCLK1Freq>
 810955e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109560:	e033      	b.n	81095ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109562:	f7fb fba5 	bl	8104cb0 <HAL_RCC_GetPCLK2Freq>
 8109566:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109568:	e02f      	b.n	81095ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810956a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810956e:	4618      	mov	r0, r3
 8109570:	f7fc fdd4 	bl	810611c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109578:	e027      	b.n	81095ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810957a:	f107 0318 	add.w	r3, r7, #24
 810957e:	4618      	mov	r0, r3
 8109580:	f7fc ff20 	bl	81063c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109584:	69fb      	ldr	r3, [r7, #28]
 8109586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109588:	e01f      	b.n	81095ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810958a:	4b2d      	ldr	r3, [pc, #180]	; (8109640 <UART_SetConfig+0xac0>)
 810958c:	681b      	ldr	r3, [r3, #0]
 810958e:	f003 0320 	and.w	r3, r3, #32
 8109592:	2b00      	cmp	r3, #0
 8109594:	d009      	beq.n	81095aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109596:	4b2a      	ldr	r3, [pc, #168]	; (8109640 <UART_SetConfig+0xac0>)
 8109598:	681b      	ldr	r3, [r3, #0]
 810959a:	08db      	lsrs	r3, r3, #3
 810959c:	f003 0303 	and.w	r3, r3, #3
 81095a0:	4a28      	ldr	r2, [pc, #160]	; (8109644 <UART_SetConfig+0xac4>)
 81095a2:	fa22 f303 	lsr.w	r3, r2, r3
 81095a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81095a8:	e00f      	b.n	81095ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81095aa:	4b26      	ldr	r3, [pc, #152]	; (8109644 <UART_SetConfig+0xac4>)
 81095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81095ae:	e00c      	b.n	81095ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81095b0:	4b25      	ldr	r3, [pc, #148]	; (8109648 <UART_SetConfig+0xac8>)
 81095b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81095b4:	e009      	b.n	81095ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81095b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81095bc:	e005      	b.n	81095ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81095be:	2300      	movs	r3, #0
 81095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81095c2:	2301      	movs	r3, #1
 81095c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81095c8:	bf00      	nop
    }

    if (pclk != 0U)
 81095ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81095cc:	2b00      	cmp	r3, #0
 81095ce:	d021      	beq.n	8109614 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81095d0:	697b      	ldr	r3, [r7, #20]
 81095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81095d4:	4a1d      	ldr	r2, [pc, #116]	; (810964c <UART_SetConfig+0xacc>)
 81095d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81095da:	461a      	mov	r2, r3
 81095dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81095de:	fbb3 f2f2 	udiv	r2, r3, r2
 81095e2:	697b      	ldr	r3, [r7, #20]
 81095e4:	685b      	ldr	r3, [r3, #4]
 81095e6:	085b      	lsrs	r3, r3, #1
 81095e8:	441a      	add	r2, r3
 81095ea:	697b      	ldr	r3, [r7, #20]
 81095ec:	685b      	ldr	r3, [r3, #4]
 81095ee:	fbb2 f3f3 	udiv	r3, r2, r3
 81095f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81095f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81095f6:	2b0f      	cmp	r3, #15
 81095f8:	d909      	bls.n	810960e <UART_SetConfig+0xa8e>
 81095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81095fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109600:	d205      	bcs.n	810960e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8109602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109604:	b29a      	uxth	r2, r3
 8109606:	697b      	ldr	r3, [r7, #20]
 8109608:	681b      	ldr	r3, [r3, #0]
 810960a:	60da      	str	r2, [r3, #12]
 810960c:	e002      	b.n	8109614 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810960e:	2301      	movs	r3, #1
 8109610:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8109614:	697b      	ldr	r3, [r7, #20]
 8109616:	2201      	movs	r2, #1
 8109618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810961c:	697b      	ldr	r3, [r7, #20]
 810961e:	2201      	movs	r2, #1
 8109620:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8109624:	697b      	ldr	r3, [r7, #20]
 8109626:	2200      	movs	r2, #0
 8109628:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 810962a:	697b      	ldr	r3, [r7, #20]
 810962c:	2200      	movs	r2, #0
 810962e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8109630:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8109634:	4618      	mov	r0, r3
 8109636:	3748      	adds	r7, #72	; 0x48
 8109638:	46bd      	mov	sp, r7
 810963a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810963e:	bf00      	nop
 8109640:	58024400 	.word	0x58024400
 8109644:	03d09000 	.word	0x03d09000
 8109648:	003d0900 	.word	0x003d0900
 810964c:	0810e840 	.word	0x0810e840

08109650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109650:	b480      	push	{r7}
 8109652:	b083      	sub	sp, #12
 8109654:	af00      	add	r7, sp, #0
 8109656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8109658:	687b      	ldr	r3, [r7, #4]
 810965a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810965c:	f003 0308 	and.w	r3, r3, #8
 8109660:	2b00      	cmp	r3, #0
 8109662:	d00a      	beq.n	810967a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8109664:	687b      	ldr	r3, [r7, #4]
 8109666:	681b      	ldr	r3, [r3, #0]
 8109668:	685b      	ldr	r3, [r3, #4]
 810966a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810966e:	687b      	ldr	r3, [r7, #4]
 8109670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109672:	687b      	ldr	r3, [r7, #4]
 8109674:	681b      	ldr	r3, [r3, #0]
 8109676:	430a      	orrs	r2, r1
 8109678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810967a:	687b      	ldr	r3, [r7, #4]
 810967c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810967e:	f003 0301 	and.w	r3, r3, #1
 8109682:	2b00      	cmp	r3, #0
 8109684:	d00a      	beq.n	810969c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8109686:	687b      	ldr	r3, [r7, #4]
 8109688:	681b      	ldr	r3, [r3, #0]
 810968a:	685b      	ldr	r3, [r3, #4]
 810968c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8109690:	687b      	ldr	r3, [r7, #4]
 8109692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109694:	687b      	ldr	r3, [r7, #4]
 8109696:	681b      	ldr	r3, [r3, #0]
 8109698:	430a      	orrs	r2, r1
 810969a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810969c:	687b      	ldr	r3, [r7, #4]
 810969e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81096a0:	f003 0302 	and.w	r3, r3, #2
 81096a4:	2b00      	cmp	r3, #0
 81096a6:	d00a      	beq.n	81096be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81096a8:	687b      	ldr	r3, [r7, #4]
 81096aa:	681b      	ldr	r3, [r3, #0]
 81096ac:	685b      	ldr	r3, [r3, #4]
 81096ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81096b2:	687b      	ldr	r3, [r7, #4]
 81096b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81096b6:	687b      	ldr	r3, [r7, #4]
 81096b8:	681b      	ldr	r3, [r3, #0]
 81096ba:	430a      	orrs	r2, r1
 81096bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81096be:	687b      	ldr	r3, [r7, #4]
 81096c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81096c2:	f003 0304 	and.w	r3, r3, #4
 81096c6:	2b00      	cmp	r3, #0
 81096c8:	d00a      	beq.n	81096e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81096ca:	687b      	ldr	r3, [r7, #4]
 81096cc:	681b      	ldr	r3, [r3, #0]
 81096ce:	685b      	ldr	r3, [r3, #4]
 81096d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81096d4:	687b      	ldr	r3, [r7, #4]
 81096d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81096d8:	687b      	ldr	r3, [r7, #4]
 81096da:	681b      	ldr	r3, [r3, #0]
 81096dc:	430a      	orrs	r2, r1
 81096de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81096e0:	687b      	ldr	r3, [r7, #4]
 81096e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81096e4:	f003 0310 	and.w	r3, r3, #16
 81096e8:	2b00      	cmp	r3, #0
 81096ea:	d00a      	beq.n	8109702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81096ec:	687b      	ldr	r3, [r7, #4]
 81096ee:	681b      	ldr	r3, [r3, #0]
 81096f0:	689b      	ldr	r3, [r3, #8]
 81096f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81096f6:	687b      	ldr	r3, [r7, #4]
 81096f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81096fa:	687b      	ldr	r3, [r7, #4]
 81096fc:	681b      	ldr	r3, [r3, #0]
 81096fe:	430a      	orrs	r2, r1
 8109700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8109702:	687b      	ldr	r3, [r7, #4]
 8109704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109706:	f003 0320 	and.w	r3, r3, #32
 810970a:	2b00      	cmp	r3, #0
 810970c:	d00a      	beq.n	8109724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810970e:	687b      	ldr	r3, [r7, #4]
 8109710:	681b      	ldr	r3, [r3, #0]
 8109712:	689b      	ldr	r3, [r3, #8]
 8109714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8109718:	687b      	ldr	r3, [r7, #4]
 810971a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810971c:	687b      	ldr	r3, [r7, #4]
 810971e:	681b      	ldr	r3, [r3, #0]
 8109720:	430a      	orrs	r2, r1
 8109722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8109724:	687b      	ldr	r3, [r7, #4]
 8109726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810972c:	2b00      	cmp	r3, #0
 810972e:	d01a      	beq.n	8109766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8109730:	687b      	ldr	r3, [r7, #4]
 8109732:	681b      	ldr	r3, [r3, #0]
 8109734:	685b      	ldr	r3, [r3, #4]
 8109736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810973a:	687b      	ldr	r3, [r7, #4]
 810973c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810973e:	687b      	ldr	r3, [r7, #4]
 8109740:	681b      	ldr	r3, [r3, #0]
 8109742:	430a      	orrs	r2, r1
 8109744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8109746:	687b      	ldr	r3, [r7, #4]
 8109748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810974a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810974e:	d10a      	bne.n	8109766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8109750:	687b      	ldr	r3, [r7, #4]
 8109752:	681b      	ldr	r3, [r3, #0]
 8109754:	685b      	ldr	r3, [r3, #4]
 8109756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810975a:	687b      	ldr	r3, [r7, #4]
 810975c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810975e:	687b      	ldr	r3, [r7, #4]
 8109760:	681b      	ldr	r3, [r3, #0]
 8109762:	430a      	orrs	r2, r1
 8109764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8109766:	687b      	ldr	r3, [r7, #4]
 8109768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810976a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810976e:	2b00      	cmp	r3, #0
 8109770:	d00a      	beq.n	8109788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8109772:	687b      	ldr	r3, [r7, #4]
 8109774:	681b      	ldr	r3, [r3, #0]
 8109776:	685b      	ldr	r3, [r3, #4]
 8109778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810977c:	687b      	ldr	r3, [r7, #4]
 810977e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8109780:	687b      	ldr	r3, [r7, #4]
 8109782:	681b      	ldr	r3, [r3, #0]
 8109784:	430a      	orrs	r2, r1
 8109786:	605a      	str	r2, [r3, #4]
  }
}
 8109788:	bf00      	nop
 810978a:	370c      	adds	r7, #12
 810978c:	46bd      	mov	sp, r7
 810978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109792:	4770      	bx	lr

08109794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8109794:	b580      	push	{r7, lr}
 8109796:	b098      	sub	sp, #96	; 0x60
 8109798:	af02      	add	r7, sp, #8
 810979a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810979c:	687b      	ldr	r3, [r7, #4]
 810979e:	2200      	movs	r2, #0
 81097a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81097a4:	f7f9 fee6 	bl	8103574 <HAL_GetTick>
 81097a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81097aa:	687b      	ldr	r3, [r7, #4]
 81097ac:	681b      	ldr	r3, [r3, #0]
 81097ae:	681b      	ldr	r3, [r3, #0]
 81097b0:	f003 0308 	and.w	r3, r3, #8
 81097b4:	2b08      	cmp	r3, #8
 81097b6:	d12f      	bne.n	8109818 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81097b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81097bc:	9300      	str	r3, [sp, #0]
 81097be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81097c0:	2200      	movs	r2, #0
 81097c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81097c6:	6878      	ldr	r0, [r7, #4]
 81097c8:	f000 f88e 	bl	81098e8 <UART_WaitOnFlagUntilTimeout>
 81097cc:	4603      	mov	r3, r0
 81097ce:	2b00      	cmp	r3, #0
 81097d0:	d022      	beq.n	8109818 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 81097d2:	687b      	ldr	r3, [r7, #4]
 81097d4:	681b      	ldr	r3, [r3, #0]
 81097d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81097da:	e853 3f00 	ldrex	r3, [r3]
 81097de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 81097e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81097e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81097e6:	653b      	str	r3, [r7, #80]	; 0x50
 81097e8:	687b      	ldr	r3, [r7, #4]
 81097ea:	681b      	ldr	r3, [r3, #0]
 81097ec:	461a      	mov	r2, r3
 81097ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81097f0:	647b      	str	r3, [r7, #68]	; 0x44
 81097f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81097f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 81097f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81097f8:	e841 2300 	strex	r3, r2, [r1]
 81097fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 81097fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109800:	2b00      	cmp	r3, #0
 8109802:	d1e6      	bne.n	81097d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8109804:	687b      	ldr	r3, [r7, #4]
 8109806:	2220      	movs	r2, #32
 8109808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 810980c:	687b      	ldr	r3, [r7, #4]
 810980e:	2200      	movs	r2, #0
 8109810:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8109814:	2303      	movs	r3, #3
 8109816:	e063      	b.n	81098e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8109818:	687b      	ldr	r3, [r7, #4]
 810981a:	681b      	ldr	r3, [r3, #0]
 810981c:	681b      	ldr	r3, [r3, #0]
 810981e:	f003 0304 	and.w	r3, r3, #4
 8109822:	2b04      	cmp	r3, #4
 8109824:	d149      	bne.n	81098ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8109826:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810982a:	9300      	str	r3, [sp, #0]
 810982c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810982e:	2200      	movs	r2, #0
 8109830:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8109834:	6878      	ldr	r0, [r7, #4]
 8109836:	f000 f857 	bl	81098e8 <UART_WaitOnFlagUntilTimeout>
 810983a:	4603      	mov	r3, r0
 810983c:	2b00      	cmp	r3, #0
 810983e:	d03c      	beq.n	81098ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109840:	687b      	ldr	r3, [r7, #4]
 8109842:	681b      	ldr	r3, [r3, #0]
 8109844:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109848:	e853 3f00 	ldrex	r3, [r3]
 810984c:	623b      	str	r3, [r7, #32]
   return(result);
 810984e:	6a3b      	ldr	r3, [r7, #32]
 8109850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8109854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8109856:	687b      	ldr	r3, [r7, #4]
 8109858:	681b      	ldr	r3, [r3, #0]
 810985a:	461a      	mov	r2, r3
 810985c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810985e:	633b      	str	r3, [r7, #48]	; 0x30
 8109860:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8109864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109866:	e841 2300 	strex	r3, r2, [r1]
 810986a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810986c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810986e:	2b00      	cmp	r3, #0
 8109870:	d1e6      	bne.n	8109840 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109872:	687b      	ldr	r3, [r7, #4]
 8109874:	681b      	ldr	r3, [r3, #0]
 8109876:	3308      	adds	r3, #8
 8109878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810987a:	693b      	ldr	r3, [r7, #16]
 810987c:	e853 3f00 	ldrex	r3, [r3]
 8109880:	60fb      	str	r3, [r7, #12]
   return(result);
 8109882:	68fb      	ldr	r3, [r7, #12]
 8109884:	f023 0301 	bic.w	r3, r3, #1
 8109888:	64bb      	str	r3, [r7, #72]	; 0x48
 810988a:	687b      	ldr	r3, [r7, #4]
 810988c:	681b      	ldr	r3, [r3, #0]
 810988e:	3308      	adds	r3, #8
 8109890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8109892:	61fa      	str	r2, [r7, #28]
 8109894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109896:	69b9      	ldr	r1, [r7, #24]
 8109898:	69fa      	ldr	r2, [r7, #28]
 810989a:	e841 2300 	strex	r3, r2, [r1]
 810989e:	617b      	str	r3, [r7, #20]
   return(result);
 81098a0:	697b      	ldr	r3, [r7, #20]
 81098a2:	2b00      	cmp	r3, #0
 81098a4:	d1e5      	bne.n	8109872 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81098a6:	687b      	ldr	r3, [r7, #4]
 81098a8:	2220      	movs	r2, #32
 81098aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 81098ae:	687b      	ldr	r3, [r7, #4]
 81098b0:	2200      	movs	r2, #0
 81098b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81098b6:	2303      	movs	r3, #3
 81098b8:	e012      	b.n	81098e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81098ba:	687b      	ldr	r3, [r7, #4]
 81098bc:	2220      	movs	r2, #32
 81098be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81098c2:	687b      	ldr	r3, [r7, #4]
 81098c4:	2220      	movs	r2, #32
 81098c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81098ca:	687b      	ldr	r3, [r7, #4]
 81098cc:	2200      	movs	r2, #0
 81098ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81098d0:	687b      	ldr	r3, [r7, #4]
 81098d2:	2200      	movs	r2, #0
 81098d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 81098d6:	687b      	ldr	r3, [r7, #4]
 81098d8:	2200      	movs	r2, #0
 81098da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81098de:	2300      	movs	r3, #0
}
 81098e0:	4618      	mov	r0, r3
 81098e2:	3758      	adds	r7, #88	; 0x58
 81098e4:	46bd      	mov	sp, r7
 81098e6:	bd80      	pop	{r7, pc}

081098e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81098e8:	b580      	push	{r7, lr}
 81098ea:	b084      	sub	sp, #16
 81098ec:	af00      	add	r7, sp, #0
 81098ee:	60f8      	str	r0, [r7, #12]
 81098f0:	60b9      	str	r1, [r7, #8]
 81098f2:	603b      	str	r3, [r7, #0]
 81098f4:	4613      	mov	r3, r2
 81098f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81098f8:	e04f      	b.n	810999a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81098fa:	69bb      	ldr	r3, [r7, #24]
 81098fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109900:	d04b      	beq.n	810999a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109902:	f7f9 fe37 	bl	8103574 <HAL_GetTick>
 8109906:	4602      	mov	r2, r0
 8109908:	683b      	ldr	r3, [r7, #0]
 810990a:	1ad3      	subs	r3, r2, r3
 810990c:	69ba      	ldr	r2, [r7, #24]
 810990e:	429a      	cmp	r2, r3
 8109910:	d302      	bcc.n	8109918 <UART_WaitOnFlagUntilTimeout+0x30>
 8109912:	69bb      	ldr	r3, [r7, #24]
 8109914:	2b00      	cmp	r3, #0
 8109916:	d101      	bne.n	810991c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8109918:	2303      	movs	r3, #3
 810991a:	e04e      	b.n	81099ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810991c:	68fb      	ldr	r3, [r7, #12]
 810991e:	681b      	ldr	r3, [r3, #0]
 8109920:	681b      	ldr	r3, [r3, #0]
 8109922:	f003 0304 	and.w	r3, r3, #4
 8109926:	2b00      	cmp	r3, #0
 8109928:	d037      	beq.n	810999a <UART_WaitOnFlagUntilTimeout+0xb2>
 810992a:	68bb      	ldr	r3, [r7, #8]
 810992c:	2b80      	cmp	r3, #128	; 0x80
 810992e:	d034      	beq.n	810999a <UART_WaitOnFlagUntilTimeout+0xb2>
 8109930:	68bb      	ldr	r3, [r7, #8]
 8109932:	2b40      	cmp	r3, #64	; 0x40
 8109934:	d031      	beq.n	810999a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8109936:	68fb      	ldr	r3, [r7, #12]
 8109938:	681b      	ldr	r3, [r3, #0]
 810993a:	69db      	ldr	r3, [r3, #28]
 810993c:	f003 0308 	and.w	r3, r3, #8
 8109940:	2b08      	cmp	r3, #8
 8109942:	d110      	bne.n	8109966 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8109944:	68fb      	ldr	r3, [r7, #12]
 8109946:	681b      	ldr	r3, [r3, #0]
 8109948:	2208      	movs	r2, #8
 810994a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810994c:	68f8      	ldr	r0, [r7, #12]
 810994e:	f000 f838 	bl	81099c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8109952:	68fb      	ldr	r3, [r7, #12]
 8109954:	2208      	movs	r2, #8
 8109956:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810995a:	68fb      	ldr	r3, [r7, #12]
 810995c:	2200      	movs	r2, #0
 810995e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8109962:	2301      	movs	r3, #1
 8109964:	e029      	b.n	81099ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8109966:	68fb      	ldr	r3, [r7, #12]
 8109968:	681b      	ldr	r3, [r3, #0]
 810996a:	69db      	ldr	r3, [r3, #28]
 810996c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8109970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8109974:	d111      	bne.n	810999a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8109976:	68fb      	ldr	r3, [r7, #12]
 8109978:	681b      	ldr	r3, [r3, #0]
 810997a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810997e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8109980:	68f8      	ldr	r0, [r7, #12]
 8109982:	f000 f81e 	bl	81099c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8109986:	68fb      	ldr	r3, [r7, #12]
 8109988:	2220      	movs	r2, #32
 810998a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810998e:	68fb      	ldr	r3, [r7, #12]
 8109990:	2200      	movs	r2, #0
 8109992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8109996:	2303      	movs	r3, #3
 8109998:	e00f      	b.n	81099ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810999a:	68fb      	ldr	r3, [r7, #12]
 810999c:	681b      	ldr	r3, [r3, #0]
 810999e:	69da      	ldr	r2, [r3, #28]
 81099a0:	68bb      	ldr	r3, [r7, #8]
 81099a2:	4013      	ands	r3, r2
 81099a4:	68ba      	ldr	r2, [r7, #8]
 81099a6:	429a      	cmp	r2, r3
 81099a8:	bf0c      	ite	eq
 81099aa:	2301      	moveq	r3, #1
 81099ac:	2300      	movne	r3, #0
 81099ae:	b2db      	uxtb	r3, r3
 81099b0:	461a      	mov	r2, r3
 81099b2:	79fb      	ldrb	r3, [r7, #7]
 81099b4:	429a      	cmp	r2, r3
 81099b6:	d0a0      	beq.n	81098fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81099b8:	2300      	movs	r3, #0
}
 81099ba:	4618      	mov	r0, r3
 81099bc:	3710      	adds	r7, #16
 81099be:	46bd      	mov	sp, r7
 81099c0:	bd80      	pop	{r7, pc}

081099c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81099c2:	b480      	push	{r7}
 81099c4:	b095      	sub	sp, #84	; 0x54
 81099c6:	af00      	add	r7, sp, #0
 81099c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81099ca:	687b      	ldr	r3, [r7, #4]
 81099cc:	681b      	ldr	r3, [r3, #0]
 81099ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81099d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81099d2:	e853 3f00 	ldrex	r3, [r3]
 81099d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 81099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81099da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 81099de:	64fb      	str	r3, [r7, #76]	; 0x4c
 81099e0:	687b      	ldr	r3, [r7, #4]
 81099e2:	681b      	ldr	r3, [r3, #0]
 81099e4:	461a      	mov	r2, r3
 81099e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81099e8:	643b      	str	r3, [r7, #64]	; 0x40
 81099ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81099ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81099ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81099f0:	e841 2300 	strex	r3, r2, [r1]
 81099f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81099f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81099f8:	2b00      	cmp	r3, #0
 81099fa:	d1e6      	bne.n	81099ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81099fc:	687b      	ldr	r3, [r7, #4]
 81099fe:	681b      	ldr	r3, [r3, #0]
 8109a00:	3308      	adds	r3, #8
 8109a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109a04:	6a3b      	ldr	r3, [r7, #32]
 8109a06:	e853 3f00 	ldrex	r3, [r3]
 8109a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8109a0c:	69fb      	ldr	r3, [r7, #28]
 8109a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109a12:	f023 0301 	bic.w	r3, r3, #1
 8109a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8109a18:	687b      	ldr	r3, [r7, #4]
 8109a1a:	681b      	ldr	r3, [r3, #0]
 8109a1c:	3308      	adds	r3, #8
 8109a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8109a20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8109a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8109a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8109a28:	e841 2300 	strex	r3, r2, [r1]
 8109a2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8109a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109a30:	2b00      	cmp	r3, #0
 8109a32:	d1e3      	bne.n	81099fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109a34:	687b      	ldr	r3, [r7, #4]
 8109a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109a38:	2b01      	cmp	r3, #1
 8109a3a:	d118      	bne.n	8109a6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109a3c:	687b      	ldr	r3, [r7, #4]
 8109a3e:	681b      	ldr	r3, [r3, #0]
 8109a40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109a42:	68fb      	ldr	r3, [r7, #12]
 8109a44:	e853 3f00 	ldrex	r3, [r3]
 8109a48:	60bb      	str	r3, [r7, #8]
   return(result);
 8109a4a:	68bb      	ldr	r3, [r7, #8]
 8109a4c:	f023 0310 	bic.w	r3, r3, #16
 8109a50:	647b      	str	r3, [r7, #68]	; 0x44
 8109a52:	687b      	ldr	r3, [r7, #4]
 8109a54:	681b      	ldr	r3, [r3, #0]
 8109a56:	461a      	mov	r2, r3
 8109a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8109a5a:	61bb      	str	r3, [r7, #24]
 8109a5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109a5e:	6979      	ldr	r1, [r7, #20]
 8109a60:	69ba      	ldr	r2, [r7, #24]
 8109a62:	e841 2300 	strex	r3, r2, [r1]
 8109a66:	613b      	str	r3, [r7, #16]
   return(result);
 8109a68:	693b      	ldr	r3, [r7, #16]
 8109a6a:	2b00      	cmp	r3, #0
 8109a6c:	d1e6      	bne.n	8109a3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8109a6e:	687b      	ldr	r3, [r7, #4]
 8109a70:	2220      	movs	r2, #32
 8109a72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109a76:	687b      	ldr	r3, [r7, #4]
 8109a78:	2200      	movs	r2, #0
 8109a7a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8109a7c:	687b      	ldr	r3, [r7, #4]
 8109a7e:	2200      	movs	r2, #0
 8109a80:	675a      	str	r2, [r3, #116]	; 0x74
}
 8109a82:	bf00      	nop
 8109a84:	3754      	adds	r7, #84	; 0x54
 8109a86:	46bd      	mov	sp, r7
 8109a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a8c:	4770      	bx	lr

08109a8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8109a8e:	b480      	push	{r7}
 8109a90:	b085      	sub	sp, #20
 8109a92:	af00      	add	r7, sp, #0
 8109a94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109a96:	687b      	ldr	r3, [r7, #4]
 8109a98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8109a9c:	2b01      	cmp	r3, #1
 8109a9e:	d101      	bne.n	8109aa4 <HAL_UARTEx_DisableFifoMode+0x16>
 8109aa0:	2302      	movs	r3, #2
 8109aa2:	e027      	b.n	8109af4 <HAL_UARTEx_DisableFifoMode+0x66>
 8109aa4:	687b      	ldr	r3, [r7, #4]
 8109aa6:	2201      	movs	r2, #1
 8109aa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109aac:	687b      	ldr	r3, [r7, #4]
 8109aae:	2224      	movs	r2, #36	; 0x24
 8109ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109ab4:	687b      	ldr	r3, [r7, #4]
 8109ab6:	681b      	ldr	r3, [r3, #0]
 8109ab8:	681b      	ldr	r3, [r3, #0]
 8109aba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109abc:	687b      	ldr	r3, [r7, #4]
 8109abe:	681b      	ldr	r3, [r3, #0]
 8109ac0:	681a      	ldr	r2, [r3, #0]
 8109ac2:	687b      	ldr	r3, [r7, #4]
 8109ac4:	681b      	ldr	r3, [r3, #0]
 8109ac6:	f022 0201 	bic.w	r2, r2, #1
 8109aca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8109acc:	68fb      	ldr	r3, [r7, #12]
 8109ace:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8109ad2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8109ad4:	687b      	ldr	r3, [r7, #4]
 8109ad6:	2200      	movs	r2, #0
 8109ad8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109ada:	687b      	ldr	r3, [r7, #4]
 8109adc:	681b      	ldr	r3, [r3, #0]
 8109ade:	68fa      	ldr	r2, [r7, #12]
 8109ae0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109ae2:	687b      	ldr	r3, [r7, #4]
 8109ae4:	2220      	movs	r2, #32
 8109ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109aea:	687b      	ldr	r3, [r7, #4]
 8109aec:	2200      	movs	r2, #0
 8109aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8109af2:	2300      	movs	r3, #0
}
 8109af4:	4618      	mov	r0, r3
 8109af6:	3714      	adds	r7, #20
 8109af8:	46bd      	mov	sp, r7
 8109afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109afe:	4770      	bx	lr

08109b00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109b00:	b580      	push	{r7, lr}
 8109b02:	b084      	sub	sp, #16
 8109b04:	af00      	add	r7, sp, #0
 8109b06:	6078      	str	r0, [r7, #4]
 8109b08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109b0a:	687b      	ldr	r3, [r7, #4]
 8109b0c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8109b10:	2b01      	cmp	r3, #1
 8109b12:	d101      	bne.n	8109b18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8109b14:	2302      	movs	r3, #2
 8109b16:	e02d      	b.n	8109b74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8109b18:	687b      	ldr	r3, [r7, #4]
 8109b1a:	2201      	movs	r2, #1
 8109b1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109b20:	687b      	ldr	r3, [r7, #4]
 8109b22:	2224      	movs	r2, #36	; 0x24
 8109b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109b28:	687b      	ldr	r3, [r7, #4]
 8109b2a:	681b      	ldr	r3, [r3, #0]
 8109b2c:	681b      	ldr	r3, [r3, #0]
 8109b2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109b30:	687b      	ldr	r3, [r7, #4]
 8109b32:	681b      	ldr	r3, [r3, #0]
 8109b34:	681a      	ldr	r2, [r3, #0]
 8109b36:	687b      	ldr	r3, [r7, #4]
 8109b38:	681b      	ldr	r3, [r3, #0]
 8109b3a:	f022 0201 	bic.w	r2, r2, #1
 8109b3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109b40:	687b      	ldr	r3, [r7, #4]
 8109b42:	681b      	ldr	r3, [r3, #0]
 8109b44:	689b      	ldr	r3, [r3, #8]
 8109b46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8109b4a:	687b      	ldr	r3, [r7, #4]
 8109b4c:	681b      	ldr	r3, [r3, #0]
 8109b4e:	683a      	ldr	r2, [r7, #0]
 8109b50:	430a      	orrs	r2, r1
 8109b52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109b54:	6878      	ldr	r0, [r7, #4]
 8109b56:	f000 f84f 	bl	8109bf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109b5a:	687b      	ldr	r3, [r7, #4]
 8109b5c:	681b      	ldr	r3, [r3, #0]
 8109b5e:	68fa      	ldr	r2, [r7, #12]
 8109b60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109b62:	687b      	ldr	r3, [r7, #4]
 8109b64:	2220      	movs	r2, #32
 8109b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109b6a:	687b      	ldr	r3, [r7, #4]
 8109b6c:	2200      	movs	r2, #0
 8109b6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8109b72:	2300      	movs	r3, #0
}
 8109b74:	4618      	mov	r0, r3
 8109b76:	3710      	adds	r7, #16
 8109b78:	46bd      	mov	sp, r7
 8109b7a:	bd80      	pop	{r7, pc}

08109b7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109b7c:	b580      	push	{r7, lr}
 8109b7e:	b084      	sub	sp, #16
 8109b80:	af00      	add	r7, sp, #0
 8109b82:	6078      	str	r0, [r7, #4]
 8109b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109b86:	687b      	ldr	r3, [r7, #4]
 8109b88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8109b8c:	2b01      	cmp	r3, #1
 8109b8e:	d101      	bne.n	8109b94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8109b90:	2302      	movs	r3, #2
 8109b92:	e02d      	b.n	8109bf0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8109b94:	687b      	ldr	r3, [r7, #4]
 8109b96:	2201      	movs	r2, #1
 8109b98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109b9c:	687b      	ldr	r3, [r7, #4]
 8109b9e:	2224      	movs	r2, #36	; 0x24
 8109ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109ba4:	687b      	ldr	r3, [r7, #4]
 8109ba6:	681b      	ldr	r3, [r3, #0]
 8109ba8:	681b      	ldr	r3, [r3, #0]
 8109baa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109bac:	687b      	ldr	r3, [r7, #4]
 8109bae:	681b      	ldr	r3, [r3, #0]
 8109bb0:	681a      	ldr	r2, [r3, #0]
 8109bb2:	687b      	ldr	r3, [r7, #4]
 8109bb4:	681b      	ldr	r3, [r3, #0]
 8109bb6:	f022 0201 	bic.w	r2, r2, #1
 8109bba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8109bbc:	687b      	ldr	r3, [r7, #4]
 8109bbe:	681b      	ldr	r3, [r3, #0]
 8109bc0:	689b      	ldr	r3, [r3, #8]
 8109bc2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8109bc6:	687b      	ldr	r3, [r7, #4]
 8109bc8:	681b      	ldr	r3, [r3, #0]
 8109bca:	683a      	ldr	r2, [r7, #0]
 8109bcc:	430a      	orrs	r2, r1
 8109bce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109bd0:	6878      	ldr	r0, [r7, #4]
 8109bd2:	f000 f811 	bl	8109bf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109bd6:	687b      	ldr	r3, [r7, #4]
 8109bd8:	681b      	ldr	r3, [r3, #0]
 8109bda:	68fa      	ldr	r2, [r7, #12]
 8109bdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109bde:	687b      	ldr	r3, [r7, #4]
 8109be0:	2220      	movs	r2, #32
 8109be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109be6:	687b      	ldr	r3, [r7, #4]
 8109be8:	2200      	movs	r2, #0
 8109bea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8109bee:	2300      	movs	r3, #0
}
 8109bf0:	4618      	mov	r0, r3
 8109bf2:	3710      	adds	r7, #16
 8109bf4:	46bd      	mov	sp, r7
 8109bf6:	bd80      	pop	{r7, pc}

08109bf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8109bf8:	b480      	push	{r7}
 8109bfa:	b085      	sub	sp, #20
 8109bfc:	af00      	add	r7, sp, #0
 8109bfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8109c00:	687b      	ldr	r3, [r7, #4]
 8109c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109c04:	2b00      	cmp	r3, #0
 8109c06:	d108      	bne.n	8109c1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8109c08:	687b      	ldr	r3, [r7, #4]
 8109c0a:	2201      	movs	r2, #1
 8109c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8109c10:	687b      	ldr	r3, [r7, #4]
 8109c12:	2201      	movs	r2, #1
 8109c14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8109c18:	e031      	b.n	8109c7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8109c1a:	2310      	movs	r3, #16
 8109c1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8109c1e:	2310      	movs	r3, #16
 8109c20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	681b      	ldr	r3, [r3, #0]
 8109c26:	689b      	ldr	r3, [r3, #8]
 8109c28:	0e5b      	lsrs	r3, r3, #25
 8109c2a:	b2db      	uxtb	r3, r3
 8109c2c:	f003 0307 	and.w	r3, r3, #7
 8109c30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8109c32:	687b      	ldr	r3, [r7, #4]
 8109c34:	681b      	ldr	r3, [r3, #0]
 8109c36:	689b      	ldr	r3, [r3, #8]
 8109c38:	0f5b      	lsrs	r3, r3, #29
 8109c3a:	b2db      	uxtb	r3, r3
 8109c3c:	f003 0307 	and.w	r3, r3, #7
 8109c40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109c42:	7bbb      	ldrb	r3, [r7, #14]
 8109c44:	7b3a      	ldrb	r2, [r7, #12]
 8109c46:	4911      	ldr	r1, [pc, #68]	; (8109c8c <UARTEx_SetNbDataToProcess+0x94>)
 8109c48:	5c8a      	ldrb	r2, [r1, r2]
 8109c4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8109c4e:	7b3a      	ldrb	r2, [r7, #12]
 8109c50:	490f      	ldr	r1, [pc, #60]	; (8109c90 <UARTEx_SetNbDataToProcess+0x98>)
 8109c52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109c54:	fb93 f3f2 	sdiv	r3, r3, r2
 8109c58:	b29a      	uxth	r2, r3
 8109c5a:	687b      	ldr	r3, [r7, #4]
 8109c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109c60:	7bfb      	ldrb	r3, [r7, #15]
 8109c62:	7b7a      	ldrb	r2, [r7, #13]
 8109c64:	4909      	ldr	r1, [pc, #36]	; (8109c8c <UARTEx_SetNbDataToProcess+0x94>)
 8109c66:	5c8a      	ldrb	r2, [r1, r2]
 8109c68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109c6c:	7b7a      	ldrb	r2, [r7, #13]
 8109c6e:	4908      	ldr	r1, [pc, #32]	; (8109c90 <UARTEx_SetNbDataToProcess+0x98>)
 8109c70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109c72:	fb93 f3f2 	sdiv	r3, r3, r2
 8109c76:	b29a      	uxth	r2, r3
 8109c78:	687b      	ldr	r3, [r7, #4]
 8109c7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8109c7e:	bf00      	nop
 8109c80:	3714      	adds	r7, #20
 8109c82:	46bd      	mov	sp, r7
 8109c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c88:	4770      	bx	lr
 8109c8a:	bf00      	nop
 8109c8c:	0810e858 	.word	0x0810e858
 8109c90:	0810e860 	.word	0x0810e860

08109c94 <__cvt>:
 8109c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109c98:	ec55 4b10 	vmov	r4, r5, d0
 8109c9c:	2d00      	cmp	r5, #0
 8109c9e:	460e      	mov	r6, r1
 8109ca0:	4619      	mov	r1, r3
 8109ca2:	462b      	mov	r3, r5
 8109ca4:	bfbb      	ittet	lt
 8109ca6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8109caa:	461d      	movlt	r5, r3
 8109cac:	2300      	movge	r3, #0
 8109cae:	232d      	movlt	r3, #45	; 0x2d
 8109cb0:	700b      	strb	r3, [r1, #0]
 8109cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109cb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8109cb8:	4691      	mov	r9, r2
 8109cba:	f023 0820 	bic.w	r8, r3, #32
 8109cbe:	bfbc      	itt	lt
 8109cc0:	4622      	movlt	r2, r4
 8109cc2:	4614      	movlt	r4, r2
 8109cc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8109cc8:	d005      	beq.n	8109cd6 <__cvt+0x42>
 8109cca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8109cce:	d100      	bne.n	8109cd2 <__cvt+0x3e>
 8109cd0:	3601      	adds	r6, #1
 8109cd2:	2102      	movs	r1, #2
 8109cd4:	e000      	b.n	8109cd8 <__cvt+0x44>
 8109cd6:	2103      	movs	r1, #3
 8109cd8:	ab03      	add	r3, sp, #12
 8109cda:	9301      	str	r3, [sp, #4]
 8109cdc:	ab02      	add	r3, sp, #8
 8109cde:	9300      	str	r3, [sp, #0]
 8109ce0:	ec45 4b10 	vmov	d0, r4, r5
 8109ce4:	4653      	mov	r3, sl
 8109ce6:	4632      	mov	r2, r6
 8109ce8:	f001 f892 	bl	810ae10 <_dtoa_r>
 8109cec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8109cf0:	4607      	mov	r7, r0
 8109cf2:	d102      	bne.n	8109cfa <__cvt+0x66>
 8109cf4:	f019 0f01 	tst.w	r9, #1
 8109cf8:	d022      	beq.n	8109d40 <__cvt+0xac>
 8109cfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8109cfe:	eb07 0906 	add.w	r9, r7, r6
 8109d02:	d110      	bne.n	8109d26 <__cvt+0x92>
 8109d04:	783b      	ldrb	r3, [r7, #0]
 8109d06:	2b30      	cmp	r3, #48	; 0x30
 8109d08:	d10a      	bne.n	8109d20 <__cvt+0x8c>
 8109d0a:	2200      	movs	r2, #0
 8109d0c:	2300      	movs	r3, #0
 8109d0e:	4620      	mov	r0, r4
 8109d10:	4629      	mov	r1, r5
 8109d12:	f7f6 ff61 	bl	8100bd8 <__aeabi_dcmpeq>
 8109d16:	b918      	cbnz	r0, 8109d20 <__cvt+0x8c>
 8109d18:	f1c6 0601 	rsb	r6, r6, #1
 8109d1c:	f8ca 6000 	str.w	r6, [sl]
 8109d20:	f8da 3000 	ldr.w	r3, [sl]
 8109d24:	4499      	add	r9, r3
 8109d26:	2200      	movs	r2, #0
 8109d28:	2300      	movs	r3, #0
 8109d2a:	4620      	mov	r0, r4
 8109d2c:	4629      	mov	r1, r5
 8109d2e:	f7f6 ff53 	bl	8100bd8 <__aeabi_dcmpeq>
 8109d32:	b108      	cbz	r0, 8109d38 <__cvt+0xa4>
 8109d34:	f8cd 900c 	str.w	r9, [sp, #12]
 8109d38:	2230      	movs	r2, #48	; 0x30
 8109d3a:	9b03      	ldr	r3, [sp, #12]
 8109d3c:	454b      	cmp	r3, r9
 8109d3e:	d307      	bcc.n	8109d50 <__cvt+0xbc>
 8109d40:	9b03      	ldr	r3, [sp, #12]
 8109d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8109d44:	1bdb      	subs	r3, r3, r7
 8109d46:	4638      	mov	r0, r7
 8109d48:	6013      	str	r3, [r2, #0]
 8109d4a:	b004      	add	sp, #16
 8109d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109d50:	1c59      	adds	r1, r3, #1
 8109d52:	9103      	str	r1, [sp, #12]
 8109d54:	701a      	strb	r2, [r3, #0]
 8109d56:	e7f0      	b.n	8109d3a <__cvt+0xa6>

08109d58 <__exponent>:
 8109d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8109d5a:	4603      	mov	r3, r0
 8109d5c:	2900      	cmp	r1, #0
 8109d5e:	bfb8      	it	lt
 8109d60:	4249      	neglt	r1, r1
 8109d62:	f803 2b02 	strb.w	r2, [r3], #2
 8109d66:	bfb4      	ite	lt
 8109d68:	222d      	movlt	r2, #45	; 0x2d
 8109d6a:	222b      	movge	r2, #43	; 0x2b
 8109d6c:	2909      	cmp	r1, #9
 8109d6e:	7042      	strb	r2, [r0, #1]
 8109d70:	dd2a      	ble.n	8109dc8 <__exponent+0x70>
 8109d72:	f10d 0207 	add.w	r2, sp, #7
 8109d76:	4617      	mov	r7, r2
 8109d78:	260a      	movs	r6, #10
 8109d7a:	4694      	mov	ip, r2
 8109d7c:	fb91 f5f6 	sdiv	r5, r1, r6
 8109d80:	fb06 1415 	mls	r4, r6, r5, r1
 8109d84:	3430      	adds	r4, #48	; 0x30
 8109d86:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8109d8a:	460c      	mov	r4, r1
 8109d8c:	2c63      	cmp	r4, #99	; 0x63
 8109d8e:	f102 32ff 	add.w	r2, r2, #4294967295
 8109d92:	4629      	mov	r1, r5
 8109d94:	dcf1      	bgt.n	8109d7a <__exponent+0x22>
 8109d96:	3130      	adds	r1, #48	; 0x30
 8109d98:	f1ac 0402 	sub.w	r4, ip, #2
 8109d9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8109da0:	1c41      	adds	r1, r0, #1
 8109da2:	4622      	mov	r2, r4
 8109da4:	42ba      	cmp	r2, r7
 8109da6:	d30a      	bcc.n	8109dbe <__exponent+0x66>
 8109da8:	f10d 0209 	add.w	r2, sp, #9
 8109dac:	eba2 020c 	sub.w	r2, r2, ip
 8109db0:	42bc      	cmp	r4, r7
 8109db2:	bf88      	it	hi
 8109db4:	2200      	movhi	r2, #0
 8109db6:	4413      	add	r3, r2
 8109db8:	1a18      	subs	r0, r3, r0
 8109dba:	b003      	add	sp, #12
 8109dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8109dbe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8109dc2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8109dc6:	e7ed      	b.n	8109da4 <__exponent+0x4c>
 8109dc8:	2330      	movs	r3, #48	; 0x30
 8109dca:	3130      	adds	r1, #48	; 0x30
 8109dcc:	7083      	strb	r3, [r0, #2]
 8109dce:	70c1      	strb	r1, [r0, #3]
 8109dd0:	1d03      	adds	r3, r0, #4
 8109dd2:	e7f1      	b.n	8109db8 <__exponent+0x60>

08109dd4 <_printf_float>:
 8109dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109dd8:	ed2d 8b02 	vpush	{d8}
 8109ddc:	b08d      	sub	sp, #52	; 0x34
 8109dde:	460c      	mov	r4, r1
 8109de0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8109de4:	4616      	mov	r6, r2
 8109de6:	461f      	mov	r7, r3
 8109de8:	4605      	mov	r5, r0
 8109dea:	f000 ff09 	bl	810ac00 <_localeconv_r>
 8109dee:	f8d0 a000 	ldr.w	sl, [r0]
 8109df2:	4650      	mov	r0, sl
 8109df4:	f7f6 fac4 	bl	8100380 <strlen>
 8109df8:	2300      	movs	r3, #0
 8109dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8109dfc:	6823      	ldr	r3, [r4, #0]
 8109dfe:	9305      	str	r3, [sp, #20]
 8109e00:	f8d8 3000 	ldr.w	r3, [r8]
 8109e04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8109e08:	3307      	adds	r3, #7
 8109e0a:	f023 0307 	bic.w	r3, r3, #7
 8109e0e:	f103 0208 	add.w	r2, r3, #8
 8109e12:	f8c8 2000 	str.w	r2, [r8]
 8109e16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109e1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8109e1e:	9307      	str	r3, [sp, #28]
 8109e20:	f8cd 8018 	str.w	r8, [sp, #24]
 8109e24:	ee08 0a10 	vmov	s16, r0
 8109e28:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8109e2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109e30:	4b9e      	ldr	r3, [pc, #632]	; (810a0ac <_printf_float+0x2d8>)
 8109e32:	f04f 32ff 	mov.w	r2, #4294967295
 8109e36:	f7f6 ff01 	bl	8100c3c <__aeabi_dcmpun>
 8109e3a:	bb88      	cbnz	r0, 8109ea0 <_printf_float+0xcc>
 8109e3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109e40:	4b9a      	ldr	r3, [pc, #616]	; (810a0ac <_printf_float+0x2d8>)
 8109e42:	f04f 32ff 	mov.w	r2, #4294967295
 8109e46:	f7f6 fedb 	bl	8100c00 <__aeabi_dcmple>
 8109e4a:	bb48      	cbnz	r0, 8109ea0 <_printf_float+0xcc>
 8109e4c:	2200      	movs	r2, #0
 8109e4e:	2300      	movs	r3, #0
 8109e50:	4640      	mov	r0, r8
 8109e52:	4649      	mov	r1, r9
 8109e54:	f7f6 feca 	bl	8100bec <__aeabi_dcmplt>
 8109e58:	b110      	cbz	r0, 8109e60 <_printf_float+0x8c>
 8109e5a:	232d      	movs	r3, #45	; 0x2d
 8109e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109e60:	4a93      	ldr	r2, [pc, #588]	; (810a0b0 <_printf_float+0x2dc>)
 8109e62:	4b94      	ldr	r3, [pc, #592]	; (810a0b4 <_printf_float+0x2e0>)
 8109e64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8109e68:	bf94      	ite	ls
 8109e6a:	4690      	movls	r8, r2
 8109e6c:	4698      	movhi	r8, r3
 8109e6e:	2303      	movs	r3, #3
 8109e70:	6123      	str	r3, [r4, #16]
 8109e72:	9b05      	ldr	r3, [sp, #20]
 8109e74:	f023 0304 	bic.w	r3, r3, #4
 8109e78:	6023      	str	r3, [r4, #0]
 8109e7a:	f04f 0900 	mov.w	r9, #0
 8109e7e:	9700      	str	r7, [sp, #0]
 8109e80:	4633      	mov	r3, r6
 8109e82:	aa0b      	add	r2, sp, #44	; 0x2c
 8109e84:	4621      	mov	r1, r4
 8109e86:	4628      	mov	r0, r5
 8109e88:	f000 f9da 	bl	810a240 <_printf_common>
 8109e8c:	3001      	adds	r0, #1
 8109e8e:	f040 8090 	bne.w	8109fb2 <_printf_float+0x1de>
 8109e92:	f04f 30ff 	mov.w	r0, #4294967295
 8109e96:	b00d      	add	sp, #52	; 0x34
 8109e98:	ecbd 8b02 	vpop	{d8}
 8109e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109ea0:	4642      	mov	r2, r8
 8109ea2:	464b      	mov	r3, r9
 8109ea4:	4640      	mov	r0, r8
 8109ea6:	4649      	mov	r1, r9
 8109ea8:	f7f6 fec8 	bl	8100c3c <__aeabi_dcmpun>
 8109eac:	b140      	cbz	r0, 8109ec0 <_printf_float+0xec>
 8109eae:	464b      	mov	r3, r9
 8109eb0:	2b00      	cmp	r3, #0
 8109eb2:	bfbc      	itt	lt
 8109eb4:	232d      	movlt	r3, #45	; 0x2d
 8109eb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8109eba:	4a7f      	ldr	r2, [pc, #508]	; (810a0b8 <_printf_float+0x2e4>)
 8109ebc:	4b7f      	ldr	r3, [pc, #508]	; (810a0bc <_printf_float+0x2e8>)
 8109ebe:	e7d1      	b.n	8109e64 <_printf_float+0x90>
 8109ec0:	6863      	ldr	r3, [r4, #4]
 8109ec2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8109ec6:	9206      	str	r2, [sp, #24]
 8109ec8:	1c5a      	adds	r2, r3, #1
 8109eca:	d13f      	bne.n	8109f4c <_printf_float+0x178>
 8109ecc:	2306      	movs	r3, #6
 8109ece:	6063      	str	r3, [r4, #4]
 8109ed0:	9b05      	ldr	r3, [sp, #20]
 8109ed2:	6861      	ldr	r1, [r4, #4]
 8109ed4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8109ed8:	2300      	movs	r3, #0
 8109eda:	9303      	str	r3, [sp, #12]
 8109edc:	ab0a      	add	r3, sp, #40	; 0x28
 8109ede:	e9cd b301 	strd	fp, r3, [sp, #4]
 8109ee2:	ab09      	add	r3, sp, #36	; 0x24
 8109ee4:	ec49 8b10 	vmov	d0, r8, r9
 8109ee8:	9300      	str	r3, [sp, #0]
 8109eea:	6022      	str	r2, [r4, #0]
 8109eec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8109ef0:	4628      	mov	r0, r5
 8109ef2:	f7ff fecf 	bl	8109c94 <__cvt>
 8109ef6:	9b06      	ldr	r3, [sp, #24]
 8109ef8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109efa:	2b47      	cmp	r3, #71	; 0x47
 8109efc:	4680      	mov	r8, r0
 8109efe:	d108      	bne.n	8109f12 <_printf_float+0x13e>
 8109f00:	1cc8      	adds	r0, r1, #3
 8109f02:	db02      	blt.n	8109f0a <_printf_float+0x136>
 8109f04:	6863      	ldr	r3, [r4, #4]
 8109f06:	4299      	cmp	r1, r3
 8109f08:	dd41      	ble.n	8109f8e <_printf_float+0x1ba>
 8109f0a:	f1ab 0302 	sub.w	r3, fp, #2
 8109f0e:	fa5f fb83 	uxtb.w	fp, r3
 8109f12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109f16:	d820      	bhi.n	8109f5a <_printf_float+0x186>
 8109f18:	3901      	subs	r1, #1
 8109f1a:	465a      	mov	r2, fp
 8109f1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8109f20:	9109      	str	r1, [sp, #36]	; 0x24
 8109f22:	f7ff ff19 	bl	8109d58 <__exponent>
 8109f26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109f28:	1813      	adds	r3, r2, r0
 8109f2a:	2a01      	cmp	r2, #1
 8109f2c:	4681      	mov	r9, r0
 8109f2e:	6123      	str	r3, [r4, #16]
 8109f30:	dc02      	bgt.n	8109f38 <_printf_float+0x164>
 8109f32:	6822      	ldr	r2, [r4, #0]
 8109f34:	07d2      	lsls	r2, r2, #31
 8109f36:	d501      	bpl.n	8109f3c <_printf_float+0x168>
 8109f38:	3301      	adds	r3, #1
 8109f3a:	6123      	str	r3, [r4, #16]
 8109f3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8109f40:	2b00      	cmp	r3, #0
 8109f42:	d09c      	beq.n	8109e7e <_printf_float+0xaa>
 8109f44:	232d      	movs	r3, #45	; 0x2d
 8109f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109f4a:	e798      	b.n	8109e7e <_printf_float+0xaa>
 8109f4c:	9a06      	ldr	r2, [sp, #24]
 8109f4e:	2a47      	cmp	r2, #71	; 0x47
 8109f50:	d1be      	bne.n	8109ed0 <_printf_float+0xfc>
 8109f52:	2b00      	cmp	r3, #0
 8109f54:	d1bc      	bne.n	8109ed0 <_printf_float+0xfc>
 8109f56:	2301      	movs	r3, #1
 8109f58:	e7b9      	b.n	8109ece <_printf_float+0xfa>
 8109f5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8109f5e:	d118      	bne.n	8109f92 <_printf_float+0x1be>
 8109f60:	2900      	cmp	r1, #0
 8109f62:	6863      	ldr	r3, [r4, #4]
 8109f64:	dd0b      	ble.n	8109f7e <_printf_float+0x1aa>
 8109f66:	6121      	str	r1, [r4, #16]
 8109f68:	b913      	cbnz	r3, 8109f70 <_printf_float+0x19c>
 8109f6a:	6822      	ldr	r2, [r4, #0]
 8109f6c:	07d0      	lsls	r0, r2, #31
 8109f6e:	d502      	bpl.n	8109f76 <_printf_float+0x1a2>
 8109f70:	3301      	adds	r3, #1
 8109f72:	440b      	add	r3, r1
 8109f74:	6123      	str	r3, [r4, #16]
 8109f76:	65a1      	str	r1, [r4, #88]	; 0x58
 8109f78:	f04f 0900 	mov.w	r9, #0
 8109f7c:	e7de      	b.n	8109f3c <_printf_float+0x168>
 8109f7e:	b913      	cbnz	r3, 8109f86 <_printf_float+0x1b2>
 8109f80:	6822      	ldr	r2, [r4, #0]
 8109f82:	07d2      	lsls	r2, r2, #31
 8109f84:	d501      	bpl.n	8109f8a <_printf_float+0x1b6>
 8109f86:	3302      	adds	r3, #2
 8109f88:	e7f4      	b.n	8109f74 <_printf_float+0x1a0>
 8109f8a:	2301      	movs	r3, #1
 8109f8c:	e7f2      	b.n	8109f74 <_printf_float+0x1a0>
 8109f8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8109f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109f94:	4299      	cmp	r1, r3
 8109f96:	db05      	blt.n	8109fa4 <_printf_float+0x1d0>
 8109f98:	6823      	ldr	r3, [r4, #0]
 8109f9a:	6121      	str	r1, [r4, #16]
 8109f9c:	07d8      	lsls	r0, r3, #31
 8109f9e:	d5ea      	bpl.n	8109f76 <_printf_float+0x1a2>
 8109fa0:	1c4b      	adds	r3, r1, #1
 8109fa2:	e7e7      	b.n	8109f74 <_printf_float+0x1a0>
 8109fa4:	2900      	cmp	r1, #0
 8109fa6:	bfd4      	ite	le
 8109fa8:	f1c1 0202 	rsble	r2, r1, #2
 8109fac:	2201      	movgt	r2, #1
 8109fae:	4413      	add	r3, r2
 8109fb0:	e7e0      	b.n	8109f74 <_printf_float+0x1a0>
 8109fb2:	6823      	ldr	r3, [r4, #0]
 8109fb4:	055a      	lsls	r2, r3, #21
 8109fb6:	d407      	bmi.n	8109fc8 <_printf_float+0x1f4>
 8109fb8:	6923      	ldr	r3, [r4, #16]
 8109fba:	4642      	mov	r2, r8
 8109fbc:	4631      	mov	r1, r6
 8109fbe:	4628      	mov	r0, r5
 8109fc0:	47b8      	blx	r7
 8109fc2:	3001      	adds	r0, #1
 8109fc4:	d12c      	bne.n	810a020 <_printf_float+0x24c>
 8109fc6:	e764      	b.n	8109e92 <_printf_float+0xbe>
 8109fc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109fcc:	f240 80e0 	bls.w	810a190 <_printf_float+0x3bc>
 8109fd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109fd4:	2200      	movs	r2, #0
 8109fd6:	2300      	movs	r3, #0
 8109fd8:	f7f6 fdfe 	bl	8100bd8 <__aeabi_dcmpeq>
 8109fdc:	2800      	cmp	r0, #0
 8109fde:	d034      	beq.n	810a04a <_printf_float+0x276>
 8109fe0:	4a37      	ldr	r2, [pc, #220]	; (810a0c0 <_printf_float+0x2ec>)
 8109fe2:	2301      	movs	r3, #1
 8109fe4:	4631      	mov	r1, r6
 8109fe6:	4628      	mov	r0, r5
 8109fe8:	47b8      	blx	r7
 8109fea:	3001      	adds	r0, #1
 8109fec:	f43f af51 	beq.w	8109e92 <_printf_float+0xbe>
 8109ff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109ff4:	429a      	cmp	r2, r3
 8109ff6:	db02      	blt.n	8109ffe <_printf_float+0x22a>
 8109ff8:	6823      	ldr	r3, [r4, #0]
 8109ffa:	07d8      	lsls	r0, r3, #31
 8109ffc:	d510      	bpl.n	810a020 <_printf_float+0x24c>
 8109ffe:	ee18 3a10 	vmov	r3, s16
 810a002:	4652      	mov	r2, sl
 810a004:	4631      	mov	r1, r6
 810a006:	4628      	mov	r0, r5
 810a008:	47b8      	blx	r7
 810a00a:	3001      	adds	r0, #1
 810a00c:	f43f af41 	beq.w	8109e92 <_printf_float+0xbe>
 810a010:	f04f 0800 	mov.w	r8, #0
 810a014:	f104 091a 	add.w	r9, r4, #26
 810a018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a01a:	3b01      	subs	r3, #1
 810a01c:	4543      	cmp	r3, r8
 810a01e:	dc09      	bgt.n	810a034 <_printf_float+0x260>
 810a020:	6823      	ldr	r3, [r4, #0]
 810a022:	079b      	lsls	r3, r3, #30
 810a024:	f100 8107 	bmi.w	810a236 <_printf_float+0x462>
 810a028:	68e0      	ldr	r0, [r4, #12]
 810a02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a02c:	4298      	cmp	r0, r3
 810a02e:	bfb8      	it	lt
 810a030:	4618      	movlt	r0, r3
 810a032:	e730      	b.n	8109e96 <_printf_float+0xc2>
 810a034:	2301      	movs	r3, #1
 810a036:	464a      	mov	r2, r9
 810a038:	4631      	mov	r1, r6
 810a03a:	4628      	mov	r0, r5
 810a03c:	47b8      	blx	r7
 810a03e:	3001      	adds	r0, #1
 810a040:	f43f af27 	beq.w	8109e92 <_printf_float+0xbe>
 810a044:	f108 0801 	add.w	r8, r8, #1
 810a048:	e7e6      	b.n	810a018 <_printf_float+0x244>
 810a04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a04c:	2b00      	cmp	r3, #0
 810a04e:	dc39      	bgt.n	810a0c4 <_printf_float+0x2f0>
 810a050:	4a1b      	ldr	r2, [pc, #108]	; (810a0c0 <_printf_float+0x2ec>)
 810a052:	2301      	movs	r3, #1
 810a054:	4631      	mov	r1, r6
 810a056:	4628      	mov	r0, r5
 810a058:	47b8      	blx	r7
 810a05a:	3001      	adds	r0, #1
 810a05c:	f43f af19 	beq.w	8109e92 <_printf_float+0xbe>
 810a060:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810a064:	4313      	orrs	r3, r2
 810a066:	d102      	bne.n	810a06e <_printf_float+0x29a>
 810a068:	6823      	ldr	r3, [r4, #0]
 810a06a:	07d9      	lsls	r1, r3, #31
 810a06c:	d5d8      	bpl.n	810a020 <_printf_float+0x24c>
 810a06e:	ee18 3a10 	vmov	r3, s16
 810a072:	4652      	mov	r2, sl
 810a074:	4631      	mov	r1, r6
 810a076:	4628      	mov	r0, r5
 810a078:	47b8      	blx	r7
 810a07a:	3001      	adds	r0, #1
 810a07c:	f43f af09 	beq.w	8109e92 <_printf_float+0xbe>
 810a080:	f04f 0900 	mov.w	r9, #0
 810a084:	f104 0a1a 	add.w	sl, r4, #26
 810a088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a08a:	425b      	negs	r3, r3
 810a08c:	454b      	cmp	r3, r9
 810a08e:	dc01      	bgt.n	810a094 <_printf_float+0x2c0>
 810a090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a092:	e792      	b.n	8109fba <_printf_float+0x1e6>
 810a094:	2301      	movs	r3, #1
 810a096:	4652      	mov	r2, sl
 810a098:	4631      	mov	r1, r6
 810a09a:	4628      	mov	r0, r5
 810a09c:	47b8      	blx	r7
 810a09e:	3001      	adds	r0, #1
 810a0a0:	f43f aef7 	beq.w	8109e92 <_printf_float+0xbe>
 810a0a4:	f109 0901 	add.w	r9, r9, #1
 810a0a8:	e7ee      	b.n	810a088 <_printf_float+0x2b4>
 810a0aa:	bf00      	nop
 810a0ac:	7fefffff 	.word	0x7fefffff
 810a0b0:	0810e868 	.word	0x0810e868
 810a0b4:	0810e86c 	.word	0x0810e86c
 810a0b8:	0810e870 	.word	0x0810e870
 810a0bc:	0810e874 	.word	0x0810e874
 810a0c0:	0810e878 	.word	0x0810e878
 810a0c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a0c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810a0c8:	429a      	cmp	r2, r3
 810a0ca:	bfa8      	it	ge
 810a0cc:	461a      	movge	r2, r3
 810a0ce:	2a00      	cmp	r2, #0
 810a0d0:	4691      	mov	r9, r2
 810a0d2:	dc37      	bgt.n	810a144 <_printf_float+0x370>
 810a0d4:	f04f 0b00 	mov.w	fp, #0
 810a0d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810a0dc:	f104 021a 	add.w	r2, r4, #26
 810a0e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810a0e2:	9305      	str	r3, [sp, #20]
 810a0e4:	eba3 0309 	sub.w	r3, r3, r9
 810a0e8:	455b      	cmp	r3, fp
 810a0ea:	dc33      	bgt.n	810a154 <_printf_float+0x380>
 810a0ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810a0f0:	429a      	cmp	r2, r3
 810a0f2:	db3b      	blt.n	810a16c <_printf_float+0x398>
 810a0f4:	6823      	ldr	r3, [r4, #0]
 810a0f6:	07da      	lsls	r2, r3, #31
 810a0f8:	d438      	bmi.n	810a16c <_printf_float+0x398>
 810a0fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810a0fe:	eba2 0903 	sub.w	r9, r2, r3
 810a102:	9b05      	ldr	r3, [sp, #20]
 810a104:	1ad2      	subs	r2, r2, r3
 810a106:	4591      	cmp	r9, r2
 810a108:	bfa8      	it	ge
 810a10a:	4691      	movge	r9, r2
 810a10c:	f1b9 0f00 	cmp.w	r9, #0
 810a110:	dc35      	bgt.n	810a17e <_printf_float+0x3aa>
 810a112:	f04f 0800 	mov.w	r8, #0
 810a116:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810a11a:	f104 0a1a 	add.w	sl, r4, #26
 810a11e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810a122:	1a9b      	subs	r3, r3, r2
 810a124:	eba3 0309 	sub.w	r3, r3, r9
 810a128:	4543      	cmp	r3, r8
 810a12a:	f77f af79 	ble.w	810a020 <_printf_float+0x24c>
 810a12e:	2301      	movs	r3, #1
 810a130:	4652      	mov	r2, sl
 810a132:	4631      	mov	r1, r6
 810a134:	4628      	mov	r0, r5
 810a136:	47b8      	blx	r7
 810a138:	3001      	adds	r0, #1
 810a13a:	f43f aeaa 	beq.w	8109e92 <_printf_float+0xbe>
 810a13e:	f108 0801 	add.w	r8, r8, #1
 810a142:	e7ec      	b.n	810a11e <_printf_float+0x34a>
 810a144:	4613      	mov	r3, r2
 810a146:	4631      	mov	r1, r6
 810a148:	4642      	mov	r2, r8
 810a14a:	4628      	mov	r0, r5
 810a14c:	47b8      	blx	r7
 810a14e:	3001      	adds	r0, #1
 810a150:	d1c0      	bne.n	810a0d4 <_printf_float+0x300>
 810a152:	e69e      	b.n	8109e92 <_printf_float+0xbe>
 810a154:	2301      	movs	r3, #1
 810a156:	4631      	mov	r1, r6
 810a158:	4628      	mov	r0, r5
 810a15a:	9205      	str	r2, [sp, #20]
 810a15c:	47b8      	blx	r7
 810a15e:	3001      	adds	r0, #1
 810a160:	f43f ae97 	beq.w	8109e92 <_printf_float+0xbe>
 810a164:	9a05      	ldr	r2, [sp, #20]
 810a166:	f10b 0b01 	add.w	fp, fp, #1
 810a16a:	e7b9      	b.n	810a0e0 <_printf_float+0x30c>
 810a16c:	ee18 3a10 	vmov	r3, s16
 810a170:	4652      	mov	r2, sl
 810a172:	4631      	mov	r1, r6
 810a174:	4628      	mov	r0, r5
 810a176:	47b8      	blx	r7
 810a178:	3001      	adds	r0, #1
 810a17a:	d1be      	bne.n	810a0fa <_printf_float+0x326>
 810a17c:	e689      	b.n	8109e92 <_printf_float+0xbe>
 810a17e:	9a05      	ldr	r2, [sp, #20]
 810a180:	464b      	mov	r3, r9
 810a182:	4442      	add	r2, r8
 810a184:	4631      	mov	r1, r6
 810a186:	4628      	mov	r0, r5
 810a188:	47b8      	blx	r7
 810a18a:	3001      	adds	r0, #1
 810a18c:	d1c1      	bne.n	810a112 <_printf_float+0x33e>
 810a18e:	e680      	b.n	8109e92 <_printf_float+0xbe>
 810a190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a192:	2a01      	cmp	r2, #1
 810a194:	dc01      	bgt.n	810a19a <_printf_float+0x3c6>
 810a196:	07db      	lsls	r3, r3, #31
 810a198:	d53a      	bpl.n	810a210 <_printf_float+0x43c>
 810a19a:	2301      	movs	r3, #1
 810a19c:	4642      	mov	r2, r8
 810a19e:	4631      	mov	r1, r6
 810a1a0:	4628      	mov	r0, r5
 810a1a2:	47b8      	blx	r7
 810a1a4:	3001      	adds	r0, #1
 810a1a6:	f43f ae74 	beq.w	8109e92 <_printf_float+0xbe>
 810a1aa:	ee18 3a10 	vmov	r3, s16
 810a1ae:	4652      	mov	r2, sl
 810a1b0:	4631      	mov	r1, r6
 810a1b2:	4628      	mov	r0, r5
 810a1b4:	47b8      	blx	r7
 810a1b6:	3001      	adds	r0, #1
 810a1b8:	f43f ae6b 	beq.w	8109e92 <_printf_float+0xbe>
 810a1bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810a1c0:	2200      	movs	r2, #0
 810a1c2:	2300      	movs	r3, #0
 810a1c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 810a1c8:	f7f6 fd06 	bl	8100bd8 <__aeabi_dcmpeq>
 810a1cc:	b9d8      	cbnz	r0, 810a206 <_printf_float+0x432>
 810a1ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 810a1d2:	f108 0201 	add.w	r2, r8, #1
 810a1d6:	4631      	mov	r1, r6
 810a1d8:	4628      	mov	r0, r5
 810a1da:	47b8      	blx	r7
 810a1dc:	3001      	adds	r0, #1
 810a1de:	d10e      	bne.n	810a1fe <_printf_float+0x42a>
 810a1e0:	e657      	b.n	8109e92 <_printf_float+0xbe>
 810a1e2:	2301      	movs	r3, #1
 810a1e4:	4652      	mov	r2, sl
 810a1e6:	4631      	mov	r1, r6
 810a1e8:	4628      	mov	r0, r5
 810a1ea:	47b8      	blx	r7
 810a1ec:	3001      	adds	r0, #1
 810a1ee:	f43f ae50 	beq.w	8109e92 <_printf_float+0xbe>
 810a1f2:	f108 0801 	add.w	r8, r8, #1
 810a1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a1f8:	3b01      	subs	r3, #1
 810a1fa:	4543      	cmp	r3, r8
 810a1fc:	dcf1      	bgt.n	810a1e2 <_printf_float+0x40e>
 810a1fe:	464b      	mov	r3, r9
 810a200:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810a204:	e6da      	b.n	8109fbc <_printf_float+0x1e8>
 810a206:	f04f 0800 	mov.w	r8, #0
 810a20a:	f104 0a1a 	add.w	sl, r4, #26
 810a20e:	e7f2      	b.n	810a1f6 <_printf_float+0x422>
 810a210:	2301      	movs	r3, #1
 810a212:	4642      	mov	r2, r8
 810a214:	e7df      	b.n	810a1d6 <_printf_float+0x402>
 810a216:	2301      	movs	r3, #1
 810a218:	464a      	mov	r2, r9
 810a21a:	4631      	mov	r1, r6
 810a21c:	4628      	mov	r0, r5
 810a21e:	47b8      	blx	r7
 810a220:	3001      	adds	r0, #1
 810a222:	f43f ae36 	beq.w	8109e92 <_printf_float+0xbe>
 810a226:	f108 0801 	add.w	r8, r8, #1
 810a22a:	68e3      	ldr	r3, [r4, #12]
 810a22c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810a22e:	1a5b      	subs	r3, r3, r1
 810a230:	4543      	cmp	r3, r8
 810a232:	dcf0      	bgt.n	810a216 <_printf_float+0x442>
 810a234:	e6f8      	b.n	810a028 <_printf_float+0x254>
 810a236:	f04f 0800 	mov.w	r8, #0
 810a23a:	f104 0919 	add.w	r9, r4, #25
 810a23e:	e7f4      	b.n	810a22a <_printf_float+0x456>

0810a240 <_printf_common>:
 810a240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a244:	4616      	mov	r6, r2
 810a246:	4699      	mov	r9, r3
 810a248:	688a      	ldr	r2, [r1, #8]
 810a24a:	690b      	ldr	r3, [r1, #16]
 810a24c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810a250:	4293      	cmp	r3, r2
 810a252:	bfb8      	it	lt
 810a254:	4613      	movlt	r3, r2
 810a256:	6033      	str	r3, [r6, #0]
 810a258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810a25c:	4607      	mov	r7, r0
 810a25e:	460c      	mov	r4, r1
 810a260:	b10a      	cbz	r2, 810a266 <_printf_common+0x26>
 810a262:	3301      	adds	r3, #1
 810a264:	6033      	str	r3, [r6, #0]
 810a266:	6823      	ldr	r3, [r4, #0]
 810a268:	0699      	lsls	r1, r3, #26
 810a26a:	bf42      	ittt	mi
 810a26c:	6833      	ldrmi	r3, [r6, #0]
 810a26e:	3302      	addmi	r3, #2
 810a270:	6033      	strmi	r3, [r6, #0]
 810a272:	6825      	ldr	r5, [r4, #0]
 810a274:	f015 0506 	ands.w	r5, r5, #6
 810a278:	d106      	bne.n	810a288 <_printf_common+0x48>
 810a27a:	f104 0a19 	add.w	sl, r4, #25
 810a27e:	68e3      	ldr	r3, [r4, #12]
 810a280:	6832      	ldr	r2, [r6, #0]
 810a282:	1a9b      	subs	r3, r3, r2
 810a284:	42ab      	cmp	r3, r5
 810a286:	dc26      	bgt.n	810a2d6 <_printf_common+0x96>
 810a288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810a28c:	1e13      	subs	r3, r2, #0
 810a28e:	6822      	ldr	r2, [r4, #0]
 810a290:	bf18      	it	ne
 810a292:	2301      	movne	r3, #1
 810a294:	0692      	lsls	r2, r2, #26
 810a296:	d42b      	bmi.n	810a2f0 <_printf_common+0xb0>
 810a298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810a29c:	4649      	mov	r1, r9
 810a29e:	4638      	mov	r0, r7
 810a2a0:	47c0      	blx	r8
 810a2a2:	3001      	adds	r0, #1
 810a2a4:	d01e      	beq.n	810a2e4 <_printf_common+0xa4>
 810a2a6:	6823      	ldr	r3, [r4, #0]
 810a2a8:	6922      	ldr	r2, [r4, #16]
 810a2aa:	f003 0306 	and.w	r3, r3, #6
 810a2ae:	2b04      	cmp	r3, #4
 810a2b0:	bf02      	ittt	eq
 810a2b2:	68e5      	ldreq	r5, [r4, #12]
 810a2b4:	6833      	ldreq	r3, [r6, #0]
 810a2b6:	1aed      	subeq	r5, r5, r3
 810a2b8:	68a3      	ldr	r3, [r4, #8]
 810a2ba:	bf0c      	ite	eq
 810a2bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810a2c0:	2500      	movne	r5, #0
 810a2c2:	4293      	cmp	r3, r2
 810a2c4:	bfc4      	itt	gt
 810a2c6:	1a9b      	subgt	r3, r3, r2
 810a2c8:	18ed      	addgt	r5, r5, r3
 810a2ca:	2600      	movs	r6, #0
 810a2cc:	341a      	adds	r4, #26
 810a2ce:	42b5      	cmp	r5, r6
 810a2d0:	d11a      	bne.n	810a308 <_printf_common+0xc8>
 810a2d2:	2000      	movs	r0, #0
 810a2d4:	e008      	b.n	810a2e8 <_printf_common+0xa8>
 810a2d6:	2301      	movs	r3, #1
 810a2d8:	4652      	mov	r2, sl
 810a2da:	4649      	mov	r1, r9
 810a2dc:	4638      	mov	r0, r7
 810a2de:	47c0      	blx	r8
 810a2e0:	3001      	adds	r0, #1
 810a2e2:	d103      	bne.n	810a2ec <_printf_common+0xac>
 810a2e4:	f04f 30ff 	mov.w	r0, #4294967295
 810a2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a2ec:	3501      	adds	r5, #1
 810a2ee:	e7c6      	b.n	810a27e <_printf_common+0x3e>
 810a2f0:	18e1      	adds	r1, r4, r3
 810a2f2:	1c5a      	adds	r2, r3, #1
 810a2f4:	2030      	movs	r0, #48	; 0x30
 810a2f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810a2fa:	4422      	add	r2, r4
 810a2fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810a300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810a304:	3302      	adds	r3, #2
 810a306:	e7c7      	b.n	810a298 <_printf_common+0x58>
 810a308:	2301      	movs	r3, #1
 810a30a:	4622      	mov	r2, r4
 810a30c:	4649      	mov	r1, r9
 810a30e:	4638      	mov	r0, r7
 810a310:	47c0      	blx	r8
 810a312:	3001      	adds	r0, #1
 810a314:	d0e6      	beq.n	810a2e4 <_printf_common+0xa4>
 810a316:	3601      	adds	r6, #1
 810a318:	e7d9      	b.n	810a2ce <_printf_common+0x8e>
	...

0810a31c <_printf_i>:
 810a31c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a320:	7e0f      	ldrb	r7, [r1, #24]
 810a322:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810a324:	2f78      	cmp	r7, #120	; 0x78
 810a326:	4691      	mov	r9, r2
 810a328:	4680      	mov	r8, r0
 810a32a:	460c      	mov	r4, r1
 810a32c:	469a      	mov	sl, r3
 810a32e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810a332:	d807      	bhi.n	810a344 <_printf_i+0x28>
 810a334:	2f62      	cmp	r7, #98	; 0x62
 810a336:	d80a      	bhi.n	810a34e <_printf_i+0x32>
 810a338:	2f00      	cmp	r7, #0
 810a33a:	f000 80d4 	beq.w	810a4e6 <_printf_i+0x1ca>
 810a33e:	2f58      	cmp	r7, #88	; 0x58
 810a340:	f000 80c0 	beq.w	810a4c4 <_printf_i+0x1a8>
 810a344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810a34c:	e03a      	b.n	810a3c4 <_printf_i+0xa8>
 810a34e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810a352:	2b15      	cmp	r3, #21
 810a354:	d8f6      	bhi.n	810a344 <_printf_i+0x28>
 810a356:	a101      	add	r1, pc, #4	; (adr r1, 810a35c <_printf_i+0x40>)
 810a358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810a35c:	0810a3b5 	.word	0x0810a3b5
 810a360:	0810a3c9 	.word	0x0810a3c9
 810a364:	0810a345 	.word	0x0810a345
 810a368:	0810a345 	.word	0x0810a345
 810a36c:	0810a345 	.word	0x0810a345
 810a370:	0810a345 	.word	0x0810a345
 810a374:	0810a3c9 	.word	0x0810a3c9
 810a378:	0810a345 	.word	0x0810a345
 810a37c:	0810a345 	.word	0x0810a345
 810a380:	0810a345 	.word	0x0810a345
 810a384:	0810a345 	.word	0x0810a345
 810a388:	0810a4cd 	.word	0x0810a4cd
 810a38c:	0810a3f5 	.word	0x0810a3f5
 810a390:	0810a487 	.word	0x0810a487
 810a394:	0810a345 	.word	0x0810a345
 810a398:	0810a345 	.word	0x0810a345
 810a39c:	0810a4ef 	.word	0x0810a4ef
 810a3a0:	0810a345 	.word	0x0810a345
 810a3a4:	0810a3f5 	.word	0x0810a3f5
 810a3a8:	0810a345 	.word	0x0810a345
 810a3ac:	0810a345 	.word	0x0810a345
 810a3b0:	0810a48f 	.word	0x0810a48f
 810a3b4:	682b      	ldr	r3, [r5, #0]
 810a3b6:	1d1a      	adds	r2, r3, #4
 810a3b8:	681b      	ldr	r3, [r3, #0]
 810a3ba:	602a      	str	r2, [r5, #0]
 810a3bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a3c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810a3c4:	2301      	movs	r3, #1
 810a3c6:	e09f      	b.n	810a508 <_printf_i+0x1ec>
 810a3c8:	6820      	ldr	r0, [r4, #0]
 810a3ca:	682b      	ldr	r3, [r5, #0]
 810a3cc:	0607      	lsls	r7, r0, #24
 810a3ce:	f103 0104 	add.w	r1, r3, #4
 810a3d2:	6029      	str	r1, [r5, #0]
 810a3d4:	d501      	bpl.n	810a3da <_printf_i+0xbe>
 810a3d6:	681e      	ldr	r6, [r3, #0]
 810a3d8:	e003      	b.n	810a3e2 <_printf_i+0xc6>
 810a3da:	0646      	lsls	r6, r0, #25
 810a3dc:	d5fb      	bpl.n	810a3d6 <_printf_i+0xba>
 810a3de:	f9b3 6000 	ldrsh.w	r6, [r3]
 810a3e2:	2e00      	cmp	r6, #0
 810a3e4:	da03      	bge.n	810a3ee <_printf_i+0xd2>
 810a3e6:	232d      	movs	r3, #45	; 0x2d
 810a3e8:	4276      	negs	r6, r6
 810a3ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a3ee:	485a      	ldr	r0, [pc, #360]	; (810a558 <_printf_i+0x23c>)
 810a3f0:	230a      	movs	r3, #10
 810a3f2:	e012      	b.n	810a41a <_printf_i+0xfe>
 810a3f4:	682b      	ldr	r3, [r5, #0]
 810a3f6:	6820      	ldr	r0, [r4, #0]
 810a3f8:	1d19      	adds	r1, r3, #4
 810a3fa:	6029      	str	r1, [r5, #0]
 810a3fc:	0605      	lsls	r5, r0, #24
 810a3fe:	d501      	bpl.n	810a404 <_printf_i+0xe8>
 810a400:	681e      	ldr	r6, [r3, #0]
 810a402:	e002      	b.n	810a40a <_printf_i+0xee>
 810a404:	0641      	lsls	r1, r0, #25
 810a406:	d5fb      	bpl.n	810a400 <_printf_i+0xe4>
 810a408:	881e      	ldrh	r6, [r3, #0]
 810a40a:	4853      	ldr	r0, [pc, #332]	; (810a558 <_printf_i+0x23c>)
 810a40c:	2f6f      	cmp	r7, #111	; 0x6f
 810a40e:	bf0c      	ite	eq
 810a410:	2308      	moveq	r3, #8
 810a412:	230a      	movne	r3, #10
 810a414:	2100      	movs	r1, #0
 810a416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810a41a:	6865      	ldr	r5, [r4, #4]
 810a41c:	60a5      	str	r5, [r4, #8]
 810a41e:	2d00      	cmp	r5, #0
 810a420:	bfa2      	ittt	ge
 810a422:	6821      	ldrge	r1, [r4, #0]
 810a424:	f021 0104 	bicge.w	r1, r1, #4
 810a428:	6021      	strge	r1, [r4, #0]
 810a42a:	b90e      	cbnz	r6, 810a430 <_printf_i+0x114>
 810a42c:	2d00      	cmp	r5, #0
 810a42e:	d04b      	beq.n	810a4c8 <_printf_i+0x1ac>
 810a430:	4615      	mov	r5, r2
 810a432:	fbb6 f1f3 	udiv	r1, r6, r3
 810a436:	fb03 6711 	mls	r7, r3, r1, r6
 810a43a:	5dc7      	ldrb	r7, [r0, r7]
 810a43c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810a440:	4637      	mov	r7, r6
 810a442:	42bb      	cmp	r3, r7
 810a444:	460e      	mov	r6, r1
 810a446:	d9f4      	bls.n	810a432 <_printf_i+0x116>
 810a448:	2b08      	cmp	r3, #8
 810a44a:	d10b      	bne.n	810a464 <_printf_i+0x148>
 810a44c:	6823      	ldr	r3, [r4, #0]
 810a44e:	07de      	lsls	r6, r3, #31
 810a450:	d508      	bpl.n	810a464 <_printf_i+0x148>
 810a452:	6923      	ldr	r3, [r4, #16]
 810a454:	6861      	ldr	r1, [r4, #4]
 810a456:	4299      	cmp	r1, r3
 810a458:	bfde      	ittt	le
 810a45a:	2330      	movle	r3, #48	; 0x30
 810a45c:	f805 3c01 	strble.w	r3, [r5, #-1]
 810a460:	f105 35ff 	addle.w	r5, r5, #4294967295
 810a464:	1b52      	subs	r2, r2, r5
 810a466:	6122      	str	r2, [r4, #16]
 810a468:	f8cd a000 	str.w	sl, [sp]
 810a46c:	464b      	mov	r3, r9
 810a46e:	aa03      	add	r2, sp, #12
 810a470:	4621      	mov	r1, r4
 810a472:	4640      	mov	r0, r8
 810a474:	f7ff fee4 	bl	810a240 <_printf_common>
 810a478:	3001      	adds	r0, #1
 810a47a:	d14a      	bne.n	810a512 <_printf_i+0x1f6>
 810a47c:	f04f 30ff 	mov.w	r0, #4294967295
 810a480:	b004      	add	sp, #16
 810a482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a486:	6823      	ldr	r3, [r4, #0]
 810a488:	f043 0320 	orr.w	r3, r3, #32
 810a48c:	6023      	str	r3, [r4, #0]
 810a48e:	4833      	ldr	r0, [pc, #204]	; (810a55c <_printf_i+0x240>)
 810a490:	2778      	movs	r7, #120	; 0x78
 810a492:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810a496:	6823      	ldr	r3, [r4, #0]
 810a498:	6829      	ldr	r1, [r5, #0]
 810a49a:	061f      	lsls	r7, r3, #24
 810a49c:	f851 6b04 	ldr.w	r6, [r1], #4
 810a4a0:	d402      	bmi.n	810a4a8 <_printf_i+0x18c>
 810a4a2:	065f      	lsls	r7, r3, #25
 810a4a4:	bf48      	it	mi
 810a4a6:	b2b6      	uxthmi	r6, r6
 810a4a8:	07df      	lsls	r7, r3, #31
 810a4aa:	bf48      	it	mi
 810a4ac:	f043 0320 	orrmi.w	r3, r3, #32
 810a4b0:	6029      	str	r1, [r5, #0]
 810a4b2:	bf48      	it	mi
 810a4b4:	6023      	strmi	r3, [r4, #0]
 810a4b6:	b91e      	cbnz	r6, 810a4c0 <_printf_i+0x1a4>
 810a4b8:	6823      	ldr	r3, [r4, #0]
 810a4ba:	f023 0320 	bic.w	r3, r3, #32
 810a4be:	6023      	str	r3, [r4, #0]
 810a4c0:	2310      	movs	r3, #16
 810a4c2:	e7a7      	b.n	810a414 <_printf_i+0xf8>
 810a4c4:	4824      	ldr	r0, [pc, #144]	; (810a558 <_printf_i+0x23c>)
 810a4c6:	e7e4      	b.n	810a492 <_printf_i+0x176>
 810a4c8:	4615      	mov	r5, r2
 810a4ca:	e7bd      	b.n	810a448 <_printf_i+0x12c>
 810a4cc:	682b      	ldr	r3, [r5, #0]
 810a4ce:	6826      	ldr	r6, [r4, #0]
 810a4d0:	6961      	ldr	r1, [r4, #20]
 810a4d2:	1d18      	adds	r0, r3, #4
 810a4d4:	6028      	str	r0, [r5, #0]
 810a4d6:	0635      	lsls	r5, r6, #24
 810a4d8:	681b      	ldr	r3, [r3, #0]
 810a4da:	d501      	bpl.n	810a4e0 <_printf_i+0x1c4>
 810a4dc:	6019      	str	r1, [r3, #0]
 810a4de:	e002      	b.n	810a4e6 <_printf_i+0x1ca>
 810a4e0:	0670      	lsls	r0, r6, #25
 810a4e2:	d5fb      	bpl.n	810a4dc <_printf_i+0x1c0>
 810a4e4:	8019      	strh	r1, [r3, #0]
 810a4e6:	2300      	movs	r3, #0
 810a4e8:	6123      	str	r3, [r4, #16]
 810a4ea:	4615      	mov	r5, r2
 810a4ec:	e7bc      	b.n	810a468 <_printf_i+0x14c>
 810a4ee:	682b      	ldr	r3, [r5, #0]
 810a4f0:	1d1a      	adds	r2, r3, #4
 810a4f2:	602a      	str	r2, [r5, #0]
 810a4f4:	681d      	ldr	r5, [r3, #0]
 810a4f6:	6862      	ldr	r2, [r4, #4]
 810a4f8:	2100      	movs	r1, #0
 810a4fa:	4628      	mov	r0, r5
 810a4fc:	f7f5 fef0 	bl	81002e0 <memchr>
 810a500:	b108      	cbz	r0, 810a506 <_printf_i+0x1ea>
 810a502:	1b40      	subs	r0, r0, r5
 810a504:	6060      	str	r0, [r4, #4]
 810a506:	6863      	ldr	r3, [r4, #4]
 810a508:	6123      	str	r3, [r4, #16]
 810a50a:	2300      	movs	r3, #0
 810a50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a510:	e7aa      	b.n	810a468 <_printf_i+0x14c>
 810a512:	6923      	ldr	r3, [r4, #16]
 810a514:	462a      	mov	r2, r5
 810a516:	4649      	mov	r1, r9
 810a518:	4640      	mov	r0, r8
 810a51a:	47d0      	blx	sl
 810a51c:	3001      	adds	r0, #1
 810a51e:	d0ad      	beq.n	810a47c <_printf_i+0x160>
 810a520:	6823      	ldr	r3, [r4, #0]
 810a522:	079b      	lsls	r3, r3, #30
 810a524:	d413      	bmi.n	810a54e <_printf_i+0x232>
 810a526:	68e0      	ldr	r0, [r4, #12]
 810a528:	9b03      	ldr	r3, [sp, #12]
 810a52a:	4298      	cmp	r0, r3
 810a52c:	bfb8      	it	lt
 810a52e:	4618      	movlt	r0, r3
 810a530:	e7a6      	b.n	810a480 <_printf_i+0x164>
 810a532:	2301      	movs	r3, #1
 810a534:	4632      	mov	r2, r6
 810a536:	4649      	mov	r1, r9
 810a538:	4640      	mov	r0, r8
 810a53a:	47d0      	blx	sl
 810a53c:	3001      	adds	r0, #1
 810a53e:	d09d      	beq.n	810a47c <_printf_i+0x160>
 810a540:	3501      	adds	r5, #1
 810a542:	68e3      	ldr	r3, [r4, #12]
 810a544:	9903      	ldr	r1, [sp, #12]
 810a546:	1a5b      	subs	r3, r3, r1
 810a548:	42ab      	cmp	r3, r5
 810a54a:	dcf2      	bgt.n	810a532 <_printf_i+0x216>
 810a54c:	e7eb      	b.n	810a526 <_printf_i+0x20a>
 810a54e:	2500      	movs	r5, #0
 810a550:	f104 0619 	add.w	r6, r4, #25
 810a554:	e7f5      	b.n	810a542 <_printf_i+0x226>
 810a556:	bf00      	nop
 810a558:	0810e87a 	.word	0x0810e87a
 810a55c:	0810e88b 	.word	0x0810e88b

0810a560 <_scanf_float>:
 810a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a564:	b087      	sub	sp, #28
 810a566:	4617      	mov	r7, r2
 810a568:	9303      	str	r3, [sp, #12]
 810a56a:	688b      	ldr	r3, [r1, #8]
 810a56c:	1e5a      	subs	r2, r3, #1
 810a56e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810a572:	bf83      	ittte	hi
 810a574:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810a578:	195b      	addhi	r3, r3, r5
 810a57a:	9302      	strhi	r3, [sp, #8]
 810a57c:	2300      	movls	r3, #0
 810a57e:	bf86      	itte	hi
 810a580:	f240 135d 	movwhi	r3, #349	; 0x15d
 810a584:	608b      	strhi	r3, [r1, #8]
 810a586:	9302      	strls	r3, [sp, #8]
 810a588:	680b      	ldr	r3, [r1, #0]
 810a58a:	468b      	mov	fp, r1
 810a58c:	2500      	movs	r5, #0
 810a58e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810a592:	f84b 3b1c 	str.w	r3, [fp], #28
 810a596:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810a59a:	4680      	mov	r8, r0
 810a59c:	460c      	mov	r4, r1
 810a59e:	465e      	mov	r6, fp
 810a5a0:	46aa      	mov	sl, r5
 810a5a2:	46a9      	mov	r9, r5
 810a5a4:	9501      	str	r5, [sp, #4]
 810a5a6:	68a2      	ldr	r2, [r4, #8]
 810a5a8:	b152      	cbz	r2, 810a5c0 <_scanf_float+0x60>
 810a5aa:	683b      	ldr	r3, [r7, #0]
 810a5ac:	781b      	ldrb	r3, [r3, #0]
 810a5ae:	2b4e      	cmp	r3, #78	; 0x4e
 810a5b0:	d864      	bhi.n	810a67c <_scanf_float+0x11c>
 810a5b2:	2b40      	cmp	r3, #64	; 0x40
 810a5b4:	d83c      	bhi.n	810a630 <_scanf_float+0xd0>
 810a5b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810a5ba:	b2c8      	uxtb	r0, r1
 810a5bc:	280e      	cmp	r0, #14
 810a5be:	d93a      	bls.n	810a636 <_scanf_float+0xd6>
 810a5c0:	f1b9 0f00 	cmp.w	r9, #0
 810a5c4:	d003      	beq.n	810a5ce <_scanf_float+0x6e>
 810a5c6:	6823      	ldr	r3, [r4, #0]
 810a5c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810a5cc:	6023      	str	r3, [r4, #0]
 810a5ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a5d2:	f1ba 0f01 	cmp.w	sl, #1
 810a5d6:	f200 8113 	bhi.w	810a800 <_scanf_float+0x2a0>
 810a5da:	455e      	cmp	r6, fp
 810a5dc:	f200 8105 	bhi.w	810a7ea <_scanf_float+0x28a>
 810a5e0:	2501      	movs	r5, #1
 810a5e2:	4628      	mov	r0, r5
 810a5e4:	b007      	add	sp, #28
 810a5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a5ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810a5ee:	2a0d      	cmp	r2, #13
 810a5f0:	d8e6      	bhi.n	810a5c0 <_scanf_float+0x60>
 810a5f2:	a101      	add	r1, pc, #4	; (adr r1, 810a5f8 <_scanf_float+0x98>)
 810a5f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810a5f8:	0810a737 	.word	0x0810a737
 810a5fc:	0810a5c1 	.word	0x0810a5c1
 810a600:	0810a5c1 	.word	0x0810a5c1
 810a604:	0810a5c1 	.word	0x0810a5c1
 810a608:	0810a797 	.word	0x0810a797
 810a60c:	0810a76f 	.word	0x0810a76f
 810a610:	0810a5c1 	.word	0x0810a5c1
 810a614:	0810a5c1 	.word	0x0810a5c1
 810a618:	0810a745 	.word	0x0810a745
 810a61c:	0810a5c1 	.word	0x0810a5c1
 810a620:	0810a5c1 	.word	0x0810a5c1
 810a624:	0810a5c1 	.word	0x0810a5c1
 810a628:	0810a5c1 	.word	0x0810a5c1
 810a62c:	0810a6fd 	.word	0x0810a6fd
 810a630:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810a634:	e7db      	b.n	810a5ee <_scanf_float+0x8e>
 810a636:	290e      	cmp	r1, #14
 810a638:	d8c2      	bhi.n	810a5c0 <_scanf_float+0x60>
 810a63a:	a001      	add	r0, pc, #4	; (adr r0, 810a640 <_scanf_float+0xe0>)
 810a63c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810a640:	0810a6ef 	.word	0x0810a6ef
 810a644:	0810a5c1 	.word	0x0810a5c1
 810a648:	0810a6ef 	.word	0x0810a6ef
 810a64c:	0810a783 	.word	0x0810a783
 810a650:	0810a5c1 	.word	0x0810a5c1
 810a654:	0810a69d 	.word	0x0810a69d
 810a658:	0810a6d9 	.word	0x0810a6d9
 810a65c:	0810a6d9 	.word	0x0810a6d9
 810a660:	0810a6d9 	.word	0x0810a6d9
 810a664:	0810a6d9 	.word	0x0810a6d9
 810a668:	0810a6d9 	.word	0x0810a6d9
 810a66c:	0810a6d9 	.word	0x0810a6d9
 810a670:	0810a6d9 	.word	0x0810a6d9
 810a674:	0810a6d9 	.word	0x0810a6d9
 810a678:	0810a6d9 	.word	0x0810a6d9
 810a67c:	2b6e      	cmp	r3, #110	; 0x6e
 810a67e:	d809      	bhi.n	810a694 <_scanf_float+0x134>
 810a680:	2b60      	cmp	r3, #96	; 0x60
 810a682:	d8b2      	bhi.n	810a5ea <_scanf_float+0x8a>
 810a684:	2b54      	cmp	r3, #84	; 0x54
 810a686:	d077      	beq.n	810a778 <_scanf_float+0x218>
 810a688:	2b59      	cmp	r3, #89	; 0x59
 810a68a:	d199      	bne.n	810a5c0 <_scanf_float+0x60>
 810a68c:	2d07      	cmp	r5, #7
 810a68e:	d197      	bne.n	810a5c0 <_scanf_float+0x60>
 810a690:	2508      	movs	r5, #8
 810a692:	e029      	b.n	810a6e8 <_scanf_float+0x188>
 810a694:	2b74      	cmp	r3, #116	; 0x74
 810a696:	d06f      	beq.n	810a778 <_scanf_float+0x218>
 810a698:	2b79      	cmp	r3, #121	; 0x79
 810a69a:	e7f6      	b.n	810a68a <_scanf_float+0x12a>
 810a69c:	6821      	ldr	r1, [r4, #0]
 810a69e:	05c8      	lsls	r0, r1, #23
 810a6a0:	d51a      	bpl.n	810a6d8 <_scanf_float+0x178>
 810a6a2:	9b02      	ldr	r3, [sp, #8]
 810a6a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810a6a8:	6021      	str	r1, [r4, #0]
 810a6aa:	f109 0901 	add.w	r9, r9, #1
 810a6ae:	b11b      	cbz	r3, 810a6b8 <_scanf_float+0x158>
 810a6b0:	3b01      	subs	r3, #1
 810a6b2:	3201      	adds	r2, #1
 810a6b4:	9302      	str	r3, [sp, #8]
 810a6b6:	60a2      	str	r2, [r4, #8]
 810a6b8:	68a3      	ldr	r3, [r4, #8]
 810a6ba:	3b01      	subs	r3, #1
 810a6bc:	60a3      	str	r3, [r4, #8]
 810a6be:	6923      	ldr	r3, [r4, #16]
 810a6c0:	3301      	adds	r3, #1
 810a6c2:	6123      	str	r3, [r4, #16]
 810a6c4:	687b      	ldr	r3, [r7, #4]
 810a6c6:	3b01      	subs	r3, #1
 810a6c8:	2b00      	cmp	r3, #0
 810a6ca:	607b      	str	r3, [r7, #4]
 810a6cc:	f340 8084 	ble.w	810a7d8 <_scanf_float+0x278>
 810a6d0:	683b      	ldr	r3, [r7, #0]
 810a6d2:	3301      	adds	r3, #1
 810a6d4:	603b      	str	r3, [r7, #0]
 810a6d6:	e766      	b.n	810a5a6 <_scanf_float+0x46>
 810a6d8:	eb1a 0f05 	cmn.w	sl, r5
 810a6dc:	f47f af70 	bne.w	810a5c0 <_scanf_float+0x60>
 810a6e0:	6822      	ldr	r2, [r4, #0]
 810a6e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810a6e6:	6022      	str	r2, [r4, #0]
 810a6e8:	f806 3b01 	strb.w	r3, [r6], #1
 810a6ec:	e7e4      	b.n	810a6b8 <_scanf_float+0x158>
 810a6ee:	6822      	ldr	r2, [r4, #0]
 810a6f0:	0610      	lsls	r0, r2, #24
 810a6f2:	f57f af65 	bpl.w	810a5c0 <_scanf_float+0x60>
 810a6f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810a6fa:	e7f4      	b.n	810a6e6 <_scanf_float+0x186>
 810a6fc:	f1ba 0f00 	cmp.w	sl, #0
 810a700:	d10e      	bne.n	810a720 <_scanf_float+0x1c0>
 810a702:	f1b9 0f00 	cmp.w	r9, #0
 810a706:	d10e      	bne.n	810a726 <_scanf_float+0x1c6>
 810a708:	6822      	ldr	r2, [r4, #0]
 810a70a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810a70e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810a712:	d108      	bne.n	810a726 <_scanf_float+0x1c6>
 810a714:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810a718:	6022      	str	r2, [r4, #0]
 810a71a:	f04f 0a01 	mov.w	sl, #1
 810a71e:	e7e3      	b.n	810a6e8 <_scanf_float+0x188>
 810a720:	f1ba 0f02 	cmp.w	sl, #2
 810a724:	d055      	beq.n	810a7d2 <_scanf_float+0x272>
 810a726:	2d01      	cmp	r5, #1
 810a728:	d002      	beq.n	810a730 <_scanf_float+0x1d0>
 810a72a:	2d04      	cmp	r5, #4
 810a72c:	f47f af48 	bne.w	810a5c0 <_scanf_float+0x60>
 810a730:	3501      	adds	r5, #1
 810a732:	b2ed      	uxtb	r5, r5
 810a734:	e7d8      	b.n	810a6e8 <_scanf_float+0x188>
 810a736:	f1ba 0f01 	cmp.w	sl, #1
 810a73a:	f47f af41 	bne.w	810a5c0 <_scanf_float+0x60>
 810a73e:	f04f 0a02 	mov.w	sl, #2
 810a742:	e7d1      	b.n	810a6e8 <_scanf_float+0x188>
 810a744:	b97d      	cbnz	r5, 810a766 <_scanf_float+0x206>
 810a746:	f1b9 0f00 	cmp.w	r9, #0
 810a74a:	f47f af3c 	bne.w	810a5c6 <_scanf_float+0x66>
 810a74e:	6822      	ldr	r2, [r4, #0]
 810a750:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810a754:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810a758:	f47f af39 	bne.w	810a5ce <_scanf_float+0x6e>
 810a75c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810a760:	6022      	str	r2, [r4, #0]
 810a762:	2501      	movs	r5, #1
 810a764:	e7c0      	b.n	810a6e8 <_scanf_float+0x188>
 810a766:	2d03      	cmp	r5, #3
 810a768:	d0e2      	beq.n	810a730 <_scanf_float+0x1d0>
 810a76a:	2d05      	cmp	r5, #5
 810a76c:	e7de      	b.n	810a72c <_scanf_float+0x1cc>
 810a76e:	2d02      	cmp	r5, #2
 810a770:	f47f af26 	bne.w	810a5c0 <_scanf_float+0x60>
 810a774:	2503      	movs	r5, #3
 810a776:	e7b7      	b.n	810a6e8 <_scanf_float+0x188>
 810a778:	2d06      	cmp	r5, #6
 810a77a:	f47f af21 	bne.w	810a5c0 <_scanf_float+0x60>
 810a77e:	2507      	movs	r5, #7
 810a780:	e7b2      	b.n	810a6e8 <_scanf_float+0x188>
 810a782:	6822      	ldr	r2, [r4, #0]
 810a784:	0591      	lsls	r1, r2, #22
 810a786:	f57f af1b 	bpl.w	810a5c0 <_scanf_float+0x60>
 810a78a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810a78e:	6022      	str	r2, [r4, #0]
 810a790:	f8cd 9004 	str.w	r9, [sp, #4]
 810a794:	e7a8      	b.n	810a6e8 <_scanf_float+0x188>
 810a796:	6822      	ldr	r2, [r4, #0]
 810a798:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810a79c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810a7a0:	d006      	beq.n	810a7b0 <_scanf_float+0x250>
 810a7a2:	0550      	lsls	r0, r2, #21
 810a7a4:	f57f af0c 	bpl.w	810a5c0 <_scanf_float+0x60>
 810a7a8:	f1b9 0f00 	cmp.w	r9, #0
 810a7ac:	f43f af0f 	beq.w	810a5ce <_scanf_float+0x6e>
 810a7b0:	0591      	lsls	r1, r2, #22
 810a7b2:	bf58      	it	pl
 810a7b4:	9901      	ldrpl	r1, [sp, #4]
 810a7b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810a7ba:	bf58      	it	pl
 810a7bc:	eba9 0101 	subpl.w	r1, r9, r1
 810a7c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810a7c4:	bf58      	it	pl
 810a7c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810a7ca:	6022      	str	r2, [r4, #0]
 810a7cc:	f04f 0900 	mov.w	r9, #0
 810a7d0:	e78a      	b.n	810a6e8 <_scanf_float+0x188>
 810a7d2:	f04f 0a03 	mov.w	sl, #3
 810a7d6:	e787      	b.n	810a6e8 <_scanf_float+0x188>
 810a7d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810a7dc:	4639      	mov	r1, r7
 810a7de:	4640      	mov	r0, r8
 810a7e0:	4798      	blx	r3
 810a7e2:	2800      	cmp	r0, #0
 810a7e4:	f43f aedf 	beq.w	810a5a6 <_scanf_float+0x46>
 810a7e8:	e6ea      	b.n	810a5c0 <_scanf_float+0x60>
 810a7ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a7ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a7f2:	463a      	mov	r2, r7
 810a7f4:	4640      	mov	r0, r8
 810a7f6:	4798      	blx	r3
 810a7f8:	6923      	ldr	r3, [r4, #16]
 810a7fa:	3b01      	subs	r3, #1
 810a7fc:	6123      	str	r3, [r4, #16]
 810a7fe:	e6ec      	b.n	810a5da <_scanf_float+0x7a>
 810a800:	1e6b      	subs	r3, r5, #1
 810a802:	2b06      	cmp	r3, #6
 810a804:	d825      	bhi.n	810a852 <_scanf_float+0x2f2>
 810a806:	2d02      	cmp	r5, #2
 810a808:	d836      	bhi.n	810a878 <_scanf_float+0x318>
 810a80a:	455e      	cmp	r6, fp
 810a80c:	f67f aee8 	bls.w	810a5e0 <_scanf_float+0x80>
 810a810:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a814:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a818:	463a      	mov	r2, r7
 810a81a:	4640      	mov	r0, r8
 810a81c:	4798      	blx	r3
 810a81e:	6923      	ldr	r3, [r4, #16]
 810a820:	3b01      	subs	r3, #1
 810a822:	6123      	str	r3, [r4, #16]
 810a824:	e7f1      	b.n	810a80a <_scanf_float+0x2aa>
 810a826:	9802      	ldr	r0, [sp, #8]
 810a828:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a82c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810a830:	9002      	str	r0, [sp, #8]
 810a832:	463a      	mov	r2, r7
 810a834:	4640      	mov	r0, r8
 810a836:	4798      	blx	r3
 810a838:	6923      	ldr	r3, [r4, #16]
 810a83a:	3b01      	subs	r3, #1
 810a83c:	6123      	str	r3, [r4, #16]
 810a83e:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a842:	fa5f fa8a 	uxtb.w	sl, sl
 810a846:	f1ba 0f02 	cmp.w	sl, #2
 810a84a:	d1ec      	bne.n	810a826 <_scanf_float+0x2c6>
 810a84c:	3d03      	subs	r5, #3
 810a84e:	b2ed      	uxtb	r5, r5
 810a850:	1b76      	subs	r6, r6, r5
 810a852:	6823      	ldr	r3, [r4, #0]
 810a854:	05da      	lsls	r2, r3, #23
 810a856:	d52f      	bpl.n	810a8b8 <_scanf_float+0x358>
 810a858:	055b      	lsls	r3, r3, #21
 810a85a:	d510      	bpl.n	810a87e <_scanf_float+0x31e>
 810a85c:	455e      	cmp	r6, fp
 810a85e:	f67f aebf 	bls.w	810a5e0 <_scanf_float+0x80>
 810a862:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a866:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a86a:	463a      	mov	r2, r7
 810a86c:	4640      	mov	r0, r8
 810a86e:	4798      	blx	r3
 810a870:	6923      	ldr	r3, [r4, #16]
 810a872:	3b01      	subs	r3, #1
 810a874:	6123      	str	r3, [r4, #16]
 810a876:	e7f1      	b.n	810a85c <_scanf_float+0x2fc>
 810a878:	46aa      	mov	sl, r5
 810a87a:	9602      	str	r6, [sp, #8]
 810a87c:	e7df      	b.n	810a83e <_scanf_float+0x2de>
 810a87e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810a882:	6923      	ldr	r3, [r4, #16]
 810a884:	2965      	cmp	r1, #101	; 0x65
 810a886:	f103 33ff 	add.w	r3, r3, #4294967295
 810a88a:	f106 35ff 	add.w	r5, r6, #4294967295
 810a88e:	6123      	str	r3, [r4, #16]
 810a890:	d00c      	beq.n	810a8ac <_scanf_float+0x34c>
 810a892:	2945      	cmp	r1, #69	; 0x45
 810a894:	d00a      	beq.n	810a8ac <_scanf_float+0x34c>
 810a896:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a89a:	463a      	mov	r2, r7
 810a89c:	4640      	mov	r0, r8
 810a89e:	4798      	blx	r3
 810a8a0:	6923      	ldr	r3, [r4, #16]
 810a8a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810a8a6:	3b01      	subs	r3, #1
 810a8a8:	1eb5      	subs	r5, r6, #2
 810a8aa:	6123      	str	r3, [r4, #16]
 810a8ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a8b0:	463a      	mov	r2, r7
 810a8b2:	4640      	mov	r0, r8
 810a8b4:	4798      	blx	r3
 810a8b6:	462e      	mov	r6, r5
 810a8b8:	6825      	ldr	r5, [r4, #0]
 810a8ba:	f015 0510 	ands.w	r5, r5, #16
 810a8be:	d158      	bne.n	810a972 <_scanf_float+0x412>
 810a8c0:	7035      	strb	r5, [r6, #0]
 810a8c2:	6823      	ldr	r3, [r4, #0]
 810a8c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810a8c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810a8cc:	d11c      	bne.n	810a908 <_scanf_float+0x3a8>
 810a8ce:	9b01      	ldr	r3, [sp, #4]
 810a8d0:	454b      	cmp	r3, r9
 810a8d2:	eba3 0209 	sub.w	r2, r3, r9
 810a8d6:	d124      	bne.n	810a922 <_scanf_float+0x3c2>
 810a8d8:	2200      	movs	r2, #0
 810a8da:	4659      	mov	r1, fp
 810a8dc:	4640      	mov	r0, r8
 810a8de:	f002 fc43 	bl	810d168 <_strtod_r>
 810a8e2:	9b03      	ldr	r3, [sp, #12]
 810a8e4:	6821      	ldr	r1, [r4, #0]
 810a8e6:	681b      	ldr	r3, [r3, #0]
 810a8e8:	f011 0f02 	tst.w	r1, #2
 810a8ec:	ec57 6b10 	vmov	r6, r7, d0
 810a8f0:	f103 0204 	add.w	r2, r3, #4
 810a8f4:	d020      	beq.n	810a938 <_scanf_float+0x3d8>
 810a8f6:	9903      	ldr	r1, [sp, #12]
 810a8f8:	600a      	str	r2, [r1, #0]
 810a8fa:	681b      	ldr	r3, [r3, #0]
 810a8fc:	e9c3 6700 	strd	r6, r7, [r3]
 810a900:	68e3      	ldr	r3, [r4, #12]
 810a902:	3301      	adds	r3, #1
 810a904:	60e3      	str	r3, [r4, #12]
 810a906:	e66c      	b.n	810a5e2 <_scanf_float+0x82>
 810a908:	9b04      	ldr	r3, [sp, #16]
 810a90a:	2b00      	cmp	r3, #0
 810a90c:	d0e4      	beq.n	810a8d8 <_scanf_float+0x378>
 810a90e:	9905      	ldr	r1, [sp, #20]
 810a910:	230a      	movs	r3, #10
 810a912:	462a      	mov	r2, r5
 810a914:	3101      	adds	r1, #1
 810a916:	4640      	mov	r0, r8
 810a918:	f002 fcae 	bl	810d278 <_strtol_r>
 810a91c:	9b04      	ldr	r3, [sp, #16]
 810a91e:	9e05      	ldr	r6, [sp, #20]
 810a920:	1ac2      	subs	r2, r0, r3
 810a922:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810a926:	429e      	cmp	r6, r3
 810a928:	bf28      	it	cs
 810a92a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810a92e:	4912      	ldr	r1, [pc, #72]	; (810a978 <_scanf_float+0x418>)
 810a930:	4630      	mov	r0, r6
 810a932:	f000 f8f9 	bl	810ab28 <siprintf>
 810a936:	e7cf      	b.n	810a8d8 <_scanf_float+0x378>
 810a938:	f011 0f04 	tst.w	r1, #4
 810a93c:	9903      	ldr	r1, [sp, #12]
 810a93e:	600a      	str	r2, [r1, #0]
 810a940:	d1db      	bne.n	810a8fa <_scanf_float+0x39a>
 810a942:	f8d3 8000 	ldr.w	r8, [r3]
 810a946:	ee10 2a10 	vmov	r2, s0
 810a94a:	ee10 0a10 	vmov	r0, s0
 810a94e:	463b      	mov	r3, r7
 810a950:	4639      	mov	r1, r7
 810a952:	f7f6 f973 	bl	8100c3c <__aeabi_dcmpun>
 810a956:	b128      	cbz	r0, 810a964 <_scanf_float+0x404>
 810a958:	4808      	ldr	r0, [pc, #32]	; (810a97c <_scanf_float+0x41c>)
 810a95a:	f000 f9c9 	bl	810acf0 <nanf>
 810a95e:	ed88 0a00 	vstr	s0, [r8]
 810a962:	e7cd      	b.n	810a900 <_scanf_float+0x3a0>
 810a964:	4630      	mov	r0, r6
 810a966:	4639      	mov	r1, r7
 810a968:	f7f6 f9c6 	bl	8100cf8 <__aeabi_d2f>
 810a96c:	f8c8 0000 	str.w	r0, [r8]
 810a970:	e7c6      	b.n	810a900 <_scanf_float+0x3a0>
 810a972:	2500      	movs	r5, #0
 810a974:	e635      	b.n	810a5e2 <_scanf_float+0x82>
 810a976:	bf00      	nop
 810a978:	0810e89c 	.word	0x0810e89c
 810a97c:	0810ec2d 	.word	0x0810ec2d

0810a980 <std>:
 810a980:	2300      	movs	r3, #0
 810a982:	b510      	push	{r4, lr}
 810a984:	4604      	mov	r4, r0
 810a986:	e9c0 3300 	strd	r3, r3, [r0]
 810a98a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a98e:	6083      	str	r3, [r0, #8]
 810a990:	8181      	strh	r1, [r0, #12]
 810a992:	6643      	str	r3, [r0, #100]	; 0x64
 810a994:	81c2      	strh	r2, [r0, #14]
 810a996:	6183      	str	r3, [r0, #24]
 810a998:	4619      	mov	r1, r3
 810a99a:	2208      	movs	r2, #8
 810a99c:	305c      	adds	r0, #92	; 0x5c
 810a99e:	f000 f926 	bl	810abee <memset>
 810a9a2:	4b0d      	ldr	r3, [pc, #52]	; (810a9d8 <std+0x58>)
 810a9a4:	6263      	str	r3, [r4, #36]	; 0x24
 810a9a6:	4b0d      	ldr	r3, [pc, #52]	; (810a9dc <std+0x5c>)
 810a9a8:	62a3      	str	r3, [r4, #40]	; 0x28
 810a9aa:	4b0d      	ldr	r3, [pc, #52]	; (810a9e0 <std+0x60>)
 810a9ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 810a9ae:	4b0d      	ldr	r3, [pc, #52]	; (810a9e4 <std+0x64>)
 810a9b0:	6323      	str	r3, [r4, #48]	; 0x30
 810a9b2:	4b0d      	ldr	r3, [pc, #52]	; (810a9e8 <std+0x68>)
 810a9b4:	6224      	str	r4, [r4, #32]
 810a9b6:	429c      	cmp	r4, r3
 810a9b8:	d006      	beq.n	810a9c8 <std+0x48>
 810a9ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 810a9be:	4294      	cmp	r4, r2
 810a9c0:	d002      	beq.n	810a9c8 <std+0x48>
 810a9c2:	33d0      	adds	r3, #208	; 0xd0
 810a9c4:	429c      	cmp	r4, r3
 810a9c6:	d105      	bne.n	810a9d4 <std+0x54>
 810a9c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810a9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a9d0:	f000 b98a 	b.w	810ace8 <__retarget_lock_init_recursive>
 810a9d4:	bd10      	pop	{r4, pc}
 810a9d6:	bf00      	nop
 810a9d8:	0810ab69 	.word	0x0810ab69
 810a9dc:	0810ab8b 	.word	0x0810ab8b
 810a9e0:	0810abc3 	.word	0x0810abc3
 810a9e4:	0810abe7 	.word	0x0810abe7
 810a9e8:	10000568 	.word	0x10000568

0810a9ec <stdio_exit_handler>:
 810a9ec:	4a02      	ldr	r2, [pc, #8]	; (810a9f8 <stdio_exit_handler+0xc>)
 810a9ee:	4903      	ldr	r1, [pc, #12]	; (810a9fc <stdio_exit_handler+0x10>)
 810a9f0:	4803      	ldr	r0, [pc, #12]	; (810aa00 <stdio_exit_handler+0x14>)
 810a9f2:	f000 b869 	b.w	810aac8 <_fwalk_sglue>
 810a9f6:	bf00      	nop
 810a9f8:	10000070 	.word	0x10000070
 810a9fc:	0810d8c1 	.word	0x0810d8c1
 810aa00:	1000007c 	.word	0x1000007c

0810aa04 <cleanup_stdio>:
 810aa04:	6841      	ldr	r1, [r0, #4]
 810aa06:	4b0c      	ldr	r3, [pc, #48]	; (810aa38 <cleanup_stdio+0x34>)
 810aa08:	4299      	cmp	r1, r3
 810aa0a:	b510      	push	{r4, lr}
 810aa0c:	4604      	mov	r4, r0
 810aa0e:	d001      	beq.n	810aa14 <cleanup_stdio+0x10>
 810aa10:	f002 ff56 	bl	810d8c0 <_fflush_r>
 810aa14:	68a1      	ldr	r1, [r4, #8]
 810aa16:	4b09      	ldr	r3, [pc, #36]	; (810aa3c <cleanup_stdio+0x38>)
 810aa18:	4299      	cmp	r1, r3
 810aa1a:	d002      	beq.n	810aa22 <cleanup_stdio+0x1e>
 810aa1c:	4620      	mov	r0, r4
 810aa1e:	f002 ff4f 	bl	810d8c0 <_fflush_r>
 810aa22:	68e1      	ldr	r1, [r4, #12]
 810aa24:	4b06      	ldr	r3, [pc, #24]	; (810aa40 <cleanup_stdio+0x3c>)
 810aa26:	4299      	cmp	r1, r3
 810aa28:	d004      	beq.n	810aa34 <cleanup_stdio+0x30>
 810aa2a:	4620      	mov	r0, r4
 810aa2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810aa30:	f002 bf46 	b.w	810d8c0 <_fflush_r>
 810aa34:	bd10      	pop	{r4, pc}
 810aa36:	bf00      	nop
 810aa38:	10000568 	.word	0x10000568
 810aa3c:	100005d0 	.word	0x100005d0
 810aa40:	10000638 	.word	0x10000638

0810aa44 <global_stdio_init.part.0>:
 810aa44:	b510      	push	{r4, lr}
 810aa46:	4b0b      	ldr	r3, [pc, #44]	; (810aa74 <global_stdio_init.part.0+0x30>)
 810aa48:	4c0b      	ldr	r4, [pc, #44]	; (810aa78 <global_stdio_init.part.0+0x34>)
 810aa4a:	4a0c      	ldr	r2, [pc, #48]	; (810aa7c <global_stdio_init.part.0+0x38>)
 810aa4c:	601a      	str	r2, [r3, #0]
 810aa4e:	4620      	mov	r0, r4
 810aa50:	2200      	movs	r2, #0
 810aa52:	2104      	movs	r1, #4
 810aa54:	f7ff ff94 	bl	810a980 <std>
 810aa58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 810aa5c:	2201      	movs	r2, #1
 810aa5e:	2109      	movs	r1, #9
 810aa60:	f7ff ff8e 	bl	810a980 <std>
 810aa64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 810aa68:	2202      	movs	r2, #2
 810aa6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810aa6e:	2112      	movs	r1, #18
 810aa70:	f7ff bf86 	b.w	810a980 <std>
 810aa74:	100006a0 	.word	0x100006a0
 810aa78:	10000568 	.word	0x10000568
 810aa7c:	0810a9ed 	.word	0x0810a9ed

0810aa80 <__sfp_lock_acquire>:
 810aa80:	4801      	ldr	r0, [pc, #4]	; (810aa88 <__sfp_lock_acquire+0x8>)
 810aa82:	f000 b932 	b.w	810acea <__retarget_lock_acquire_recursive>
 810aa86:	bf00      	nop
 810aa88:	100006a9 	.word	0x100006a9

0810aa8c <__sfp_lock_release>:
 810aa8c:	4801      	ldr	r0, [pc, #4]	; (810aa94 <__sfp_lock_release+0x8>)
 810aa8e:	f000 b92d 	b.w	810acec <__retarget_lock_release_recursive>
 810aa92:	bf00      	nop
 810aa94:	100006a9 	.word	0x100006a9

0810aa98 <__sinit>:
 810aa98:	b510      	push	{r4, lr}
 810aa9a:	4604      	mov	r4, r0
 810aa9c:	f7ff fff0 	bl	810aa80 <__sfp_lock_acquire>
 810aaa0:	6a23      	ldr	r3, [r4, #32]
 810aaa2:	b11b      	cbz	r3, 810aaac <__sinit+0x14>
 810aaa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810aaa8:	f7ff bff0 	b.w	810aa8c <__sfp_lock_release>
 810aaac:	4b04      	ldr	r3, [pc, #16]	; (810aac0 <__sinit+0x28>)
 810aaae:	6223      	str	r3, [r4, #32]
 810aab0:	4b04      	ldr	r3, [pc, #16]	; (810aac4 <__sinit+0x2c>)
 810aab2:	681b      	ldr	r3, [r3, #0]
 810aab4:	2b00      	cmp	r3, #0
 810aab6:	d1f5      	bne.n	810aaa4 <__sinit+0xc>
 810aab8:	f7ff ffc4 	bl	810aa44 <global_stdio_init.part.0>
 810aabc:	e7f2      	b.n	810aaa4 <__sinit+0xc>
 810aabe:	bf00      	nop
 810aac0:	0810aa05 	.word	0x0810aa05
 810aac4:	100006a0 	.word	0x100006a0

0810aac8 <_fwalk_sglue>:
 810aac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810aacc:	4607      	mov	r7, r0
 810aace:	4688      	mov	r8, r1
 810aad0:	4614      	mov	r4, r2
 810aad2:	2600      	movs	r6, #0
 810aad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810aad8:	f1b9 0901 	subs.w	r9, r9, #1
 810aadc:	d505      	bpl.n	810aaea <_fwalk_sglue+0x22>
 810aade:	6824      	ldr	r4, [r4, #0]
 810aae0:	2c00      	cmp	r4, #0
 810aae2:	d1f7      	bne.n	810aad4 <_fwalk_sglue+0xc>
 810aae4:	4630      	mov	r0, r6
 810aae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810aaea:	89ab      	ldrh	r3, [r5, #12]
 810aaec:	2b01      	cmp	r3, #1
 810aaee:	d907      	bls.n	810ab00 <_fwalk_sglue+0x38>
 810aaf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810aaf4:	3301      	adds	r3, #1
 810aaf6:	d003      	beq.n	810ab00 <_fwalk_sglue+0x38>
 810aaf8:	4629      	mov	r1, r5
 810aafa:	4638      	mov	r0, r7
 810aafc:	47c0      	blx	r8
 810aafe:	4306      	orrs	r6, r0
 810ab00:	3568      	adds	r5, #104	; 0x68
 810ab02:	e7e9      	b.n	810aad8 <_fwalk_sglue+0x10>

0810ab04 <iprintf>:
 810ab04:	b40f      	push	{r0, r1, r2, r3}
 810ab06:	b507      	push	{r0, r1, r2, lr}
 810ab08:	4906      	ldr	r1, [pc, #24]	; (810ab24 <iprintf+0x20>)
 810ab0a:	ab04      	add	r3, sp, #16
 810ab0c:	6808      	ldr	r0, [r1, #0]
 810ab0e:	f853 2b04 	ldr.w	r2, [r3], #4
 810ab12:	6881      	ldr	r1, [r0, #8]
 810ab14:	9301      	str	r3, [sp, #4]
 810ab16:	f002 fd33 	bl	810d580 <_vfiprintf_r>
 810ab1a:	b003      	add	sp, #12
 810ab1c:	f85d eb04 	ldr.w	lr, [sp], #4
 810ab20:	b004      	add	sp, #16
 810ab22:	4770      	bx	lr
 810ab24:	100000c8 	.word	0x100000c8

0810ab28 <siprintf>:
 810ab28:	b40e      	push	{r1, r2, r3}
 810ab2a:	b500      	push	{lr}
 810ab2c:	b09c      	sub	sp, #112	; 0x70
 810ab2e:	ab1d      	add	r3, sp, #116	; 0x74
 810ab30:	9002      	str	r0, [sp, #8]
 810ab32:	9006      	str	r0, [sp, #24]
 810ab34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810ab38:	4809      	ldr	r0, [pc, #36]	; (810ab60 <siprintf+0x38>)
 810ab3a:	9107      	str	r1, [sp, #28]
 810ab3c:	9104      	str	r1, [sp, #16]
 810ab3e:	4909      	ldr	r1, [pc, #36]	; (810ab64 <siprintf+0x3c>)
 810ab40:	f853 2b04 	ldr.w	r2, [r3], #4
 810ab44:	9105      	str	r1, [sp, #20]
 810ab46:	6800      	ldr	r0, [r0, #0]
 810ab48:	9301      	str	r3, [sp, #4]
 810ab4a:	a902      	add	r1, sp, #8
 810ab4c:	f002 fbf0 	bl	810d330 <_svfiprintf_r>
 810ab50:	9b02      	ldr	r3, [sp, #8]
 810ab52:	2200      	movs	r2, #0
 810ab54:	701a      	strb	r2, [r3, #0]
 810ab56:	b01c      	add	sp, #112	; 0x70
 810ab58:	f85d eb04 	ldr.w	lr, [sp], #4
 810ab5c:	b003      	add	sp, #12
 810ab5e:	4770      	bx	lr
 810ab60:	100000c8 	.word	0x100000c8
 810ab64:	ffff0208 	.word	0xffff0208

0810ab68 <__sread>:
 810ab68:	b510      	push	{r4, lr}
 810ab6a:	460c      	mov	r4, r1
 810ab6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ab70:	f000 f86c 	bl	810ac4c <_read_r>
 810ab74:	2800      	cmp	r0, #0
 810ab76:	bfab      	itete	ge
 810ab78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810ab7a:	89a3      	ldrhlt	r3, [r4, #12]
 810ab7c:	181b      	addge	r3, r3, r0
 810ab7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810ab82:	bfac      	ite	ge
 810ab84:	6563      	strge	r3, [r4, #84]	; 0x54
 810ab86:	81a3      	strhlt	r3, [r4, #12]
 810ab88:	bd10      	pop	{r4, pc}

0810ab8a <__swrite>:
 810ab8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ab8e:	461f      	mov	r7, r3
 810ab90:	898b      	ldrh	r3, [r1, #12]
 810ab92:	05db      	lsls	r3, r3, #23
 810ab94:	4605      	mov	r5, r0
 810ab96:	460c      	mov	r4, r1
 810ab98:	4616      	mov	r6, r2
 810ab9a:	d505      	bpl.n	810aba8 <__swrite+0x1e>
 810ab9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810aba0:	2302      	movs	r3, #2
 810aba2:	2200      	movs	r2, #0
 810aba4:	f000 f840 	bl	810ac28 <_lseek_r>
 810aba8:	89a3      	ldrh	r3, [r4, #12]
 810abaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810abae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810abb2:	81a3      	strh	r3, [r4, #12]
 810abb4:	4632      	mov	r2, r6
 810abb6:	463b      	mov	r3, r7
 810abb8:	4628      	mov	r0, r5
 810abba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810abbe:	f000 b857 	b.w	810ac70 <_write_r>

0810abc2 <__sseek>:
 810abc2:	b510      	push	{r4, lr}
 810abc4:	460c      	mov	r4, r1
 810abc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810abca:	f000 f82d 	bl	810ac28 <_lseek_r>
 810abce:	1c43      	adds	r3, r0, #1
 810abd0:	89a3      	ldrh	r3, [r4, #12]
 810abd2:	bf15      	itete	ne
 810abd4:	6560      	strne	r0, [r4, #84]	; 0x54
 810abd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810abda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810abde:	81a3      	strheq	r3, [r4, #12]
 810abe0:	bf18      	it	ne
 810abe2:	81a3      	strhne	r3, [r4, #12]
 810abe4:	bd10      	pop	{r4, pc}

0810abe6 <__sclose>:
 810abe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810abea:	f000 b80d 	b.w	810ac08 <_close_r>

0810abee <memset>:
 810abee:	4402      	add	r2, r0
 810abf0:	4603      	mov	r3, r0
 810abf2:	4293      	cmp	r3, r2
 810abf4:	d100      	bne.n	810abf8 <memset+0xa>
 810abf6:	4770      	bx	lr
 810abf8:	f803 1b01 	strb.w	r1, [r3], #1
 810abfc:	e7f9      	b.n	810abf2 <memset+0x4>
	...

0810ac00 <_localeconv_r>:
 810ac00:	4800      	ldr	r0, [pc, #0]	; (810ac04 <_localeconv_r+0x4>)
 810ac02:	4770      	bx	lr
 810ac04:	100001bc 	.word	0x100001bc

0810ac08 <_close_r>:
 810ac08:	b538      	push	{r3, r4, r5, lr}
 810ac0a:	4d06      	ldr	r5, [pc, #24]	; (810ac24 <_close_r+0x1c>)
 810ac0c:	2300      	movs	r3, #0
 810ac0e:	4604      	mov	r4, r0
 810ac10:	4608      	mov	r0, r1
 810ac12:	602b      	str	r3, [r5, #0]
 810ac14:	f7f8 fb71 	bl	81032fa <_close>
 810ac18:	1c43      	adds	r3, r0, #1
 810ac1a:	d102      	bne.n	810ac22 <_close_r+0x1a>
 810ac1c:	682b      	ldr	r3, [r5, #0]
 810ac1e:	b103      	cbz	r3, 810ac22 <_close_r+0x1a>
 810ac20:	6023      	str	r3, [r4, #0]
 810ac22:	bd38      	pop	{r3, r4, r5, pc}
 810ac24:	100006a4 	.word	0x100006a4

0810ac28 <_lseek_r>:
 810ac28:	b538      	push	{r3, r4, r5, lr}
 810ac2a:	4d07      	ldr	r5, [pc, #28]	; (810ac48 <_lseek_r+0x20>)
 810ac2c:	4604      	mov	r4, r0
 810ac2e:	4608      	mov	r0, r1
 810ac30:	4611      	mov	r1, r2
 810ac32:	2200      	movs	r2, #0
 810ac34:	602a      	str	r2, [r5, #0]
 810ac36:	461a      	mov	r2, r3
 810ac38:	f7f8 fb86 	bl	8103348 <_lseek>
 810ac3c:	1c43      	adds	r3, r0, #1
 810ac3e:	d102      	bne.n	810ac46 <_lseek_r+0x1e>
 810ac40:	682b      	ldr	r3, [r5, #0]
 810ac42:	b103      	cbz	r3, 810ac46 <_lseek_r+0x1e>
 810ac44:	6023      	str	r3, [r4, #0]
 810ac46:	bd38      	pop	{r3, r4, r5, pc}
 810ac48:	100006a4 	.word	0x100006a4

0810ac4c <_read_r>:
 810ac4c:	b538      	push	{r3, r4, r5, lr}
 810ac4e:	4d07      	ldr	r5, [pc, #28]	; (810ac6c <_read_r+0x20>)
 810ac50:	4604      	mov	r4, r0
 810ac52:	4608      	mov	r0, r1
 810ac54:	4611      	mov	r1, r2
 810ac56:	2200      	movs	r2, #0
 810ac58:	602a      	str	r2, [r5, #0]
 810ac5a:	461a      	mov	r2, r3
 810ac5c:	f7f8 fb12 	bl	8103284 <_read>
 810ac60:	1c43      	adds	r3, r0, #1
 810ac62:	d102      	bne.n	810ac6a <_read_r+0x1e>
 810ac64:	682b      	ldr	r3, [r5, #0]
 810ac66:	b103      	cbz	r3, 810ac6a <_read_r+0x1e>
 810ac68:	6023      	str	r3, [r4, #0]
 810ac6a:	bd38      	pop	{r3, r4, r5, pc}
 810ac6c:	100006a4 	.word	0x100006a4

0810ac70 <_write_r>:
 810ac70:	b538      	push	{r3, r4, r5, lr}
 810ac72:	4d07      	ldr	r5, [pc, #28]	; (810ac90 <_write_r+0x20>)
 810ac74:	4604      	mov	r4, r0
 810ac76:	4608      	mov	r0, r1
 810ac78:	4611      	mov	r1, r2
 810ac7a:	2200      	movs	r2, #0
 810ac7c:	602a      	str	r2, [r5, #0]
 810ac7e:	461a      	mov	r2, r3
 810ac80:	f7f8 fb1f 	bl	81032c2 <_write>
 810ac84:	1c43      	adds	r3, r0, #1
 810ac86:	d102      	bne.n	810ac8e <_write_r+0x1e>
 810ac88:	682b      	ldr	r3, [r5, #0]
 810ac8a:	b103      	cbz	r3, 810ac8e <_write_r+0x1e>
 810ac8c:	6023      	str	r3, [r4, #0]
 810ac8e:	bd38      	pop	{r3, r4, r5, pc}
 810ac90:	100006a4 	.word	0x100006a4

0810ac94 <__errno>:
 810ac94:	4b01      	ldr	r3, [pc, #4]	; (810ac9c <__errno+0x8>)
 810ac96:	6818      	ldr	r0, [r3, #0]
 810ac98:	4770      	bx	lr
 810ac9a:	bf00      	nop
 810ac9c:	100000c8 	.word	0x100000c8

0810aca0 <__libc_init_array>:
 810aca0:	b570      	push	{r4, r5, r6, lr}
 810aca2:	4d0d      	ldr	r5, [pc, #52]	; (810acd8 <__libc_init_array+0x38>)
 810aca4:	4c0d      	ldr	r4, [pc, #52]	; (810acdc <__libc_init_array+0x3c>)
 810aca6:	1b64      	subs	r4, r4, r5
 810aca8:	10a4      	asrs	r4, r4, #2
 810acaa:	2600      	movs	r6, #0
 810acac:	42a6      	cmp	r6, r4
 810acae:	d109      	bne.n	810acc4 <__libc_init_array+0x24>
 810acb0:	4d0b      	ldr	r5, [pc, #44]	; (810ace0 <__libc_init_array+0x40>)
 810acb2:	4c0c      	ldr	r4, [pc, #48]	; (810ace4 <__libc_init_array+0x44>)
 810acb4:	f003 fcde 	bl	810e674 <_init>
 810acb8:	1b64      	subs	r4, r4, r5
 810acba:	10a4      	asrs	r4, r4, #2
 810acbc:	2600      	movs	r6, #0
 810acbe:	42a6      	cmp	r6, r4
 810acc0:	d105      	bne.n	810acce <__libc_init_array+0x2e>
 810acc2:	bd70      	pop	{r4, r5, r6, pc}
 810acc4:	f855 3b04 	ldr.w	r3, [r5], #4
 810acc8:	4798      	blx	r3
 810acca:	3601      	adds	r6, #1
 810accc:	e7ee      	b.n	810acac <__libc_init_array+0xc>
 810acce:	f855 3b04 	ldr.w	r3, [r5], #4
 810acd2:	4798      	blx	r3
 810acd4:	3601      	adds	r6, #1
 810acd6:	e7f2      	b.n	810acbe <__libc_init_array+0x1e>
 810acd8:	0810ec98 	.word	0x0810ec98
 810acdc:	0810ec98 	.word	0x0810ec98
 810ace0:	0810ec98 	.word	0x0810ec98
 810ace4:	0810ec9c 	.word	0x0810ec9c

0810ace8 <__retarget_lock_init_recursive>:
 810ace8:	4770      	bx	lr

0810acea <__retarget_lock_acquire_recursive>:
 810acea:	4770      	bx	lr

0810acec <__retarget_lock_release_recursive>:
 810acec:	4770      	bx	lr
	...

0810acf0 <nanf>:
 810acf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810acf8 <nanf+0x8>
 810acf4:	4770      	bx	lr
 810acf6:	bf00      	nop
 810acf8:	7fc00000 	.word	0x7fc00000

0810acfc <quorem>:
 810acfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ad00:	6903      	ldr	r3, [r0, #16]
 810ad02:	690c      	ldr	r4, [r1, #16]
 810ad04:	42a3      	cmp	r3, r4
 810ad06:	4607      	mov	r7, r0
 810ad08:	db7e      	blt.n	810ae08 <quorem+0x10c>
 810ad0a:	3c01      	subs	r4, #1
 810ad0c:	f101 0814 	add.w	r8, r1, #20
 810ad10:	f100 0514 	add.w	r5, r0, #20
 810ad14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ad18:	9301      	str	r3, [sp, #4]
 810ad1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810ad1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ad22:	3301      	adds	r3, #1
 810ad24:	429a      	cmp	r2, r3
 810ad26:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810ad2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810ad2e:	fbb2 f6f3 	udiv	r6, r2, r3
 810ad32:	d331      	bcc.n	810ad98 <quorem+0x9c>
 810ad34:	f04f 0e00 	mov.w	lr, #0
 810ad38:	4640      	mov	r0, r8
 810ad3a:	46ac      	mov	ip, r5
 810ad3c:	46f2      	mov	sl, lr
 810ad3e:	f850 2b04 	ldr.w	r2, [r0], #4
 810ad42:	b293      	uxth	r3, r2
 810ad44:	fb06 e303 	mla	r3, r6, r3, lr
 810ad48:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810ad4c:	0c1a      	lsrs	r2, r3, #16
 810ad4e:	b29b      	uxth	r3, r3
 810ad50:	ebaa 0303 	sub.w	r3, sl, r3
 810ad54:	f8dc a000 	ldr.w	sl, [ip]
 810ad58:	fa13 f38a 	uxtah	r3, r3, sl
 810ad5c:	fb06 220e 	mla	r2, r6, lr, r2
 810ad60:	9300      	str	r3, [sp, #0]
 810ad62:	9b00      	ldr	r3, [sp, #0]
 810ad64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810ad68:	b292      	uxth	r2, r2
 810ad6a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810ad6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ad72:	f8bd 3000 	ldrh.w	r3, [sp]
 810ad76:	4581      	cmp	r9, r0
 810ad78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ad7c:	f84c 3b04 	str.w	r3, [ip], #4
 810ad80:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810ad84:	d2db      	bcs.n	810ad3e <quorem+0x42>
 810ad86:	f855 300b 	ldr.w	r3, [r5, fp]
 810ad8a:	b92b      	cbnz	r3, 810ad98 <quorem+0x9c>
 810ad8c:	9b01      	ldr	r3, [sp, #4]
 810ad8e:	3b04      	subs	r3, #4
 810ad90:	429d      	cmp	r5, r3
 810ad92:	461a      	mov	r2, r3
 810ad94:	d32c      	bcc.n	810adf0 <quorem+0xf4>
 810ad96:	613c      	str	r4, [r7, #16]
 810ad98:	4638      	mov	r0, r7
 810ad9a:	f001 f9f1 	bl	810c180 <__mcmp>
 810ad9e:	2800      	cmp	r0, #0
 810ada0:	db22      	blt.n	810ade8 <quorem+0xec>
 810ada2:	3601      	adds	r6, #1
 810ada4:	4629      	mov	r1, r5
 810ada6:	2000      	movs	r0, #0
 810ada8:	f858 2b04 	ldr.w	r2, [r8], #4
 810adac:	f8d1 c000 	ldr.w	ip, [r1]
 810adb0:	b293      	uxth	r3, r2
 810adb2:	1ac3      	subs	r3, r0, r3
 810adb4:	0c12      	lsrs	r2, r2, #16
 810adb6:	fa13 f38c 	uxtah	r3, r3, ip
 810adba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 810adbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810adc2:	b29b      	uxth	r3, r3
 810adc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810adc8:	45c1      	cmp	r9, r8
 810adca:	f841 3b04 	str.w	r3, [r1], #4
 810adce:	ea4f 4022 	mov.w	r0, r2, asr #16
 810add2:	d2e9      	bcs.n	810ada8 <quorem+0xac>
 810add4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810add8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810addc:	b922      	cbnz	r2, 810ade8 <quorem+0xec>
 810adde:	3b04      	subs	r3, #4
 810ade0:	429d      	cmp	r5, r3
 810ade2:	461a      	mov	r2, r3
 810ade4:	d30a      	bcc.n	810adfc <quorem+0x100>
 810ade6:	613c      	str	r4, [r7, #16]
 810ade8:	4630      	mov	r0, r6
 810adea:	b003      	add	sp, #12
 810adec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810adf0:	6812      	ldr	r2, [r2, #0]
 810adf2:	3b04      	subs	r3, #4
 810adf4:	2a00      	cmp	r2, #0
 810adf6:	d1ce      	bne.n	810ad96 <quorem+0x9a>
 810adf8:	3c01      	subs	r4, #1
 810adfa:	e7c9      	b.n	810ad90 <quorem+0x94>
 810adfc:	6812      	ldr	r2, [r2, #0]
 810adfe:	3b04      	subs	r3, #4
 810ae00:	2a00      	cmp	r2, #0
 810ae02:	d1f0      	bne.n	810ade6 <quorem+0xea>
 810ae04:	3c01      	subs	r4, #1
 810ae06:	e7eb      	b.n	810ade0 <quorem+0xe4>
 810ae08:	2000      	movs	r0, #0
 810ae0a:	e7ee      	b.n	810adea <quorem+0xee>
 810ae0c:	0000      	movs	r0, r0
	...

0810ae10 <_dtoa_r>:
 810ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ae14:	ed2d 8b04 	vpush	{d8-d9}
 810ae18:	69c5      	ldr	r5, [r0, #28]
 810ae1a:	b093      	sub	sp, #76	; 0x4c
 810ae1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 810ae20:	ec57 6b10 	vmov	r6, r7, d0
 810ae24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810ae28:	9107      	str	r1, [sp, #28]
 810ae2a:	4604      	mov	r4, r0
 810ae2c:	920a      	str	r2, [sp, #40]	; 0x28
 810ae2e:	930d      	str	r3, [sp, #52]	; 0x34
 810ae30:	b975      	cbnz	r5, 810ae50 <_dtoa_r+0x40>
 810ae32:	2010      	movs	r0, #16
 810ae34:	f000 fe2a 	bl	810ba8c <malloc>
 810ae38:	4602      	mov	r2, r0
 810ae3a:	61e0      	str	r0, [r4, #28]
 810ae3c:	b920      	cbnz	r0, 810ae48 <_dtoa_r+0x38>
 810ae3e:	4bae      	ldr	r3, [pc, #696]	; (810b0f8 <_dtoa_r+0x2e8>)
 810ae40:	21ef      	movs	r1, #239	; 0xef
 810ae42:	48ae      	ldr	r0, [pc, #696]	; (810b0fc <_dtoa_r+0x2ec>)
 810ae44:	f002 fe4c 	bl	810dae0 <__assert_func>
 810ae48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810ae4c:	6005      	str	r5, [r0, #0]
 810ae4e:	60c5      	str	r5, [r0, #12]
 810ae50:	69e3      	ldr	r3, [r4, #28]
 810ae52:	6819      	ldr	r1, [r3, #0]
 810ae54:	b151      	cbz	r1, 810ae6c <_dtoa_r+0x5c>
 810ae56:	685a      	ldr	r2, [r3, #4]
 810ae58:	604a      	str	r2, [r1, #4]
 810ae5a:	2301      	movs	r3, #1
 810ae5c:	4093      	lsls	r3, r2
 810ae5e:	608b      	str	r3, [r1, #8]
 810ae60:	4620      	mov	r0, r4
 810ae62:	f000 ff07 	bl	810bc74 <_Bfree>
 810ae66:	69e3      	ldr	r3, [r4, #28]
 810ae68:	2200      	movs	r2, #0
 810ae6a:	601a      	str	r2, [r3, #0]
 810ae6c:	1e3b      	subs	r3, r7, #0
 810ae6e:	bfbb      	ittet	lt
 810ae70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810ae74:	9303      	strlt	r3, [sp, #12]
 810ae76:	2300      	movge	r3, #0
 810ae78:	2201      	movlt	r2, #1
 810ae7a:	bfac      	ite	ge
 810ae7c:	f8c8 3000 	strge.w	r3, [r8]
 810ae80:	f8c8 2000 	strlt.w	r2, [r8]
 810ae84:	4b9e      	ldr	r3, [pc, #632]	; (810b100 <_dtoa_r+0x2f0>)
 810ae86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810ae8a:	ea33 0308 	bics.w	r3, r3, r8
 810ae8e:	d11b      	bne.n	810aec8 <_dtoa_r+0xb8>
 810ae90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810ae92:	f242 730f 	movw	r3, #9999	; 0x270f
 810ae96:	6013      	str	r3, [r2, #0]
 810ae98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 810ae9c:	4333      	orrs	r3, r6
 810ae9e:	f000 8593 	beq.w	810b9c8 <_dtoa_r+0xbb8>
 810aea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810aea4:	b963      	cbnz	r3, 810aec0 <_dtoa_r+0xb0>
 810aea6:	4b97      	ldr	r3, [pc, #604]	; (810b104 <_dtoa_r+0x2f4>)
 810aea8:	e027      	b.n	810aefa <_dtoa_r+0xea>
 810aeaa:	4b97      	ldr	r3, [pc, #604]	; (810b108 <_dtoa_r+0x2f8>)
 810aeac:	9300      	str	r3, [sp, #0]
 810aeae:	3308      	adds	r3, #8
 810aeb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810aeb2:	6013      	str	r3, [r2, #0]
 810aeb4:	9800      	ldr	r0, [sp, #0]
 810aeb6:	b013      	add	sp, #76	; 0x4c
 810aeb8:	ecbd 8b04 	vpop	{d8-d9}
 810aebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aec0:	4b90      	ldr	r3, [pc, #576]	; (810b104 <_dtoa_r+0x2f4>)
 810aec2:	9300      	str	r3, [sp, #0]
 810aec4:	3303      	adds	r3, #3
 810aec6:	e7f3      	b.n	810aeb0 <_dtoa_r+0xa0>
 810aec8:	ed9d 7b02 	vldr	d7, [sp, #8]
 810aecc:	2200      	movs	r2, #0
 810aece:	ec51 0b17 	vmov	r0, r1, d7
 810aed2:	eeb0 8a47 	vmov.f32	s16, s14
 810aed6:	eef0 8a67 	vmov.f32	s17, s15
 810aeda:	2300      	movs	r3, #0
 810aedc:	f7f5 fe7c 	bl	8100bd8 <__aeabi_dcmpeq>
 810aee0:	4681      	mov	r9, r0
 810aee2:	b160      	cbz	r0, 810aefe <_dtoa_r+0xee>
 810aee4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810aee6:	2301      	movs	r3, #1
 810aee8:	6013      	str	r3, [r2, #0]
 810aeea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810aeec:	2b00      	cmp	r3, #0
 810aeee:	f000 8568 	beq.w	810b9c2 <_dtoa_r+0xbb2>
 810aef2:	4b86      	ldr	r3, [pc, #536]	; (810b10c <_dtoa_r+0x2fc>)
 810aef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810aef6:	6013      	str	r3, [r2, #0]
 810aef8:	3b01      	subs	r3, #1
 810aefa:	9300      	str	r3, [sp, #0]
 810aefc:	e7da      	b.n	810aeb4 <_dtoa_r+0xa4>
 810aefe:	aa10      	add	r2, sp, #64	; 0x40
 810af00:	a911      	add	r1, sp, #68	; 0x44
 810af02:	4620      	mov	r0, r4
 810af04:	eeb0 0a48 	vmov.f32	s0, s16
 810af08:	eef0 0a68 	vmov.f32	s1, s17
 810af0c:	f001 fa4e 	bl	810c3ac <__d2b>
 810af10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810af14:	4682      	mov	sl, r0
 810af16:	2d00      	cmp	r5, #0
 810af18:	d07f      	beq.n	810b01a <_dtoa_r+0x20a>
 810af1a:	ee18 3a90 	vmov	r3, s17
 810af1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810af22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 810af26:	ec51 0b18 	vmov	r0, r1, d8
 810af2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810af2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810af32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 810af36:	4619      	mov	r1, r3
 810af38:	2200      	movs	r2, #0
 810af3a:	4b75      	ldr	r3, [pc, #468]	; (810b110 <_dtoa_r+0x300>)
 810af3c:	f7f5 fa2c 	bl	8100398 <__aeabi_dsub>
 810af40:	a367      	add	r3, pc, #412	; (adr r3, 810b0e0 <_dtoa_r+0x2d0>)
 810af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af46:	f7f5 fbdf 	bl	8100708 <__aeabi_dmul>
 810af4a:	a367      	add	r3, pc, #412	; (adr r3, 810b0e8 <_dtoa_r+0x2d8>)
 810af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af50:	f7f5 fa24 	bl	810039c <__adddf3>
 810af54:	4606      	mov	r6, r0
 810af56:	4628      	mov	r0, r5
 810af58:	460f      	mov	r7, r1
 810af5a:	f7f5 fb6b 	bl	8100634 <__aeabi_i2d>
 810af5e:	a364      	add	r3, pc, #400	; (adr r3, 810b0f0 <_dtoa_r+0x2e0>)
 810af60:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af64:	f7f5 fbd0 	bl	8100708 <__aeabi_dmul>
 810af68:	4602      	mov	r2, r0
 810af6a:	460b      	mov	r3, r1
 810af6c:	4630      	mov	r0, r6
 810af6e:	4639      	mov	r1, r7
 810af70:	f7f5 fa14 	bl	810039c <__adddf3>
 810af74:	4606      	mov	r6, r0
 810af76:	460f      	mov	r7, r1
 810af78:	f7f5 fe76 	bl	8100c68 <__aeabi_d2iz>
 810af7c:	2200      	movs	r2, #0
 810af7e:	4683      	mov	fp, r0
 810af80:	2300      	movs	r3, #0
 810af82:	4630      	mov	r0, r6
 810af84:	4639      	mov	r1, r7
 810af86:	f7f5 fe31 	bl	8100bec <__aeabi_dcmplt>
 810af8a:	b148      	cbz	r0, 810afa0 <_dtoa_r+0x190>
 810af8c:	4658      	mov	r0, fp
 810af8e:	f7f5 fb51 	bl	8100634 <__aeabi_i2d>
 810af92:	4632      	mov	r2, r6
 810af94:	463b      	mov	r3, r7
 810af96:	f7f5 fe1f 	bl	8100bd8 <__aeabi_dcmpeq>
 810af9a:	b908      	cbnz	r0, 810afa0 <_dtoa_r+0x190>
 810af9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 810afa0:	f1bb 0f16 	cmp.w	fp, #22
 810afa4:	d857      	bhi.n	810b056 <_dtoa_r+0x246>
 810afa6:	4b5b      	ldr	r3, [pc, #364]	; (810b114 <_dtoa_r+0x304>)
 810afa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 810afb0:	ec51 0b18 	vmov	r0, r1, d8
 810afb4:	f7f5 fe1a 	bl	8100bec <__aeabi_dcmplt>
 810afb8:	2800      	cmp	r0, #0
 810afba:	d04e      	beq.n	810b05a <_dtoa_r+0x24a>
 810afbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 810afc0:	2300      	movs	r3, #0
 810afc2:	930c      	str	r3, [sp, #48]	; 0x30
 810afc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810afc6:	1b5b      	subs	r3, r3, r5
 810afc8:	1e5a      	subs	r2, r3, #1
 810afca:	bf45      	ittet	mi
 810afcc:	f1c3 0301 	rsbmi	r3, r3, #1
 810afd0:	9305      	strmi	r3, [sp, #20]
 810afd2:	2300      	movpl	r3, #0
 810afd4:	2300      	movmi	r3, #0
 810afd6:	9206      	str	r2, [sp, #24]
 810afd8:	bf54      	ite	pl
 810afda:	9305      	strpl	r3, [sp, #20]
 810afdc:	9306      	strmi	r3, [sp, #24]
 810afde:	f1bb 0f00 	cmp.w	fp, #0
 810afe2:	db3c      	blt.n	810b05e <_dtoa_r+0x24e>
 810afe4:	9b06      	ldr	r3, [sp, #24]
 810afe6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 810afea:	445b      	add	r3, fp
 810afec:	9306      	str	r3, [sp, #24]
 810afee:	2300      	movs	r3, #0
 810aff0:	9308      	str	r3, [sp, #32]
 810aff2:	9b07      	ldr	r3, [sp, #28]
 810aff4:	2b09      	cmp	r3, #9
 810aff6:	d868      	bhi.n	810b0ca <_dtoa_r+0x2ba>
 810aff8:	2b05      	cmp	r3, #5
 810affa:	bfc4      	itt	gt
 810affc:	3b04      	subgt	r3, #4
 810affe:	9307      	strgt	r3, [sp, #28]
 810b000:	9b07      	ldr	r3, [sp, #28]
 810b002:	f1a3 0302 	sub.w	r3, r3, #2
 810b006:	bfcc      	ite	gt
 810b008:	2500      	movgt	r5, #0
 810b00a:	2501      	movle	r5, #1
 810b00c:	2b03      	cmp	r3, #3
 810b00e:	f200 8085 	bhi.w	810b11c <_dtoa_r+0x30c>
 810b012:	e8df f003 	tbb	[pc, r3]
 810b016:	3b2e      	.short	0x3b2e
 810b018:	5839      	.short	0x5839
 810b01a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810b01e:	441d      	add	r5, r3
 810b020:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810b024:	2b20      	cmp	r3, #32
 810b026:	bfc1      	itttt	gt
 810b028:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810b02c:	fa08 f803 	lslgt.w	r8, r8, r3
 810b030:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 810b034:	fa26 f303 	lsrgt.w	r3, r6, r3
 810b038:	bfd6      	itet	le
 810b03a:	f1c3 0320 	rsble	r3, r3, #32
 810b03e:	ea48 0003 	orrgt.w	r0, r8, r3
 810b042:	fa06 f003 	lslle.w	r0, r6, r3
 810b046:	f7f5 fae5 	bl	8100614 <__aeabi_ui2d>
 810b04a:	2201      	movs	r2, #1
 810b04c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 810b050:	3d01      	subs	r5, #1
 810b052:	920e      	str	r2, [sp, #56]	; 0x38
 810b054:	e76f      	b.n	810af36 <_dtoa_r+0x126>
 810b056:	2301      	movs	r3, #1
 810b058:	e7b3      	b.n	810afc2 <_dtoa_r+0x1b2>
 810b05a:	900c      	str	r0, [sp, #48]	; 0x30
 810b05c:	e7b2      	b.n	810afc4 <_dtoa_r+0x1b4>
 810b05e:	9b05      	ldr	r3, [sp, #20]
 810b060:	eba3 030b 	sub.w	r3, r3, fp
 810b064:	9305      	str	r3, [sp, #20]
 810b066:	f1cb 0300 	rsb	r3, fp, #0
 810b06a:	9308      	str	r3, [sp, #32]
 810b06c:	2300      	movs	r3, #0
 810b06e:	930b      	str	r3, [sp, #44]	; 0x2c
 810b070:	e7bf      	b.n	810aff2 <_dtoa_r+0x1e2>
 810b072:	2300      	movs	r3, #0
 810b074:	9309      	str	r3, [sp, #36]	; 0x24
 810b076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b078:	2b00      	cmp	r3, #0
 810b07a:	dc52      	bgt.n	810b122 <_dtoa_r+0x312>
 810b07c:	2301      	movs	r3, #1
 810b07e:	9301      	str	r3, [sp, #4]
 810b080:	9304      	str	r3, [sp, #16]
 810b082:	461a      	mov	r2, r3
 810b084:	920a      	str	r2, [sp, #40]	; 0x28
 810b086:	e00b      	b.n	810b0a0 <_dtoa_r+0x290>
 810b088:	2301      	movs	r3, #1
 810b08a:	e7f3      	b.n	810b074 <_dtoa_r+0x264>
 810b08c:	2300      	movs	r3, #0
 810b08e:	9309      	str	r3, [sp, #36]	; 0x24
 810b090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b092:	445b      	add	r3, fp
 810b094:	9301      	str	r3, [sp, #4]
 810b096:	3301      	adds	r3, #1
 810b098:	2b01      	cmp	r3, #1
 810b09a:	9304      	str	r3, [sp, #16]
 810b09c:	bfb8      	it	lt
 810b09e:	2301      	movlt	r3, #1
 810b0a0:	69e0      	ldr	r0, [r4, #28]
 810b0a2:	2100      	movs	r1, #0
 810b0a4:	2204      	movs	r2, #4
 810b0a6:	f102 0614 	add.w	r6, r2, #20
 810b0aa:	429e      	cmp	r6, r3
 810b0ac:	d93d      	bls.n	810b12a <_dtoa_r+0x31a>
 810b0ae:	6041      	str	r1, [r0, #4]
 810b0b0:	4620      	mov	r0, r4
 810b0b2:	f000 fd9f 	bl	810bbf4 <_Balloc>
 810b0b6:	9000      	str	r0, [sp, #0]
 810b0b8:	2800      	cmp	r0, #0
 810b0ba:	d139      	bne.n	810b130 <_dtoa_r+0x320>
 810b0bc:	4b16      	ldr	r3, [pc, #88]	; (810b118 <_dtoa_r+0x308>)
 810b0be:	4602      	mov	r2, r0
 810b0c0:	f240 11af 	movw	r1, #431	; 0x1af
 810b0c4:	e6bd      	b.n	810ae42 <_dtoa_r+0x32>
 810b0c6:	2301      	movs	r3, #1
 810b0c8:	e7e1      	b.n	810b08e <_dtoa_r+0x27e>
 810b0ca:	2501      	movs	r5, #1
 810b0cc:	2300      	movs	r3, #0
 810b0ce:	9307      	str	r3, [sp, #28]
 810b0d0:	9509      	str	r5, [sp, #36]	; 0x24
 810b0d2:	f04f 33ff 	mov.w	r3, #4294967295
 810b0d6:	9301      	str	r3, [sp, #4]
 810b0d8:	9304      	str	r3, [sp, #16]
 810b0da:	2200      	movs	r2, #0
 810b0dc:	2312      	movs	r3, #18
 810b0de:	e7d1      	b.n	810b084 <_dtoa_r+0x274>
 810b0e0:	636f4361 	.word	0x636f4361
 810b0e4:	3fd287a7 	.word	0x3fd287a7
 810b0e8:	8b60c8b3 	.word	0x8b60c8b3
 810b0ec:	3fc68a28 	.word	0x3fc68a28
 810b0f0:	509f79fb 	.word	0x509f79fb
 810b0f4:	3fd34413 	.word	0x3fd34413
 810b0f8:	0810e8ae 	.word	0x0810e8ae
 810b0fc:	0810e8c5 	.word	0x0810e8c5
 810b100:	7ff00000 	.word	0x7ff00000
 810b104:	0810e8aa 	.word	0x0810e8aa
 810b108:	0810e8a1 	.word	0x0810e8a1
 810b10c:	0810e879 	.word	0x0810e879
 810b110:	3ff80000 	.word	0x3ff80000
 810b114:	0810e9b0 	.word	0x0810e9b0
 810b118:	0810e91d 	.word	0x0810e91d
 810b11c:	2301      	movs	r3, #1
 810b11e:	9309      	str	r3, [sp, #36]	; 0x24
 810b120:	e7d7      	b.n	810b0d2 <_dtoa_r+0x2c2>
 810b122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b124:	9301      	str	r3, [sp, #4]
 810b126:	9304      	str	r3, [sp, #16]
 810b128:	e7ba      	b.n	810b0a0 <_dtoa_r+0x290>
 810b12a:	3101      	adds	r1, #1
 810b12c:	0052      	lsls	r2, r2, #1
 810b12e:	e7ba      	b.n	810b0a6 <_dtoa_r+0x296>
 810b130:	69e3      	ldr	r3, [r4, #28]
 810b132:	9a00      	ldr	r2, [sp, #0]
 810b134:	601a      	str	r2, [r3, #0]
 810b136:	9b04      	ldr	r3, [sp, #16]
 810b138:	2b0e      	cmp	r3, #14
 810b13a:	f200 80a8 	bhi.w	810b28e <_dtoa_r+0x47e>
 810b13e:	2d00      	cmp	r5, #0
 810b140:	f000 80a5 	beq.w	810b28e <_dtoa_r+0x47e>
 810b144:	f1bb 0f00 	cmp.w	fp, #0
 810b148:	dd38      	ble.n	810b1bc <_dtoa_r+0x3ac>
 810b14a:	4bc0      	ldr	r3, [pc, #768]	; (810b44c <_dtoa_r+0x63c>)
 810b14c:	f00b 020f 	and.w	r2, fp, #15
 810b150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b154:	f41b 7f80 	tst.w	fp, #256	; 0x100
 810b158:	e9d3 6700 	ldrd	r6, r7, [r3]
 810b15c:	ea4f 182b 	mov.w	r8, fp, asr #4
 810b160:	d019      	beq.n	810b196 <_dtoa_r+0x386>
 810b162:	4bbb      	ldr	r3, [pc, #748]	; (810b450 <_dtoa_r+0x640>)
 810b164:	ec51 0b18 	vmov	r0, r1, d8
 810b168:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810b16c:	f7f5 fbf6 	bl	810095c <__aeabi_ddiv>
 810b170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b174:	f008 080f 	and.w	r8, r8, #15
 810b178:	2503      	movs	r5, #3
 810b17a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 810b450 <_dtoa_r+0x640>
 810b17e:	f1b8 0f00 	cmp.w	r8, #0
 810b182:	d10a      	bne.n	810b19a <_dtoa_r+0x38a>
 810b184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b188:	4632      	mov	r2, r6
 810b18a:	463b      	mov	r3, r7
 810b18c:	f7f5 fbe6 	bl	810095c <__aeabi_ddiv>
 810b190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b194:	e02b      	b.n	810b1ee <_dtoa_r+0x3de>
 810b196:	2502      	movs	r5, #2
 810b198:	e7ef      	b.n	810b17a <_dtoa_r+0x36a>
 810b19a:	f018 0f01 	tst.w	r8, #1
 810b19e:	d008      	beq.n	810b1b2 <_dtoa_r+0x3a2>
 810b1a0:	4630      	mov	r0, r6
 810b1a2:	4639      	mov	r1, r7
 810b1a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 810b1a8:	f7f5 faae 	bl	8100708 <__aeabi_dmul>
 810b1ac:	3501      	adds	r5, #1
 810b1ae:	4606      	mov	r6, r0
 810b1b0:	460f      	mov	r7, r1
 810b1b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 810b1b6:	f109 0908 	add.w	r9, r9, #8
 810b1ba:	e7e0      	b.n	810b17e <_dtoa_r+0x36e>
 810b1bc:	f000 809f 	beq.w	810b2fe <_dtoa_r+0x4ee>
 810b1c0:	f1cb 0600 	rsb	r6, fp, #0
 810b1c4:	4ba1      	ldr	r3, [pc, #644]	; (810b44c <_dtoa_r+0x63c>)
 810b1c6:	4fa2      	ldr	r7, [pc, #648]	; (810b450 <_dtoa_r+0x640>)
 810b1c8:	f006 020f 	and.w	r2, r6, #15
 810b1cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b1d4:	ec51 0b18 	vmov	r0, r1, d8
 810b1d8:	f7f5 fa96 	bl	8100708 <__aeabi_dmul>
 810b1dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b1e0:	1136      	asrs	r6, r6, #4
 810b1e2:	2300      	movs	r3, #0
 810b1e4:	2502      	movs	r5, #2
 810b1e6:	2e00      	cmp	r6, #0
 810b1e8:	d17e      	bne.n	810b2e8 <_dtoa_r+0x4d8>
 810b1ea:	2b00      	cmp	r3, #0
 810b1ec:	d1d0      	bne.n	810b190 <_dtoa_r+0x380>
 810b1ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b1f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810b1f4:	2b00      	cmp	r3, #0
 810b1f6:	f000 8084 	beq.w	810b302 <_dtoa_r+0x4f2>
 810b1fa:	4b96      	ldr	r3, [pc, #600]	; (810b454 <_dtoa_r+0x644>)
 810b1fc:	2200      	movs	r2, #0
 810b1fe:	4640      	mov	r0, r8
 810b200:	4649      	mov	r1, r9
 810b202:	f7f5 fcf3 	bl	8100bec <__aeabi_dcmplt>
 810b206:	2800      	cmp	r0, #0
 810b208:	d07b      	beq.n	810b302 <_dtoa_r+0x4f2>
 810b20a:	9b04      	ldr	r3, [sp, #16]
 810b20c:	2b00      	cmp	r3, #0
 810b20e:	d078      	beq.n	810b302 <_dtoa_r+0x4f2>
 810b210:	9b01      	ldr	r3, [sp, #4]
 810b212:	2b00      	cmp	r3, #0
 810b214:	dd39      	ble.n	810b28a <_dtoa_r+0x47a>
 810b216:	4b90      	ldr	r3, [pc, #576]	; (810b458 <_dtoa_r+0x648>)
 810b218:	2200      	movs	r2, #0
 810b21a:	4640      	mov	r0, r8
 810b21c:	4649      	mov	r1, r9
 810b21e:	f7f5 fa73 	bl	8100708 <__aeabi_dmul>
 810b222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b226:	9e01      	ldr	r6, [sp, #4]
 810b228:	f10b 37ff 	add.w	r7, fp, #4294967295
 810b22c:	3501      	adds	r5, #1
 810b22e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810b232:	4628      	mov	r0, r5
 810b234:	f7f5 f9fe 	bl	8100634 <__aeabi_i2d>
 810b238:	4642      	mov	r2, r8
 810b23a:	464b      	mov	r3, r9
 810b23c:	f7f5 fa64 	bl	8100708 <__aeabi_dmul>
 810b240:	4b86      	ldr	r3, [pc, #536]	; (810b45c <_dtoa_r+0x64c>)
 810b242:	2200      	movs	r2, #0
 810b244:	f7f5 f8aa 	bl	810039c <__adddf3>
 810b248:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810b24c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b250:	9303      	str	r3, [sp, #12]
 810b252:	2e00      	cmp	r6, #0
 810b254:	d158      	bne.n	810b308 <_dtoa_r+0x4f8>
 810b256:	4b82      	ldr	r3, [pc, #520]	; (810b460 <_dtoa_r+0x650>)
 810b258:	2200      	movs	r2, #0
 810b25a:	4640      	mov	r0, r8
 810b25c:	4649      	mov	r1, r9
 810b25e:	f7f5 f89b 	bl	8100398 <__aeabi_dsub>
 810b262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b266:	4680      	mov	r8, r0
 810b268:	4689      	mov	r9, r1
 810b26a:	f7f5 fcdd 	bl	8100c28 <__aeabi_dcmpgt>
 810b26e:	2800      	cmp	r0, #0
 810b270:	f040 8296 	bne.w	810b7a0 <_dtoa_r+0x990>
 810b274:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810b278:	4640      	mov	r0, r8
 810b27a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810b27e:	4649      	mov	r1, r9
 810b280:	f7f5 fcb4 	bl	8100bec <__aeabi_dcmplt>
 810b284:	2800      	cmp	r0, #0
 810b286:	f040 8289 	bne.w	810b79c <_dtoa_r+0x98c>
 810b28a:	ed8d 8b02 	vstr	d8, [sp, #8]
 810b28e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810b290:	2b00      	cmp	r3, #0
 810b292:	f2c0 814e 	blt.w	810b532 <_dtoa_r+0x722>
 810b296:	f1bb 0f0e 	cmp.w	fp, #14
 810b29a:	f300 814a 	bgt.w	810b532 <_dtoa_r+0x722>
 810b29e:	4b6b      	ldr	r3, [pc, #428]	; (810b44c <_dtoa_r+0x63c>)
 810b2a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810b2a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b2aa:	2b00      	cmp	r3, #0
 810b2ac:	f280 80dc 	bge.w	810b468 <_dtoa_r+0x658>
 810b2b0:	9b04      	ldr	r3, [sp, #16]
 810b2b2:	2b00      	cmp	r3, #0
 810b2b4:	f300 80d8 	bgt.w	810b468 <_dtoa_r+0x658>
 810b2b8:	f040 826f 	bne.w	810b79a <_dtoa_r+0x98a>
 810b2bc:	4b68      	ldr	r3, [pc, #416]	; (810b460 <_dtoa_r+0x650>)
 810b2be:	2200      	movs	r2, #0
 810b2c0:	4640      	mov	r0, r8
 810b2c2:	4649      	mov	r1, r9
 810b2c4:	f7f5 fa20 	bl	8100708 <__aeabi_dmul>
 810b2c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b2cc:	f7f5 fca2 	bl	8100c14 <__aeabi_dcmpge>
 810b2d0:	9e04      	ldr	r6, [sp, #16]
 810b2d2:	4637      	mov	r7, r6
 810b2d4:	2800      	cmp	r0, #0
 810b2d6:	f040 8245 	bne.w	810b764 <_dtoa_r+0x954>
 810b2da:	9d00      	ldr	r5, [sp, #0]
 810b2dc:	2331      	movs	r3, #49	; 0x31
 810b2de:	f805 3b01 	strb.w	r3, [r5], #1
 810b2e2:	f10b 0b01 	add.w	fp, fp, #1
 810b2e6:	e241      	b.n	810b76c <_dtoa_r+0x95c>
 810b2e8:	07f2      	lsls	r2, r6, #31
 810b2ea:	d505      	bpl.n	810b2f8 <_dtoa_r+0x4e8>
 810b2ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b2f0:	f7f5 fa0a 	bl	8100708 <__aeabi_dmul>
 810b2f4:	3501      	adds	r5, #1
 810b2f6:	2301      	movs	r3, #1
 810b2f8:	1076      	asrs	r6, r6, #1
 810b2fa:	3708      	adds	r7, #8
 810b2fc:	e773      	b.n	810b1e6 <_dtoa_r+0x3d6>
 810b2fe:	2502      	movs	r5, #2
 810b300:	e775      	b.n	810b1ee <_dtoa_r+0x3de>
 810b302:	9e04      	ldr	r6, [sp, #16]
 810b304:	465f      	mov	r7, fp
 810b306:	e792      	b.n	810b22e <_dtoa_r+0x41e>
 810b308:	9900      	ldr	r1, [sp, #0]
 810b30a:	4b50      	ldr	r3, [pc, #320]	; (810b44c <_dtoa_r+0x63c>)
 810b30c:	ed9d 7b02 	vldr	d7, [sp, #8]
 810b310:	4431      	add	r1, r6
 810b312:	9102      	str	r1, [sp, #8]
 810b314:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b316:	eeb0 9a47 	vmov.f32	s18, s14
 810b31a:	eef0 9a67 	vmov.f32	s19, s15
 810b31e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810b322:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b326:	2900      	cmp	r1, #0
 810b328:	d044      	beq.n	810b3b4 <_dtoa_r+0x5a4>
 810b32a:	494e      	ldr	r1, [pc, #312]	; (810b464 <_dtoa_r+0x654>)
 810b32c:	2000      	movs	r0, #0
 810b32e:	f7f5 fb15 	bl	810095c <__aeabi_ddiv>
 810b332:	ec53 2b19 	vmov	r2, r3, d9
 810b336:	f7f5 f82f 	bl	8100398 <__aeabi_dsub>
 810b33a:	9d00      	ldr	r5, [sp, #0]
 810b33c:	ec41 0b19 	vmov	d9, r0, r1
 810b340:	4649      	mov	r1, r9
 810b342:	4640      	mov	r0, r8
 810b344:	f7f5 fc90 	bl	8100c68 <__aeabi_d2iz>
 810b348:	4606      	mov	r6, r0
 810b34a:	f7f5 f973 	bl	8100634 <__aeabi_i2d>
 810b34e:	4602      	mov	r2, r0
 810b350:	460b      	mov	r3, r1
 810b352:	4640      	mov	r0, r8
 810b354:	4649      	mov	r1, r9
 810b356:	f7f5 f81f 	bl	8100398 <__aeabi_dsub>
 810b35a:	3630      	adds	r6, #48	; 0x30
 810b35c:	f805 6b01 	strb.w	r6, [r5], #1
 810b360:	ec53 2b19 	vmov	r2, r3, d9
 810b364:	4680      	mov	r8, r0
 810b366:	4689      	mov	r9, r1
 810b368:	f7f5 fc40 	bl	8100bec <__aeabi_dcmplt>
 810b36c:	2800      	cmp	r0, #0
 810b36e:	d164      	bne.n	810b43a <_dtoa_r+0x62a>
 810b370:	4642      	mov	r2, r8
 810b372:	464b      	mov	r3, r9
 810b374:	4937      	ldr	r1, [pc, #220]	; (810b454 <_dtoa_r+0x644>)
 810b376:	2000      	movs	r0, #0
 810b378:	f7f5 f80e 	bl	8100398 <__aeabi_dsub>
 810b37c:	ec53 2b19 	vmov	r2, r3, d9
 810b380:	f7f5 fc34 	bl	8100bec <__aeabi_dcmplt>
 810b384:	2800      	cmp	r0, #0
 810b386:	f040 80b6 	bne.w	810b4f6 <_dtoa_r+0x6e6>
 810b38a:	9b02      	ldr	r3, [sp, #8]
 810b38c:	429d      	cmp	r5, r3
 810b38e:	f43f af7c 	beq.w	810b28a <_dtoa_r+0x47a>
 810b392:	4b31      	ldr	r3, [pc, #196]	; (810b458 <_dtoa_r+0x648>)
 810b394:	ec51 0b19 	vmov	r0, r1, d9
 810b398:	2200      	movs	r2, #0
 810b39a:	f7f5 f9b5 	bl	8100708 <__aeabi_dmul>
 810b39e:	4b2e      	ldr	r3, [pc, #184]	; (810b458 <_dtoa_r+0x648>)
 810b3a0:	ec41 0b19 	vmov	d9, r0, r1
 810b3a4:	2200      	movs	r2, #0
 810b3a6:	4640      	mov	r0, r8
 810b3a8:	4649      	mov	r1, r9
 810b3aa:	f7f5 f9ad 	bl	8100708 <__aeabi_dmul>
 810b3ae:	4680      	mov	r8, r0
 810b3b0:	4689      	mov	r9, r1
 810b3b2:	e7c5      	b.n	810b340 <_dtoa_r+0x530>
 810b3b4:	ec51 0b17 	vmov	r0, r1, d7
 810b3b8:	f7f5 f9a6 	bl	8100708 <__aeabi_dmul>
 810b3bc:	9b02      	ldr	r3, [sp, #8]
 810b3be:	9d00      	ldr	r5, [sp, #0]
 810b3c0:	930f      	str	r3, [sp, #60]	; 0x3c
 810b3c2:	ec41 0b19 	vmov	d9, r0, r1
 810b3c6:	4649      	mov	r1, r9
 810b3c8:	4640      	mov	r0, r8
 810b3ca:	f7f5 fc4d 	bl	8100c68 <__aeabi_d2iz>
 810b3ce:	4606      	mov	r6, r0
 810b3d0:	f7f5 f930 	bl	8100634 <__aeabi_i2d>
 810b3d4:	3630      	adds	r6, #48	; 0x30
 810b3d6:	4602      	mov	r2, r0
 810b3d8:	460b      	mov	r3, r1
 810b3da:	4640      	mov	r0, r8
 810b3dc:	4649      	mov	r1, r9
 810b3de:	f7f4 ffdb 	bl	8100398 <__aeabi_dsub>
 810b3e2:	f805 6b01 	strb.w	r6, [r5], #1
 810b3e6:	9b02      	ldr	r3, [sp, #8]
 810b3e8:	429d      	cmp	r5, r3
 810b3ea:	4680      	mov	r8, r0
 810b3ec:	4689      	mov	r9, r1
 810b3ee:	f04f 0200 	mov.w	r2, #0
 810b3f2:	d124      	bne.n	810b43e <_dtoa_r+0x62e>
 810b3f4:	4b1b      	ldr	r3, [pc, #108]	; (810b464 <_dtoa_r+0x654>)
 810b3f6:	ec51 0b19 	vmov	r0, r1, d9
 810b3fa:	f7f4 ffcf 	bl	810039c <__adddf3>
 810b3fe:	4602      	mov	r2, r0
 810b400:	460b      	mov	r3, r1
 810b402:	4640      	mov	r0, r8
 810b404:	4649      	mov	r1, r9
 810b406:	f7f5 fc0f 	bl	8100c28 <__aeabi_dcmpgt>
 810b40a:	2800      	cmp	r0, #0
 810b40c:	d173      	bne.n	810b4f6 <_dtoa_r+0x6e6>
 810b40e:	ec53 2b19 	vmov	r2, r3, d9
 810b412:	4914      	ldr	r1, [pc, #80]	; (810b464 <_dtoa_r+0x654>)
 810b414:	2000      	movs	r0, #0
 810b416:	f7f4 ffbf 	bl	8100398 <__aeabi_dsub>
 810b41a:	4602      	mov	r2, r0
 810b41c:	460b      	mov	r3, r1
 810b41e:	4640      	mov	r0, r8
 810b420:	4649      	mov	r1, r9
 810b422:	f7f5 fbe3 	bl	8100bec <__aeabi_dcmplt>
 810b426:	2800      	cmp	r0, #0
 810b428:	f43f af2f 	beq.w	810b28a <_dtoa_r+0x47a>
 810b42c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810b42e:	1e6b      	subs	r3, r5, #1
 810b430:	930f      	str	r3, [sp, #60]	; 0x3c
 810b432:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810b436:	2b30      	cmp	r3, #48	; 0x30
 810b438:	d0f8      	beq.n	810b42c <_dtoa_r+0x61c>
 810b43a:	46bb      	mov	fp, r7
 810b43c:	e04a      	b.n	810b4d4 <_dtoa_r+0x6c4>
 810b43e:	4b06      	ldr	r3, [pc, #24]	; (810b458 <_dtoa_r+0x648>)
 810b440:	f7f5 f962 	bl	8100708 <__aeabi_dmul>
 810b444:	4680      	mov	r8, r0
 810b446:	4689      	mov	r9, r1
 810b448:	e7bd      	b.n	810b3c6 <_dtoa_r+0x5b6>
 810b44a:	bf00      	nop
 810b44c:	0810e9b0 	.word	0x0810e9b0
 810b450:	0810e988 	.word	0x0810e988
 810b454:	3ff00000 	.word	0x3ff00000
 810b458:	40240000 	.word	0x40240000
 810b45c:	401c0000 	.word	0x401c0000
 810b460:	40140000 	.word	0x40140000
 810b464:	3fe00000 	.word	0x3fe00000
 810b468:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810b46c:	9d00      	ldr	r5, [sp, #0]
 810b46e:	4642      	mov	r2, r8
 810b470:	464b      	mov	r3, r9
 810b472:	4630      	mov	r0, r6
 810b474:	4639      	mov	r1, r7
 810b476:	f7f5 fa71 	bl	810095c <__aeabi_ddiv>
 810b47a:	f7f5 fbf5 	bl	8100c68 <__aeabi_d2iz>
 810b47e:	9001      	str	r0, [sp, #4]
 810b480:	f7f5 f8d8 	bl	8100634 <__aeabi_i2d>
 810b484:	4642      	mov	r2, r8
 810b486:	464b      	mov	r3, r9
 810b488:	f7f5 f93e 	bl	8100708 <__aeabi_dmul>
 810b48c:	4602      	mov	r2, r0
 810b48e:	460b      	mov	r3, r1
 810b490:	4630      	mov	r0, r6
 810b492:	4639      	mov	r1, r7
 810b494:	f7f4 ff80 	bl	8100398 <__aeabi_dsub>
 810b498:	9e01      	ldr	r6, [sp, #4]
 810b49a:	9f04      	ldr	r7, [sp, #16]
 810b49c:	3630      	adds	r6, #48	; 0x30
 810b49e:	f805 6b01 	strb.w	r6, [r5], #1
 810b4a2:	9e00      	ldr	r6, [sp, #0]
 810b4a4:	1bae      	subs	r6, r5, r6
 810b4a6:	42b7      	cmp	r7, r6
 810b4a8:	4602      	mov	r2, r0
 810b4aa:	460b      	mov	r3, r1
 810b4ac:	d134      	bne.n	810b518 <_dtoa_r+0x708>
 810b4ae:	f7f4 ff75 	bl	810039c <__adddf3>
 810b4b2:	4642      	mov	r2, r8
 810b4b4:	464b      	mov	r3, r9
 810b4b6:	4606      	mov	r6, r0
 810b4b8:	460f      	mov	r7, r1
 810b4ba:	f7f5 fbb5 	bl	8100c28 <__aeabi_dcmpgt>
 810b4be:	b9c8      	cbnz	r0, 810b4f4 <_dtoa_r+0x6e4>
 810b4c0:	4642      	mov	r2, r8
 810b4c2:	464b      	mov	r3, r9
 810b4c4:	4630      	mov	r0, r6
 810b4c6:	4639      	mov	r1, r7
 810b4c8:	f7f5 fb86 	bl	8100bd8 <__aeabi_dcmpeq>
 810b4cc:	b110      	cbz	r0, 810b4d4 <_dtoa_r+0x6c4>
 810b4ce:	9b01      	ldr	r3, [sp, #4]
 810b4d0:	07db      	lsls	r3, r3, #31
 810b4d2:	d40f      	bmi.n	810b4f4 <_dtoa_r+0x6e4>
 810b4d4:	4651      	mov	r1, sl
 810b4d6:	4620      	mov	r0, r4
 810b4d8:	f000 fbcc 	bl	810bc74 <_Bfree>
 810b4dc:	2300      	movs	r3, #0
 810b4de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b4e0:	702b      	strb	r3, [r5, #0]
 810b4e2:	f10b 0301 	add.w	r3, fp, #1
 810b4e6:	6013      	str	r3, [r2, #0]
 810b4e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b4ea:	2b00      	cmp	r3, #0
 810b4ec:	f43f ace2 	beq.w	810aeb4 <_dtoa_r+0xa4>
 810b4f0:	601d      	str	r5, [r3, #0]
 810b4f2:	e4df      	b.n	810aeb4 <_dtoa_r+0xa4>
 810b4f4:	465f      	mov	r7, fp
 810b4f6:	462b      	mov	r3, r5
 810b4f8:	461d      	mov	r5, r3
 810b4fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b4fe:	2a39      	cmp	r2, #57	; 0x39
 810b500:	d106      	bne.n	810b510 <_dtoa_r+0x700>
 810b502:	9a00      	ldr	r2, [sp, #0]
 810b504:	429a      	cmp	r2, r3
 810b506:	d1f7      	bne.n	810b4f8 <_dtoa_r+0x6e8>
 810b508:	9900      	ldr	r1, [sp, #0]
 810b50a:	2230      	movs	r2, #48	; 0x30
 810b50c:	3701      	adds	r7, #1
 810b50e:	700a      	strb	r2, [r1, #0]
 810b510:	781a      	ldrb	r2, [r3, #0]
 810b512:	3201      	adds	r2, #1
 810b514:	701a      	strb	r2, [r3, #0]
 810b516:	e790      	b.n	810b43a <_dtoa_r+0x62a>
 810b518:	4ba3      	ldr	r3, [pc, #652]	; (810b7a8 <_dtoa_r+0x998>)
 810b51a:	2200      	movs	r2, #0
 810b51c:	f7f5 f8f4 	bl	8100708 <__aeabi_dmul>
 810b520:	2200      	movs	r2, #0
 810b522:	2300      	movs	r3, #0
 810b524:	4606      	mov	r6, r0
 810b526:	460f      	mov	r7, r1
 810b528:	f7f5 fb56 	bl	8100bd8 <__aeabi_dcmpeq>
 810b52c:	2800      	cmp	r0, #0
 810b52e:	d09e      	beq.n	810b46e <_dtoa_r+0x65e>
 810b530:	e7d0      	b.n	810b4d4 <_dtoa_r+0x6c4>
 810b532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b534:	2a00      	cmp	r2, #0
 810b536:	f000 80ca 	beq.w	810b6ce <_dtoa_r+0x8be>
 810b53a:	9a07      	ldr	r2, [sp, #28]
 810b53c:	2a01      	cmp	r2, #1
 810b53e:	f300 80ad 	bgt.w	810b69c <_dtoa_r+0x88c>
 810b542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b544:	2a00      	cmp	r2, #0
 810b546:	f000 80a5 	beq.w	810b694 <_dtoa_r+0x884>
 810b54a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810b54e:	9e08      	ldr	r6, [sp, #32]
 810b550:	9d05      	ldr	r5, [sp, #20]
 810b552:	9a05      	ldr	r2, [sp, #20]
 810b554:	441a      	add	r2, r3
 810b556:	9205      	str	r2, [sp, #20]
 810b558:	9a06      	ldr	r2, [sp, #24]
 810b55a:	2101      	movs	r1, #1
 810b55c:	441a      	add	r2, r3
 810b55e:	4620      	mov	r0, r4
 810b560:	9206      	str	r2, [sp, #24]
 810b562:	f000 fc87 	bl	810be74 <__i2b>
 810b566:	4607      	mov	r7, r0
 810b568:	b165      	cbz	r5, 810b584 <_dtoa_r+0x774>
 810b56a:	9b06      	ldr	r3, [sp, #24]
 810b56c:	2b00      	cmp	r3, #0
 810b56e:	dd09      	ble.n	810b584 <_dtoa_r+0x774>
 810b570:	42ab      	cmp	r3, r5
 810b572:	9a05      	ldr	r2, [sp, #20]
 810b574:	bfa8      	it	ge
 810b576:	462b      	movge	r3, r5
 810b578:	1ad2      	subs	r2, r2, r3
 810b57a:	9205      	str	r2, [sp, #20]
 810b57c:	9a06      	ldr	r2, [sp, #24]
 810b57e:	1aed      	subs	r5, r5, r3
 810b580:	1ad3      	subs	r3, r2, r3
 810b582:	9306      	str	r3, [sp, #24]
 810b584:	9b08      	ldr	r3, [sp, #32]
 810b586:	b1f3      	cbz	r3, 810b5c6 <_dtoa_r+0x7b6>
 810b588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b58a:	2b00      	cmp	r3, #0
 810b58c:	f000 80a3 	beq.w	810b6d6 <_dtoa_r+0x8c6>
 810b590:	2e00      	cmp	r6, #0
 810b592:	dd10      	ble.n	810b5b6 <_dtoa_r+0x7a6>
 810b594:	4639      	mov	r1, r7
 810b596:	4632      	mov	r2, r6
 810b598:	4620      	mov	r0, r4
 810b59a:	f000 fd2b 	bl	810bff4 <__pow5mult>
 810b59e:	4652      	mov	r2, sl
 810b5a0:	4601      	mov	r1, r0
 810b5a2:	4607      	mov	r7, r0
 810b5a4:	4620      	mov	r0, r4
 810b5a6:	f000 fc7b 	bl	810bea0 <__multiply>
 810b5aa:	4651      	mov	r1, sl
 810b5ac:	4680      	mov	r8, r0
 810b5ae:	4620      	mov	r0, r4
 810b5b0:	f000 fb60 	bl	810bc74 <_Bfree>
 810b5b4:	46c2      	mov	sl, r8
 810b5b6:	9b08      	ldr	r3, [sp, #32]
 810b5b8:	1b9a      	subs	r2, r3, r6
 810b5ba:	d004      	beq.n	810b5c6 <_dtoa_r+0x7b6>
 810b5bc:	4651      	mov	r1, sl
 810b5be:	4620      	mov	r0, r4
 810b5c0:	f000 fd18 	bl	810bff4 <__pow5mult>
 810b5c4:	4682      	mov	sl, r0
 810b5c6:	2101      	movs	r1, #1
 810b5c8:	4620      	mov	r0, r4
 810b5ca:	f000 fc53 	bl	810be74 <__i2b>
 810b5ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b5d0:	2b00      	cmp	r3, #0
 810b5d2:	4606      	mov	r6, r0
 810b5d4:	f340 8081 	ble.w	810b6da <_dtoa_r+0x8ca>
 810b5d8:	461a      	mov	r2, r3
 810b5da:	4601      	mov	r1, r0
 810b5dc:	4620      	mov	r0, r4
 810b5de:	f000 fd09 	bl	810bff4 <__pow5mult>
 810b5e2:	9b07      	ldr	r3, [sp, #28]
 810b5e4:	2b01      	cmp	r3, #1
 810b5e6:	4606      	mov	r6, r0
 810b5e8:	dd7a      	ble.n	810b6e0 <_dtoa_r+0x8d0>
 810b5ea:	f04f 0800 	mov.w	r8, #0
 810b5ee:	6933      	ldr	r3, [r6, #16]
 810b5f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810b5f4:	6918      	ldr	r0, [r3, #16]
 810b5f6:	f000 fbef 	bl	810bdd8 <__hi0bits>
 810b5fa:	f1c0 0020 	rsb	r0, r0, #32
 810b5fe:	9b06      	ldr	r3, [sp, #24]
 810b600:	4418      	add	r0, r3
 810b602:	f010 001f 	ands.w	r0, r0, #31
 810b606:	f000 8094 	beq.w	810b732 <_dtoa_r+0x922>
 810b60a:	f1c0 0320 	rsb	r3, r0, #32
 810b60e:	2b04      	cmp	r3, #4
 810b610:	f340 8085 	ble.w	810b71e <_dtoa_r+0x90e>
 810b614:	9b05      	ldr	r3, [sp, #20]
 810b616:	f1c0 001c 	rsb	r0, r0, #28
 810b61a:	4403      	add	r3, r0
 810b61c:	9305      	str	r3, [sp, #20]
 810b61e:	9b06      	ldr	r3, [sp, #24]
 810b620:	4403      	add	r3, r0
 810b622:	4405      	add	r5, r0
 810b624:	9306      	str	r3, [sp, #24]
 810b626:	9b05      	ldr	r3, [sp, #20]
 810b628:	2b00      	cmp	r3, #0
 810b62a:	dd05      	ble.n	810b638 <_dtoa_r+0x828>
 810b62c:	4651      	mov	r1, sl
 810b62e:	461a      	mov	r2, r3
 810b630:	4620      	mov	r0, r4
 810b632:	f000 fd39 	bl	810c0a8 <__lshift>
 810b636:	4682      	mov	sl, r0
 810b638:	9b06      	ldr	r3, [sp, #24]
 810b63a:	2b00      	cmp	r3, #0
 810b63c:	dd05      	ble.n	810b64a <_dtoa_r+0x83a>
 810b63e:	4631      	mov	r1, r6
 810b640:	461a      	mov	r2, r3
 810b642:	4620      	mov	r0, r4
 810b644:	f000 fd30 	bl	810c0a8 <__lshift>
 810b648:	4606      	mov	r6, r0
 810b64a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b64c:	2b00      	cmp	r3, #0
 810b64e:	d072      	beq.n	810b736 <_dtoa_r+0x926>
 810b650:	4631      	mov	r1, r6
 810b652:	4650      	mov	r0, sl
 810b654:	f000 fd94 	bl	810c180 <__mcmp>
 810b658:	2800      	cmp	r0, #0
 810b65a:	da6c      	bge.n	810b736 <_dtoa_r+0x926>
 810b65c:	2300      	movs	r3, #0
 810b65e:	4651      	mov	r1, sl
 810b660:	220a      	movs	r2, #10
 810b662:	4620      	mov	r0, r4
 810b664:	f000 fb28 	bl	810bcb8 <__multadd>
 810b668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b66a:	f10b 3bff 	add.w	fp, fp, #4294967295
 810b66e:	4682      	mov	sl, r0
 810b670:	2b00      	cmp	r3, #0
 810b672:	f000 81b0 	beq.w	810b9d6 <_dtoa_r+0xbc6>
 810b676:	2300      	movs	r3, #0
 810b678:	4639      	mov	r1, r7
 810b67a:	220a      	movs	r2, #10
 810b67c:	4620      	mov	r0, r4
 810b67e:	f000 fb1b 	bl	810bcb8 <__multadd>
 810b682:	9b01      	ldr	r3, [sp, #4]
 810b684:	2b00      	cmp	r3, #0
 810b686:	4607      	mov	r7, r0
 810b688:	f300 8096 	bgt.w	810b7b8 <_dtoa_r+0x9a8>
 810b68c:	9b07      	ldr	r3, [sp, #28]
 810b68e:	2b02      	cmp	r3, #2
 810b690:	dc59      	bgt.n	810b746 <_dtoa_r+0x936>
 810b692:	e091      	b.n	810b7b8 <_dtoa_r+0x9a8>
 810b694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b696:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810b69a:	e758      	b.n	810b54e <_dtoa_r+0x73e>
 810b69c:	9b04      	ldr	r3, [sp, #16]
 810b69e:	1e5e      	subs	r6, r3, #1
 810b6a0:	9b08      	ldr	r3, [sp, #32]
 810b6a2:	42b3      	cmp	r3, r6
 810b6a4:	bfbf      	itttt	lt
 810b6a6:	9b08      	ldrlt	r3, [sp, #32]
 810b6a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 810b6aa:	9608      	strlt	r6, [sp, #32]
 810b6ac:	1af3      	sublt	r3, r6, r3
 810b6ae:	bfb4      	ite	lt
 810b6b0:	18d2      	addlt	r2, r2, r3
 810b6b2:	1b9e      	subge	r6, r3, r6
 810b6b4:	9b04      	ldr	r3, [sp, #16]
 810b6b6:	bfbc      	itt	lt
 810b6b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 810b6ba:	2600      	movlt	r6, #0
 810b6bc:	2b00      	cmp	r3, #0
 810b6be:	bfb7      	itett	lt
 810b6c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 810b6c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 810b6c8:	1a9d      	sublt	r5, r3, r2
 810b6ca:	2300      	movlt	r3, #0
 810b6cc:	e741      	b.n	810b552 <_dtoa_r+0x742>
 810b6ce:	9e08      	ldr	r6, [sp, #32]
 810b6d0:	9d05      	ldr	r5, [sp, #20]
 810b6d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810b6d4:	e748      	b.n	810b568 <_dtoa_r+0x758>
 810b6d6:	9a08      	ldr	r2, [sp, #32]
 810b6d8:	e770      	b.n	810b5bc <_dtoa_r+0x7ac>
 810b6da:	9b07      	ldr	r3, [sp, #28]
 810b6dc:	2b01      	cmp	r3, #1
 810b6de:	dc19      	bgt.n	810b714 <_dtoa_r+0x904>
 810b6e0:	9b02      	ldr	r3, [sp, #8]
 810b6e2:	b9bb      	cbnz	r3, 810b714 <_dtoa_r+0x904>
 810b6e4:	9b03      	ldr	r3, [sp, #12]
 810b6e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b6ea:	b99b      	cbnz	r3, 810b714 <_dtoa_r+0x904>
 810b6ec:	9b03      	ldr	r3, [sp, #12]
 810b6ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810b6f2:	0d1b      	lsrs	r3, r3, #20
 810b6f4:	051b      	lsls	r3, r3, #20
 810b6f6:	b183      	cbz	r3, 810b71a <_dtoa_r+0x90a>
 810b6f8:	9b05      	ldr	r3, [sp, #20]
 810b6fa:	3301      	adds	r3, #1
 810b6fc:	9305      	str	r3, [sp, #20]
 810b6fe:	9b06      	ldr	r3, [sp, #24]
 810b700:	3301      	adds	r3, #1
 810b702:	9306      	str	r3, [sp, #24]
 810b704:	f04f 0801 	mov.w	r8, #1
 810b708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b70a:	2b00      	cmp	r3, #0
 810b70c:	f47f af6f 	bne.w	810b5ee <_dtoa_r+0x7de>
 810b710:	2001      	movs	r0, #1
 810b712:	e774      	b.n	810b5fe <_dtoa_r+0x7ee>
 810b714:	f04f 0800 	mov.w	r8, #0
 810b718:	e7f6      	b.n	810b708 <_dtoa_r+0x8f8>
 810b71a:	4698      	mov	r8, r3
 810b71c:	e7f4      	b.n	810b708 <_dtoa_r+0x8f8>
 810b71e:	d082      	beq.n	810b626 <_dtoa_r+0x816>
 810b720:	9a05      	ldr	r2, [sp, #20]
 810b722:	331c      	adds	r3, #28
 810b724:	441a      	add	r2, r3
 810b726:	9205      	str	r2, [sp, #20]
 810b728:	9a06      	ldr	r2, [sp, #24]
 810b72a:	441a      	add	r2, r3
 810b72c:	441d      	add	r5, r3
 810b72e:	9206      	str	r2, [sp, #24]
 810b730:	e779      	b.n	810b626 <_dtoa_r+0x816>
 810b732:	4603      	mov	r3, r0
 810b734:	e7f4      	b.n	810b720 <_dtoa_r+0x910>
 810b736:	9b04      	ldr	r3, [sp, #16]
 810b738:	2b00      	cmp	r3, #0
 810b73a:	dc37      	bgt.n	810b7ac <_dtoa_r+0x99c>
 810b73c:	9b07      	ldr	r3, [sp, #28]
 810b73e:	2b02      	cmp	r3, #2
 810b740:	dd34      	ble.n	810b7ac <_dtoa_r+0x99c>
 810b742:	9b04      	ldr	r3, [sp, #16]
 810b744:	9301      	str	r3, [sp, #4]
 810b746:	9b01      	ldr	r3, [sp, #4]
 810b748:	b963      	cbnz	r3, 810b764 <_dtoa_r+0x954>
 810b74a:	4631      	mov	r1, r6
 810b74c:	2205      	movs	r2, #5
 810b74e:	4620      	mov	r0, r4
 810b750:	f000 fab2 	bl	810bcb8 <__multadd>
 810b754:	4601      	mov	r1, r0
 810b756:	4606      	mov	r6, r0
 810b758:	4650      	mov	r0, sl
 810b75a:	f000 fd11 	bl	810c180 <__mcmp>
 810b75e:	2800      	cmp	r0, #0
 810b760:	f73f adbb 	bgt.w	810b2da <_dtoa_r+0x4ca>
 810b764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b766:	9d00      	ldr	r5, [sp, #0]
 810b768:	ea6f 0b03 	mvn.w	fp, r3
 810b76c:	f04f 0800 	mov.w	r8, #0
 810b770:	4631      	mov	r1, r6
 810b772:	4620      	mov	r0, r4
 810b774:	f000 fa7e 	bl	810bc74 <_Bfree>
 810b778:	2f00      	cmp	r7, #0
 810b77a:	f43f aeab 	beq.w	810b4d4 <_dtoa_r+0x6c4>
 810b77e:	f1b8 0f00 	cmp.w	r8, #0
 810b782:	d005      	beq.n	810b790 <_dtoa_r+0x980>
 810b784:	45b8      	cmp	r8, r7
 810b786:	d003      	beq.n	810b790 <_dtoa_r+0x980>
 810b788:	4641      	mov	r1, r8
 810b78a:	4620      	mov	r0, r4
 810b78c:	f000 fa72 	bl	810bc74 <_Bfree>
 810b790:	4639      	mov	r1, r7
 810b792:	4620      	mov	r0, r4
 810b794:	f000 fa6e 	bl	810bc74 <_Bfree>
 810b798:	e69c      	b.n	810b4d4 <_dtoa_r+0x6c4>
 810b79a:	2600      	movs	r6, #0
 810b79c:	4637      	mov	r7, r6
 810b79e:	e7e1      	b.n	810b764 <_dtoa_r+0x954>
 810b7a0:	46bb      	mov	fp, r7
 810b7a2:	4637      	mov	r7, r6
 810b7a4:	e599      	b.n	810b2da <_dtoa_r+0x4ca>
 810b7a6:	bf00      	nop
 810b7a8:	40240000 	.word	0x40240000
 810b7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b7ae:	2b00      	cmp	r3, #0
 810b7b0:	f000 80c8 	beq.w	810b944 <_dtoa_r+0xb34>
 810b7b4:	9b04      	ldr	r3, [sp, #16]
 810b7b6:	9301      	str	r3, [sp, #4]
 810b7b8:	2d00      	cmp	r5, #0
 810b7ba:	dd05      	ble.n	810b7c8 <_dtoa_r+0x9b8>
 810b7bc:	4639      	mov	r1, r7
 810b7be:	462a      	mov	r2, r5
 810b7c0:	4620      	mov	r0, r4
 810b7c2:	f000 fc71 	bl	810c0a8 <__lshift>
 810b7c6:	4607      	mov	r7, r0
 810b7c8:	f1b8 0f00 	cmp.w	r8, #0
 810b7cc:	d05b      	beq.n	810b886 <_dtoa_r+0xa76>
 810b7ce:	6879      	ldr	r1, [r7, #4]
 810b7d0:	4620      	mov	r0, r4
 810b7d2:	f000 fa0f 	bl	810bbf4 <_Balloc>
 810b7d6:	4605      	mov	r5, r0
 810b7d8:	b928      	cbnz	r0, 810b7e6 <_dtoa_r+0x9d6>
 810b7da:	4b83      	ldr	r3, [pc, #524]	; (810b9e8 <_dtoa_r+0xbd8>)
 810b7dc:	4602      	mov	r2, r0
 810b7de:	f240 21ef 	movw	r1, #751	; 0x2ef
 810b7e2:	f7ff bb2e 	b.w	810ae42 <_dtoa_r+0x32>
 810b7e6:	693a      	ldr	r2, [r7, #16]
 810b7e8:	3202      	adds	r2, #2
 810b7ea:	0092      	lsls	r2, r2, #2
 810b7ec:	f107 010c 	add.w	r1, r7, #12
 810b7f0:	300c      	adds	r0, #12
 810b7f2:	f002 f95f 	bl	810dab4 <memcpy>
 810b7f6:	2201      	movs	r2, #1
 810b7f8:	4629      	mov	r1, r5
 810b7fa:	4620      	mov	r0, r4
 810b7fc:	f000 fc54 	bl	810c0a8 <__lshift>
 810b800:	9b00      	ldr	r3, [sp, #0]
 810b802:	3301      	adds	r3, #1
 810b804:	9304      	str	r3, [sp, #16]
 810b806:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b80a:	4413      	add	r3, r2
 810b80c:	9308      	str	r3, [sp, #32]
 810b80e:	9b02      	ldr	r3, [sp, #8]
 810b810:	f003 0301 	and.w	r3, r3, #1
 810b814:	46b8      	mov	r8, r7
 810b816:	9306      	str	r3, [sp, #24]
 810b818:	4607      	mov	r7, r0
 810b81a:	9b04      	ldr	r3, [sp, #16]
 810b81c:	4631      	mov	r1, r6
 810b81e:	3b01      	subs	r3, #1
 810b820:	4650      	mov	r0, sl
 810b822:	9301      	str	r3, [sp, #4]
 810b824:	f7ff fa6a 	bl	810acfc <quorem>
 810b828:	4641      	mov	r1, r8
 810b82a:	9002      	str	r0, [sp, #8]
 810b82c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810b830:	4650      	mov	r0, sl
 810b832:	f000 fca5 	bl	810c180 <__mcmp>
 810b836:	463a      	mov	r2, r7
 810b838:	9005      	str	r0, [sp, #20]
 810b83a:	4631      	mov	r1, r6
 810b83c:	4620      	mov	r0, r4
 810b83e:	f000 fcbb 	bl	810c1b8 <__mdiff>
 810b842:	68c2      	ldr	r2, [r0, #12]
 810b844:	4605      	mov	r5, r0
 810b846:	bb02      	cbnz	r2, 810b88a <_dtoa_r+0xa7a>
 810b848:	4601      	mov	r1, r0
 810b84a:	4650      	mov	r0, sl
 810b84c:	f000 fc98 	bl	810c180 <__mcmp>
 810b850:	4602      	mov	r2, r0
 810b852:	4629      	mov	r1, r5
 810b854:	4620      	mov	r0, r4
 810b856:	9209      	str	r2, [sp, #36]	; 0x24
 810b858:	f000 fa0c 	bl	810bc74 <_Bfree>
 810b85c:	9b07      	ldr	r3, [sp, #28]
 810b85e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b860:	9d04      	ldr	r5, [sp, #16]
 810b862:	ea43 0102 	orr.w	r1, r3, r2
 810b866:	9b06      	ldr	r3, [sp, #24]
 810b868:	4319      	orrs	r1, r3
 810b86a:	d110      	bne.n	810b88e <_dtoa_r+0xa7e>
 810b86c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b870:	d029      	beq.n	810b8c6 <_dtoa_r+0xab6>
 810b872:	9b05      	ldr	r3, [sp, #20]
 810b874:	2b00      	cmp	r3, #0
 810b876:	dd02      	ble.n	810b87e <_dtoa_r+0xa6e>
 810b878:	9b02      	ldr	r3, [sp, #8]
 810b87a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 810b87e:	9b01      	ldr	r3, [sp, #4]
 810b880:	f883 9000 	strb.w	r9, [r3]
 810b884:	e774      	b.n	810b770 <_dtoa_r+0x960>
 810b886:	4638      	mov	r0, r7
 810b888:	e7ba      	b.n	810b800 <_dtoa_r+0x9f0>
 810b88a:	2201      	movs	r2, #1
 810b88c:	e7e1      	b.n	810b852 <_dtoa_r+0xa42>
 810b88e:	9b05      	ldr	r3, [sp, #20]
 810b890:	2b00      	cmp	r3, #0
 810b892:	db04      	blt.n	810b89e <_dtoa_r+0xa8e>
 810b894:	9907      	ldr	r1, [sp, #28]
 810b896:	430b      	orrs	r3, r1
 810b898:	9906      	ldr	r1, [sp, #24]
 810b89a:	430b      	orrs	r3, r1
 810b89c:	d120      	bne.n	810b8e0 <_dtoa_r+0xad0>
 810b89e:	2a00      	cmp	r2, #0
 810b8a0:	dded      	ble.n	810b87e <_dtoa_r+0xa6e>
 810b8a2:	4651      	mov	r1, sl
 810b8a4:	2201      	movs	r2, #1
 810b8a6:	4620      	mov	r0, r4
 810b8a8:	f000 fbfe 	bl	810c0a8 <__lshift>
 810b8ac:	4631      	mov	r1, r6
 810b8ae:	4682      	mov	sl, r0
 810b8b0:	f000 fc66 	bl	810c180 <__mcmp>
 810b8b4:	2800      	cmp	r0, #0
 810b8b6:	dc03      	bgt.n	810b8c0 <_dtoa_r+0xab0>
 810b8b8:	d1e1      	bne.n	810b87e <_dtoa_r+0xa6e>
 810b8ba:	f019 0f01 	tst.w	r9, #1
 810b8be:	d0de      	beq.n	810b87e <_dtoa_r+0xa6e>
 810b8c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b8c4:	d1d8      	bne.n	810b878 <_dtoa_r+0xa68>
 810b8c6:	9a01      	ldr	r2, [sp, #4]
 810b8c8:	2339      	movs	r3, #57	; 0x39
 810b8ca:	7013      	strb	r3, [r2, #0]
 810b8cc:	462b      	mov	r3, r5
 810b8ce:	461d      	mov	r5, r3
 810b8d0:	3b01      	subs	r3, #1
 810b8d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810b8d6:	2a39      	cmp	r2, #57	; 0x39
 810b8d8:	d06c      	beq.n	810b9b4 <_dtoa_r+0xba4>
 810b8da:	3201      	adds	r2, #1
 810b8dc:	701a      	strb	r2, [r3, #0]
 810b8de:	e747      	b.n	810b770 <_dtoa_r+0x960>
 810b8e0:	2a00      	cmp	r2, #0
 810b8e2:	dd07      	ble.n	810b8f4 <_dtoa_r+0xae4>
 810b8e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b8e8:	d0ed      	beq.n	810b8c6 <_dtoa_r+0xab6>
 810b8ea:	9a01      	ldr	r2, [sp, #4]
 810b8ec:	f109 0301 	add.w	r3, r9, #1
 810b8f0:	7013      	strb	r3, [r2, #0]
 810b8f2:	e73d      	b.n	810b770 <_dtoa_r+0x960>
 810b8f4:	9b04      	ldr	r3, [sp, #16]
 810b8f6:	9a08      	ldr	r2, [sp, #32]
 810b8f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 810b8fc:	4293      	cmp	r3, r2
 810b8fe:	d043      	beq.n	810b988 <_dtoa_r+0xb78>
 810b900:	4651      	mov	r1, sl
 810b902:	2300      	movs	r3, #0
 810b904:	220a      	movs	r2, #10
 810b906:	4620      	mov	r0, r4
 810b908:	f000 f9d6 	bl	810bcb8 <__multadd>
 810b90c:	45b8      	cmp	r8, r7
 810b90e:	4682      	mov	sl, r0
 810b910:	f04f 0300 	mov.w	r3, #0
 810b914:	f04f 020a 	mov.w	r2, #10
 810b918:	4641      	mov	r1, r8
 810b91a:	4620      	mov	r0, r4
 810b91c:	d107      	bne.n	810b92e <_dtoa_r+0xb1e>
 810b91e:	f000 f9cb 	bl	810bcb8 <__multadd>
 810b922:	4680      	mov	r8, r0
 810b924:	4607      	mov	r7, r0
 810b926:	9b04      	ldr	r3, [sp, #16]
 810b928:	3301      	adds	r3, #1
 810b92a:	9304      	str	r3, [sp, #16]
 810b92c:	e775      	b.n	810b81a <_dtoa_r+0xa0a>
 810b92e:	f000 f9c3 	bl	810bcb8 <__multadd>
 810b932:	4639      	mov	r1, r7
 810b934:	4680      	mov	r8, r0
 810b936:	2300      	movs	r3, #0
 810b938:	220a      	movs	r2, #10
 810b93a:	4620      	mov	r0, r4
 810b93c:	f000 f9bc 	bl	810bcb8 <__multadd>
 810b940:	4607      	mov	r7, r0
 810b942:	e7f0      	b.n	810b926 <_dtoa_r+0xb16>
 810b944:	9b04      	ldr	r3, [sp, #16]
 810b946:	9301      	str	r3, [sp, #4]
 810b948:	9d00      	ldr	r5, [sp, #0]
 810b94a:	4631      	mov	r1, r6
 810b94c:	4650      	mov	r0, sl
 810b94e:	f7ff f9d5 	bl	810acfc <quorem>
 810b952:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810b956:	9b00      	ldr	r3, [sp, #0]
 810b958:	f805 9b01 	strb.w	r9, [r5], #1
 810b95c:	1aea      	subs	r2, r5, r3
 810b95e:	9b01      	ldr	r3, [sp, #4]
 810b960:	4293      	cmp	r3, r2
 810b962:	dd07      	ble.n	810b974 <_dtoa_r+0xb64>
 810b964:	4651      	mov	r1, sl
 810b966:	2300      	movs	r3, #0
 810b968:	220a      	movs	r2, #10
 810b96a:	4620      	mov	r0, r4
 810b96c:	f000 f9a4 	bl	810bcb8 <__multadd>
 810b970:	4682      	mov	sl, r0
 810b972:	e7ea      	b.n	810b94a <_dtoa_r+0xb3a>
 810b974:	9b01      	ldr	r3, [sp, #4]
 810b976:	2b00      	cmp	r3, #0
 810b978:	bfc8      	it	gt
 810b97a:	461d      	movgt	r5, r3
 810b97c:	9b00      	ldr	r3, [sp, #0]
 810b97e:	bfd8      	it	le
 810b980:	2501      	movle	r5, #1
 810b982:	441d      	add	r5, r3
 810b984:	f04f 0800 	mov.w	r8, #0
 810b988:	4651      	mov	r1, sl
 810b98a:	2201      	movs	r2, #1
 810b98c:	4620      	mov	r0, r4
 810b98e:	f000 fb8b 	bl	810c0a8 <__lshift>
 810b992:	4631      	mov	r1, r6
 810b994:	4682      	mov	sl, r0
 810b996:	f000 fbf3 	bl	810c180 <__mcmp>
 810b99a:	2800      	cmp	r0, #0
 810b99c:	dc96      	bgt.n	810b8cc <_dtoa_r+0xabc>
 810b99e:	d102      	bne.n	810b9a6 <_dtoa_r+0xb96>
 810b9a0:	f019 0f01 	tst.w	r9, #1
 810b9a4:	d192      	bne.n	810b8cc <_dtoa_r+0xabc>
 810b9a6:	462b      	mov	r3, r5
 810b9a8:	461d      	mov	r5, r3
 810b9aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b9ae:	2a30      	cmp	r2, #48	; 0x30
 810b9b0:	d0fa      	beq.n	810b9a8 <_dtoa_r+0xb98>
 810b9b2:	e6dd      	b.n	810b770 <_dtoa_r+0x960>
 810b9b4:	9a00      	ldr	r2, [sp, #0]
 810b9b6:	429a      	cmp	r2, r3
 810b9b8:	d189      	bne.n	810b8ce <_dtoa_r+0xabe>
 810b9ba:	f10b 0b01 	add.w	fp, fp, #1
 810b9be:	2331      	movs	r3, #49	; 0x31
 810b9c0:	e796      	b.n	810b8f0 <_dtoa_r+0xae0>
 810b9c2:	4b0a      	ldr	r3, [pc, #40]	; (810b9ec <_dtoa_r+0xbdc>)
 810b9c4:	f7ff ba99 	b.w	810aefa <_dtoa_r+0xea>
 810b9c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b9ca:	2b00      	cmp	r3, #0
 810b9cc:	f47f aa6d 	bne.w	810aeaa <_dtoa_r+0x9a>
 810b9d0:	4b07      	ldr	r3, [pc, #28]	; (810b9f0 <_dtoa_r+0xbe0>)
 810b9d2:	f7ff ba92 	b.w	810aefa <_dtoa_r+0xea>
 810b9d6:	9b01      	ldr	r3, [sp, #4]
 810b9d8:	2b00      	cmp	r3, #0
 810b9da:	dcb5      	bgt.n	810b948 <_dtoa_r+0xb38>
 810b9dc:	9b07      	ldr	r3, [sp, #28]
 810b9de:	2b02      	cmp	r3, #2
 810b9e0:	f73f aeb1 	bgt.w	810b746 <_dtoa_r+0x936>
 810b9e4:	e7b0      	b.n	810b948 <_dtoa_r+0xb38>
 810b9e6:	bf00      	nop
 810b9e8:	0810e91d 	.word	0x0810e91d
 810b9ec:	0810e878 	.word	0x0810e878
 810b9f0:	0810e8a1 	.word	0x0810e8a1

0810b9f4 <_free_r>:
 810b9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810b9f6:	2900      	cmp	r1, #0
 810b9f8:	d044      	beq.n	810ba84 <_free_r+0x90>
 810b9fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b9fe:	9001      	str	r0, [sp, #4]
 810ba00:	2b00      	cmp	r3, #0
 810ba02:	f1a1 0404 	sub.w	r4, r1, #4
 810ba06:	bfb8      	it	lt
 810ba08:	18e4      	addlt	r4, r4, r3
 810ba0a:	f000 f8e7 	bl	810bbdc <__malloc_lock>
 810ba0e:	4a1e      	ldr	r2, [pc, #120]	; (810ba88 <_free_r+0x94>)
 810ba10:	9801      	ldr	r0, [sp, #4]
 810ba12:	6813      	ldr	r3, [r2, #0]
 810ba14:	b933      	cbnz	r3, 810ba24 <_free_r+0x30>
 810ba16:	6063      	str	r3, [r4, #4]
 810ba18:	6014      	str	r4, [r2, #0]
 810ba1a:	b003      	add	sp, #12
 810ba1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810ba20:	f000 b8e2 	b.w	810bbe8 <__malloc_unlock>
 810ba24:	42a3      	cmp	r3, r4
 810ba26:	d908      	bls.n	810ba3a <_free_r+0x46>
 810ba28:	6825      	ldr	r5, [r4, #0]
 810ba2a:	1961      	adds	r1, r4, r5
 810ba2c:	428b      	cmp	r3, r1
 810ba2e:	bf01      	itttt	eq
 810ba30:	6819      	ldreq	r1, [r3, #0]
 810ba32:	685b      	ldreq	r3, [r3, #4]
 810ba34:	1949      	addeq	r1, r1, r5
 810ba36:	6021      	streq	r1, [r4, #0]
 810ba38:	e7ed      	b.n	810ba16 <_free_r+0x22>
 810ba3a:	461a      	mov	r2, r3
 810ba3c:	685b      	ldr	r3, [r3, #4]
 810ba3e:	b10b      	cbz	r3, 810ba44 <_free_r+0x50>
 810ba40:	42a3      	cmp	r3, r4
 810ba42:	d9fa      	bls.n	810ba3a <_free_r+0x46>
 810ba44:	6811      	ldr	r1, [r2, #0]
 810ba46:	1855      	adds	r5, r2, r1
 810ba48:	42a5      	cmp	r5, r4
 810ba4a:	d10b      	bne.n	810ba64 <_free_r+0x70>
 810ba4c:	6824      	ldr	r4, [r4, #0]
 810ba4e:	4421      	add	r1, r4
 810ba50:	1854      	adds	r4, r2, r1
 810ba52:	42a3      	cmp	r3, r4
 810ba54:	6011      	str	r1, [r2, #0]
 810ba56:	d1e0      	bne.n	810ba1a <_free_r+0x26>
 810ba58:	681c      	ldr	r4, [r3, #0]
 810ba5a:	685b      	ldr	r3, [r3, #4]
 810ba5c:	6053      	str	r3, [r2, #4]
 810ba5e:	440c      	add	r4, r1
 810ba60:	6014      	str	r4, [r2, #0]
 810ba62:	e7da      	b.n	810ba1a <_free_r+0x26>
 810ba64:	d902      	bls.n	810ba6c <_free_r+0x78>
 810ba66:	230c      	movs	r3, #12
 810ba68:	6003      	str	r3, [r0, #0]
 810ba6a:	e7d6      	b.n	810ba1a <_free_r+0x26>
 810ba6c:	6825      	ldr	r5, [r4, #0]
 810ba6e:	1961      	adds	r1, r4, r5
 810ba70:	428b      	cmp	r3, r1
 810ba72:	bf04      	itt	eq
 810ba74:	6819      	ldreq	r1, [r3, #0]
 810ba76:	685b      	ldreq	r3, [r3, #4]
 810ba78:	6063      	str	r3, [r4, #4]
 810ba7a:	bf04      	itt	eq
 810ba7c:	1949      	addeq	r1, r1, r5
 810ba7e:	6021      	streq	r1, [r4, #0]
 810ba80:	6054      	str	r4, [r2, #4]
 810ba82:	e7ca      	b.n	810ba1a <_free_r+0x26>
 810ba84:	b003      	add	sp, #12
 810ba86:	bd30      	pop	{r4, r5, pc}
 810ba88:	100006ac 	.word	0x100006ac

0810ba8c <malloc>:
 810ba8c:	4b02      	ldr	r3, [pc, #8]	; (810ba98 <malloc+0xc>)
 810ba8e:	4601      	mov	r1, r0
 810ba90:	6818      	ldr	r0, [r3, #0]
 810ba92:	f000 b823 	b.w	810badc <_malloc_r>
 810ba96:	bf00      	nop
 810ba98:	100000c8 	.word	0x100000c8

0810ba9c <sbrk_aligned>:
 810ba9c:	b570      	push	{r4, r5, r6, lr}
 810ba9e:	4e0e      	ldr	r6, [pc, #56]	; (810bad8 <sbrk_aligned+0x3c>)
 810baa0:	460c      	mov	r4, r1
 810baa2:	6831      	ldr	r1, [r6, #0]
 810baa4:	4605      	mov	r5, r0
 810baa6:	b911      	cbnz	r1, 810baae <sbrk_aligned+0x12>
 810baa8:	f001 fff4 	bl	810da94 <_sbrk_r>
 810baac:	6030      	str	r0, [r6, #0]
 810baae:	4621      	mov	r1, r4
 810bab0:	4628      	mov	r0, r5
 810bab2:	f001 ffef 	bl	810da94 <_sbrk_r>
 810bab6:	1c43      	adds	r3, r0, #1
 810bab8:	d00a      	beq.n	810bad0 <sbrk_aligned+0x34>
 810baba:	1cc4      	adds	r4, r0, #3
 810babc:	f024 0403 	bic.w	r4, r4, #3
 810bac0:	42a0      	cmp	r0, r4
 810bac2:	d007      	beq.n	810bad4 <sbrk_aligned+0x38>
 810bac4:	1a21      	subs	r1, r4, r0
 810bac6:	4628      	mov	r0, r5
 810bac8:	f001 ffe4 	bl	810da94 <_sbrk_r>
 810bacc:	3001      	adds	r0, #1
 810bace:	d101      	bne.n	810bad4 <sbrk_aligned+0x38>
 810bad0:	f04f 34ff 	mov.w	r4, #4294967295
 810bad4:	4620      	mov	r0, r4
 810bad6:	bd70      	pop	{r4, r5, r6, pc}
 810bad8:	100006b0 	.word	0x100006b0

0810badc <_malloc_r>:
 810badc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bae0:	1ccd      	adds	r5, r1, #3
 810bae2:	f025 0503 	bic.w	r5, r5, #3
 810bae6:	3508      	adds	r5, #8
 810bae8:	2d0c      	cmp	r5, #12
 810baea:	bf38      	it	cc
 810baec:	250c      	movcc	r5, #12
 810baee:	2d00      	cmp	r5, #0
 810baf0:	4607      	mov	r7, r0
 810baf2:	db01      	blt.n	810baf8 <_malloc_r+0x1c>
 810baf4:	42a9      	cmp	r1, r5
 810baf6:	d905      	bls.n	810bb04 <_malloc_r+0x28>
 810baf8:	230c      	movs	r3, #12
 810bafa:	603b      	str	r3, [r7, #0]
 810bafc:	2600      	movs	r6, #0
 810bafe:	4630      	mov	r0, r6
 810bb00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bb04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 810bbd8 <_malloc_r+0xfc>
 810bb08:	f000 f868 	bl	810bbdc <__malloc_lock>
 810bb0c:	f8d8 3000 	ldr.w	r3, [r8]
 810bb10:	461c      	mov	r4, r3
 810bb12:	bb5c      	cbnz	r4, 810bb6c <_malloc_r+0x90>
 810bb14:	4629      	mov	r1, r5
 810bb16:	4638      	mov	r0, r7
 810bb18:	f7ff ffc0 	bl	810ba9c <sbrk_aligned>
 810bb1c:	1c43      	adds	r3, r0, #1
 810bb1e:	4604      	mov	r4, r0
 810bb20:	d155      	bne.n	810bbce <_malloc_r+0xf2>
 810bb22:	f8d8 4000 	ldr.w	r4, [r8]
 810bb26:	4626      	mov	r6, r4
 810bb28:	2e00      	cmp	r6, #0
 810bb2a:	d145      	bne.n	810bbb8 <_malloc_r+0xdc>
 810bb2c:	2c00      	cmp	r4, #0
 810bb2e:	d048      	beq.n	810bbc2 <_malloc_r+0xe6>
 810bb30:	6823      	ldr	r3, [r4, #0]
 810bb32:	4631      	mov	r1, r6
 810bb34:	4638      	mov	r0, r7
 810bb36:	eb04 0903 	add.w	r9, r4, r3
 810bb3a:	f001 ffab 	bl	810da94 <_sbrk_r>
 810bb3e:	4581      	cmp	r9, r0
 810bb40:	d13f      	bne.n	810bbc2 <_malloc_r+0xe6>
 810bb42:	6821      	ldr	r1, [r4, #0]
 810bb44:	1a6d      	subs	r5, r5, r1
 810bb46:	4629      	mov	r1, r5
 810bb48:	4638      	mov	r0, r7
 810bb4a:	f7ff ffa7 	bl	810ba9c <sbrk_aligned>
 810bb4e:	3001      	adds	r0, #1
 810bb50:	d037      	beq.n	810bbc2 <_malloc_r+0xe6>
 810bb52:	6823      	ldr	r3, [r4, #0]
 810bb54:	442b      	add	r3, r5
 810bb56:	6023      	str	r3, [r4, #0]
 810bb58:	f8d8 3000 	ldr.w	r3, [r8]
 810bb5c:	2b00      	cmp	r3, #0
 810bb5e:	d038      	beq.n	810bbd2 <_malloc_r+0xf6>
 810bb60:	685a      	ldr	r2, [r3, #4]
 810bb62:	42a2      	cmp	r2, r4
 810bb64:	d12b      	bne.n	810bbbe <_malloc_r+0xe2>
 810bb66:	2200      	movs	r2, #0
 810bb68:	605a      	str	r2, [r3, #4]
 810bb6a:	e00f      	b.n	810bb8c <_malloc_r+0xb0>
 810bb6c:	6822      	ldr	r2, [r4, #0]
 810bb6e:	1b52      	subs	r2, r2, r5
 810bb70:	d41f      	bmi.n	810bbb2 <_malloc_r+0xd6>
 810bb72:	2a0b      	cmp	r2, #11
 810bb74:	d917      	bls.n	810bba6 <_malloc_r+0xca>
 810bb76:	1961      	adds	r1, r4, r5
 810bb78:	42a3      	cmp	r3, r4
 810bb7a:	6025      	str	r5, [r4, #0]
 810bb7c:	bf18      	it	ne
 810bb7e:	6059      	strne	r1, [r3, #4]
 810bb80:	6863      	ldr	r3, [r4, #4]
 810bb82:	bf08      	it	eq
 810bb84:	f8c8 1000 	streq.w	r1, [r8]
 810bb88:	5162      	str	r2, [r4, r5]
 810bb8a:	604b      	str	r3, [r1, #4]
 810bb8c:	4638      	mov	r0, r7
 810bb8e:	f104 060b 	add.w	r6, r4, #11
 810bb92:	f000 f829 	bl	810bbe8 <__malloc_unlock>
 810bb96:	f026 0607 	bic.w	r6, r6, #7
 810bb9a:	1d23      	adds	r3, r4, #4
 810bb9c:	1af2      	subs	r2, r6, r3
 810bb9e:	d0ae      	beq.n	810bafe <_malloc_r+0x22>
 810bba0:	1b9b      	subs	r3, r3, r6
 810bba2:	50a3      	str	r3, [r4, r2]
 810bba4:	e7ab      	b.n	810bafe <_malloc_r+0x22>
 810bba6:	42a3      	cmp	r3, r4
 810bba8:	6862      	ldr	r2, [r4, #4]
 810bbaa:	d1dd      	bne.n	810bb68 <_malloc_r+0x8c>
 810bbac:	f8c8 2000 	str.w	r2, [r8]
 810bbb0:	e7ec      	b.n	810bb8c <_malloc_r+0xb0>
 810bbb2:	4623      	mov	r3, r4
 810bbb4:	6864      	ldr	r4, [r4, #4]
 810bbb6:	e7ac      	b.n	810bb12 <_malloc_r+0x36>
 810bbb8:	4634      	mov	r4, r6
 810bbba:	6876      	ldr	r6, [r6, #4]
 810bbbc:	e7b4      	b.n	810bb28 <_malloc_r+0x4c>
 810bbbe:	4613      	mov	r3, r2
 810bbc0:	e7cc      	b.n	810bb5c <_malloc_r+0x80>
 810bbc2:	230c      	movs	r3, #12
 810bbc4:	603b      	str	r3, [r7, #0]
 810bbc6:	4638      	mov	r0, r7
 810bbc8:	f000 f80e 	bl	810bbe8 <__malloc_unlock>
 810bbcc:	e797      	b.n	810bafe <_malloc_r+0x22>
 810bbce:	6025      	str	r5, [r4, #0]
 810bbd0:	e7dc      	b.n	810bb8c <_malloc_r+0xb0>
 810bbd2:	605b      	str	r3, [r3, #4]
 810bbd4:	deff      	udf	#255	; 0xff
 810bbd6:	bf00      	nop
 810bbd8:	100006ac 	.word	0x100006ac

0810bbdc <__malloc_lock>:
 810bbdc:	4801      	ldr	r0, [pc, #4]	; (810bbe4 <__malloc_lock+0x8>)
 810bbde:	f7ff b884 	b.w	810acea <__retarget_lock_acquire_recursive>
 810bbe2:	bf00      	nop
 810bbe4:	100006a8 	.word	0x100006a8

0810bbe8 <__malloc_unlock>:
 810bbe8:	4801      	ldr	r0, [pc, #4]	; (810bbf0 <__malloc_unlock+0x8>)
 810bbea:	f7ff b87f 	b.w	810acec <__retarget_lock_release_recursive>
 810bbee:	bf00      	nop
 810bbf0:	100006a8 	.word	0x100006a8

0810bbf4 <_Balloc>:
 810bbf4:	b570      	push	{r4, r5, r6, lr}
 810bbf6:	69c6      	ldr	r6, [r0, #28]
 810bbf8:	4604      	mov	r4, r0
 810bbfa:	460d      	mov	r5, r1
 810bbfc:	b976      	cbnz	r6, 810bc1c <_Balloc+0x28>
 810bbfe:	2010      	movs	r0, #16
 810bc00:	f7ff ff44 	bl	810ba8c <malloc>
 810bc04:	4602      	mov	r2, r0
 810bc06:	61e0      	str	r0, [r4, #28]
 810bc08:	b920      	cbnz	r0, 810bc14 <_Balloc+0x20>
 810bc0a:	4b18      	ldr	r3, [pc, #96]	; (810bc6c <_Balloc+0x78>)
 810bc0c:	4818      	ldr	r0, [pc, #96]	; (810bc70 <_Balloc+0x7c>)
 810bc0e:	216b      	movs	r1, #107	; 0x6b
 810bc10:	f001 ff66 	bl	810dae0 <__assert_func>
 810bc14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810bc18:	6006      	str	r6, [r0, #0]
 810bc1a:	60c6      	str	r6, [r0, #12]
 810bc1c:	69e6      	ldr	r6, [r4, #28]
 810bc1e:	68f3      	ldr	r3, [r6, #12]
 810bc20:	b183      	cbz	r3, 810bc44 <_Balloc+0x50>
 810bc22:	69e3      	ldr	r3, [r4, #28]
 810bc24:	68db      	ldr	r3, [r3, #12]
 810bc26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810bc2a:	b9b8      	cbnz	r0, 810bc5c <_Balloc+0x68>
 810bc2c:	2101      	movs	r1, #1
 810bc2e:	fa01 f605 	lsl.w	r6, r1, r5
 810bc32:	1d72      	adds	r2, r6, #5
 810bc34:	0092      	lsls	r2, r2, #2
 810bc36:	4620      	mov	r0, r4
 810bc38:	f001 ff70 	bl	810db1c <_calloc_r>
 810bc3c:	b160      	cbz	r0, 810bc58 <_Balloc+0x64>
 810bc3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810bc42:	e00e      	b.n	810bc62 <_Balloc+0x6e>
 810bc44:	2221      	movs	r2, #33	; 0x21
 810bc46:	2104      	movs	r1, #4
 810bc48:	4620      	mov	r0, r4
 810bc4a:	f001 ff67 	bl	810db1c <_calloc_r>
 810bc4e:	69e3      	ldr	r3, [r4, #28]
 810bc50:	60f0      	str	r0, [r6, #12]
 810bc52:	68db      	ldr	r3, [r3, #12]
 810bc54:	2b00      	cmp	r3, #0
 810bc56:	d1e4      	bne.n	810bc22 <_Balloc+0x2e>
 810bc58:	2000      	movs	r0, #0
 810bc5a:	bd70      	pop	{r4, r5, r6, pc}
 810bc5c:	6802      	ldr	r2, [r0, #0]
 810bc5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810bc62:	2300      	movs	r3, #0
 810bc64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810bc68:	e7f7      	b.n	810bc5a <_Balloc+0x66>
 810bc6a:	bf00      	nop
 810bc6c:	0810e8ae 	.word	0x0810e8ae
 810bc70:	0810e92e 	.word	0x0810e92e

0810bc74 <_Bfree>:
 810bc74:	b570      	push	{r4, r5, r6, lr}
 810bc76:	69c6      	ldr	r6, [r0, #28]
 810bc78:	4605      	mov	r5, r0
 810bc7a:	460c      	mov	r4, r1
 810bc7c:	b976      	cbnz	r6, 810bc9c <_Bfree+0x28>
 810bc7e:	2010      	movs	r0, #16
 810bc80:	f7ff ff04 	bl	810ba8c <malloc>
 810bc84:	4602      	mov	r2, r0
 810bc86:	61e8      	str	r0, [r5, #28]
 810bc88:	b920      	cbnz	r0, 810bc94 <_Bfree+0x20>
 810bc8a:	4b09      	ldr	r3, [pc, #36]	; (810bcb0 <_Bfree+0x3c>)
 810bc8c:	4809      	ldr	r0, [pc, #36]	; (810bcb4 <_Bfree+0x40>)
 810bc8e:	218f      	movs	r1, #143	; 0x8f
 810bc90:	f001 ff26 	bl	810dae0 <__assert_func>
 810bc94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810bc98:	6006      	str	r6, [r0, #0]
 810bc9a:	60c6      	str	r6, [r0, #12]
 810bc9c:	b13c      	cbz	r4, 810bcae <_Bfree+0x3a>
 810bc9e:	69eb      	ldr	r3, [r5, #28]
 810bca0:	6862      	ldr	r2, [r4, #4]
 810bca2:	68db      	ldr	r3, [r3, #12]
 810bca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810bca8:	6021      	str	r1, [r4, #0]
 810bcaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810bcae:	bd70      	pop	{r4, r5, r6, pc}
 810bcb0:	0810e8ae 	.word	0x0810e8ae
 810bcb4:	0810e92e 	.word	0x0810e92e

0810bcb8 <__multadd>:
 810bcb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bcbc:	690d      	ldr	r5, [r1, #16]
 810bcbe:	4607      	mov	r7, r0
 810bcc0:	460c      	mov	r4, r1
 810bcc2:	461e      	mov	r6, r3
 810bcc4:	f101 0c14 	add.w	ip, r1, #20
 810bcc8:	2000      	movs	r0, #0
 810bcca:	f8dc 3000 	ldr.w	r3, [ip]
 810bcce:	b299      	uxth	r1, r3
 810bcd0:	fb02 6101 	mla	r1, r2, r1, r6
 810bcd4:	0c1e      	lsrs	r6, r3, #16
 810bcd6:	0c0b      	lsrs	r3, r1, #16
 810bcd8:	fb02 3306 	mla	r3, r2, r6, r3
 810bcdc:	b289      	uxth	r1, r1
 810bcde:	3001      	adds	r0, #1
 810bce0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810bce4:	4285      	cmp	r5, r0
 810bce6:	f84c 1b04 	str.w	r1, [ip], #4
 810bcea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810bcee:	dcec      	bgt.n	810bcca <__multadd+0x12>
 810bcf0:	b30e      	cbz	r6, 810bd36 <__multadd+0x7e>
 810bcf2:	68a3      	ldr	r3, [r4, #8]
 810bcf4:	42ab      	cmp	r3, r5
 810bcf6:	dc19      	bgt.n	810bd2c <__multadd+0x74>
 810bcf8:	6861      	ldr	r1, [r4, #4]
 810bcfa:	4638      	mov	r0, r7
 810bcfc:	3101      	adds	r1, #1
 810bcfe:	f7ff ff79 	bl	810bbf4 <_Balloc>
 810bd02:	4680      	mov	r8, r0
 810bd04:	b928      	cbnz	r0, 810bd12 <__multadd+0x5a>
 810bd06:	4602      	mov	r2, r0
 810bd08:	4b0c      	ldr	r3, [pc, #48]	; (810bd3c <__multadd+0x84>)
 810bd0a:	480d      	ldr	r0, [pc, #52]	; (810bd40 <__multadd+0x88>)
 810bd0c:	21ba      	movs	r1, #186	; 0xba
 810bd0e:	f001 fee7 	bl	810dae0 <__assert_func>
 810bd12:	6922      	ldr	r2, [r4, #16]
 810bd14:	3202      	adds	r2, #2
 810bd16:	f104 010c 	add.w	r1, r4, #12
 810bd1a:	0092      	lsls	r2, r2, #2
 810bd1c:	300c      	adds	r0, #12
 810bd1e:	f001 fec9 	bl	810dab4 <memcpy>
 810bd22:	4621      	mov	r1, r4
 810bd24:	4638      	mov	r0, r7
 810bd26:	f7ff ffa5 	bl	810bc74 <_Bfree>
 810bd2a:	4644      	mov	r4, r8
 810bd2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810bd30:	3501      	adds	r5, #1
 810bd32:	615e      	str	r6, [r3, #20]
 810bd34:	6125      	str	r5, [r4, #16]
 810bd36:	4620      	mov	r0, r4
 810bd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810bd3c:	0810e91d 	.word	0x0810e91d
 810bd40:	0810e92e 	.word	0x0810e92e

0810bd44 <__s2b>:
 810bd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bd48:	460c      	mov	r4, r1
 810bd4a:	4615      	mov	r5, r2
 810bd4c:	461f      	mov	r7, r3
 810bd4e:	2209      	movs	r2, #9
 810bd50:	3308      	adds	r3, #8
 810bd52:	4606      	mov	r6, r0
 810bd54:	fb93 f3f2 	sdiv	r3, r3, r2
 810bd58:	2100      	movs	r1, #0
 810bd5a:	2201      	movs	r2, #1
 810bd5c:	429a      	cmp	r2, r3
 810bd5e:	db09      	blt.n	810bd74 <__s2b+0x30>
 810bd60:	4630      	mov	r0, r6
 810bd62:	f7ff ff47 	bl	810bbf4 <_Balloc>
 810bd66:	b940      	cbnz	r0, 810bd7a <__s2b+0x36>
 810bd68:	4602      	mov	r2, r0
 810bd6a:	4b19      	ldr	r3, [pc, #100]	; (810bdd0 <__s2b+0x8c>)
 810bd6c:	4819      	ldr	r0, [pc, #100]	; (810bdd4 <__s2b+0x90>)
 810bd6e:	21d3      	movs	r1, #211	; 0xd3
 810bd70:	f001 feb6 	bl	810dae0 <__assert_func>
 810bd74:	0052      	lsls	r2, r2, #1
 810bd76:	3101      	adds	r1, #1
 810bd78:	e7f0      	b.n	810bd5c <__s2b+0x18>
 810bd7a:	9b08      	ldr	r3, [sp, #32]
 810bd7c:	6143      	str	r3, [r0, #20]
 810bd7e:	2d09      	cmp	r5, #9
 810bd80:	f04f 0301 	mov.w	r3, #1
 810bd84:	6103      	str	r3, [r0, #16]
 810bd86:	dd16      	ble.n	810bdb6 <__s2b+0x72>
 810bd88:	f104 0909 	add.w	r9, r4, #9
 810bd8c:	46c8      	mov	r8, r9
 810bd8e:	442c      	add	r4, r5
 810bd90:	f818 3b01 	ldrb.w	r3, [r8], #1
 810bd94:	4601      	mov	r1, r0
 810bd96:	3b30      	subs	r3, #48	; 0x30
 810bd98:	220a      	movs	r2, #10
 810bd9a:	4630      	mov	r0, r6
 810bd9c:	f7ff ff8c 	bl	810bcb8 <__multadd>
 810bda0:	45a0      	cmp	r8, r4
 810bda2:	d1f5      	bne.n	810bd90 <__s2b+0x4c>
 810bda4:	f1a5 0408 	sub.w	r4, r5, #8
 810bda8:	444c      	add	r4, r9
 810bdaa:	1b2d      	subs	r5, r5, r4
 810bdac:	1963      	adds	r3, r4, r5
 810bdae:	42bb      	cmp	r3, r7
 810bdb0:	db04      	blt.n	810bdbc <__s2b+0x78>
 810bdb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bdb6:	340a      	adds	r4, #10
 810bdb8:	2509      	movs	r5, #9
 810bdba:	e7f6      	b.n	810bdaa <__s2b+0x66>
 810bdbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 810bdc0:	4601      	mov	r1, r0
 810bdc2:	3b30      	subs	r3, #48	; 0x30
 810bdc4:	220a      	movs	r2, #10
 810bdc6:	4630      	mov	r0, r6
 810bdc8:	f7ff ff76 	bl	810bcb8 <__multadd>
 810bdcc:	e7ee      	b.n	810bdac <__s2b+0x68>
 810bdce:	bf00      	nop
 810bdd0:	0810e91d 	.word	0x0810e91d
 810bdd4:	0810e92e 	.word	0x0810e92e

0810bdd8 <__hi0bits>:
 810bdd8:	0c03      	lsrs	r3, r0, #16
 810bdda:	041b      	lsls	r3, r3, #16
 810bddc:	b9d3      	cbnz	r3, 810be14 <__hi0bits+0x3c>
 810bdde:	0400      	lsls	r0, r0, #16
 810bde0:	2310      	movs	r3, #16
 810bde2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810bde6:	bf04      	itt	eq
 810bde8:	0200      	lsleq	r0, r0, #8
 810bdea:	3308      	addeq	r3, #8
 810bdec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810bdf0:	bf04      	itt	eq
 810bdf2:	0100      	lsleq	r0, r0, #4
 810bdf4:	3304      	addeq	r3, #4
 810bdf6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810bdfa:	bf04      	itt	eq
 810bdfc:	0080      	lsleq	r0, r0, #2
 810bdfe:	3302      	addeq	r3, #2
 810be00:	2800      	cmp	r0, #0
 810be02:	db05      	blt.n	810be10 <__hi0bits+0x38>
 810be04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810be08:	f103 0301 	add.w	r3, r3, #1
 810be0c:	bf08      	it	eq
 810be0e:	2320      	moveq	r3, #32
 810be10:	4618      	mov	r0, r3
 810be12:	4770      	bx	lr
 810be14:	2300      	movs	r3, #0
 810be16:	e7e4      	b.n	810bde2 <__hi0bits+0xa>

0810be18 <__lo0bits>:
 810be18:	6803      	ldr	r3, [r0, #0]
 810be1a:	f013 0207 	ands.w	r2, r3, #7
 810be1e:	d00c      	beq.n	810be3a <__lo0bits+0x22>
 810be20:	07d9      	lsls	r1, r3, #31
 810be22:	d422      	bmi.n	810be6a <__lo0bits+0x52>
 810be24:	079a      	lsls	r2, r3, #30
 810be26:	bf49      	itett	mi
 810be28:	085b      	lsrmi	r3, r3, #1
 810be2a:	089b      	lsrpl	r3, r3, #2
 810be2c:	6003      	strmi	r3, [r0, #0]
 810be2e:	2201      	movmi	r2, #1
 810be30:	bf5c      	itt	pl
 810be32:	6003      	strpl	r3, [r0, #0]
 810be34:	2202      	movpl	r2, #2
 810be36:	4610      	mov	r0, r2
 810be38:	4770      	bx	lr
 810be3a:	b299      	uxth	r1, r3
 810be3c:	b909      	cbnz	r1, 810be42 <__lo0bits+0x2a>
 810be3e:	0c1b      	lsrs	r3, r3, #16
 810be40:	2210      	movs	r2, #16
 810be42:	b2d9      	uxtb	r1, r3
 810be44:	b909      	cbnz	r1, 810be4a <__lo0bits+0x32>
 810be46:	3208      	adds	r2, #8
 810be48:	0a1b      	lsrs	r3, r3, #8
 810be4a:	0719      	lsls	r1, r3, #28
 810be4c:	bf04      	itt	eq
 810be4e:	091b      	lsreq	r3, r3, #4
 810be50:	3204      	addeq	r2, #4
 810be52:	0799      	lsls	r1, r3, #30
 810be54:	bf04      	itt	eq
 810be56:	089b      	lsreq	r3, r3, #2
 810be58:	3202      	addeq	r2, #2
 810be5a:	07d9      	lsls	r1, r3, #31
 810be5c:	d403      	bmi.n	810be66 <__lo0bits+0x4e>
 810be5e:	085b      	lsrs	r3, r3, #1
 810be60:	f102 0201 	add.w	r2, r2, #1
 810be64:	d003      	beq.n	810be6e <__lo0bits+0x56>
 810be66:	6003      	str	r3, [r0, #0]
 810be68:	e7e5      	b.n	810be36 <__lo0bits+0x1e>
 810be6a:	2200      	movs	r2, #0
 810be6c:	e7e3      	b.n	810be36 <__lo0bits+0x1e>
 810be6e:	2220      	movs	r2, #32
 810be70:	e7e1      	b.n	810be36 <__lo0bits+0x1e>
	...

0810be74 <__i2b>:
 810be74:	b510      	push	{r4, lr}
 810be76:	460c      	mov	r4, r1
 810be78:	2101      	movs	r1, #1
 810be7a:	f7ff febb 	bl	810bbf4 <_Balloc>
 810be7e:	4602      	mov	r2, r0
 810be80:	b928      	cbnz	r0, 810be8e <__i2b+0x1a>
 810be82:	4b05      	ldr	r3, [pc, #20]	; (810be98 <__i2b+0x24>)
 810be84:	4805      	ldr	r0, [pc, #20]	; (810be9c <__i2b+0x28>)
 810be86:	f240 1145 	movw	r1, #325	; 0x145
 810be8a:	f001 fe29 	bl	810dae0 <__assert_func>
 810be8e:	2301      	movs	r3, #1
 810be90:	6144      	str	r4, [r0, #20]
 810be92:	6103      	str	r3, [r0, #16]
 810be94:	bd10      	pop	{r4, pc}
 810be96:	bf00      	nop
 810be98:	0810e91d 	.word	0x0810e91d
 810be9c:	0810e92e 	.word	0x0810e92e

0810bea0 <__multiply>:
 810bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bea4:	4691      	mov	r9, r2
 810bea6:	690a      	ldr	r2, [r1, #16]
 810bea8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810beac:	429a      	cmp	r2, r3
 810beae:	bfb8      	it	lt
 810beb0:	460b      	movlt	r3, r1
 810beb2:	460c      	mov	r4, r1
 810beb4:	bfbc      	itt	lt
 810beb6:	464c      	movlt	r4, r9
 810beb8:	4699      	movlt	r9, r3
 810beba:	6927      	ldr	r7, [r4, #16]
 810bebc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810bec0:	68a3      	ldr	r3, [r4, #8]
 810bec2:	6861      	ldr	r1, [r4, #4]
 810bec4:	eb07 060a 	add.w	r6, r7, sl
 810bec8:	42b3      	cmp	r3, r6
 810beca:	b085      	sub	sp, #20
 810becc:	bfb8      	it	lt
 810bece:	3101      	addlt	r1, #1
 810bed0:	f7ff fe90 	bl	810bbf4 <_Balloc>
 810bed4:	b930      	cbnz	r0, 810bee4 <__multiply+0x44>
 810bed6:	4602      	mov	r2, r0
 810bed8:	4b44      	ldr	r3, [pc, #272]	; (810bfec <__multiply+0x14c>)
 810beda:	4845      	ldr	r0, [pc, #276]	; (810bff0 <__multiply+0x150>)
 810bedc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 810bee0:	f001 fdfe 	bl	810dae0 <__assert_func>
 810bee4:	f100 0514 	add.w	r5, r0, #20
 810bee8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810beec:	462b      	mov	r3, r5
 810beee:	2200      	movs	r2, #0
 810bef0:	4543      	cmp	r3, r8
 810bef2:	d321      	bcc.n	810bf38 <__multiply+0x98>
 810bef4:	f104 0314 	add.w	r3, r4, #20
 810bef8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810befc:	f109 0314 	add.w	r3, r9, #20
 810bf00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810bf04:	9202      	str	r2, [sp, #8]
 810bf06:	1b3a      	subs	r2, r7, r4
 810bf08:	3a15      	subs	r2, #21
 810bf0a:	f022 0203 	bic.w	r2, r2, #3
 810bf0e:	3204      	adds	r2, #4
 810bf10:	f104 0115 	add.w	r1, r4, #21
 810bf14:	428f      	cmp	r7, r1
 810bf16:	bf38      	it	cc
 810bf18:	2204      	movcc	r2, #4
 810bf1a:	9201      	str	r2, [sp, #4]
 810bf1c:	9a02      	ldr	r2, [sp, #8]
 810bf1e:	9303      	str	r3, [sp, #12]
 810bf20:	429a      	cmp	r2, r3
 810bf22:	d80c      	bhi.n	810bf3e <__multiply+0x9e>
 810bf24:	2e00      	cmp	r6, #0
 810bf26:	dd03      	ble.n	810bf30 <__multiply+0x90>
 810bf28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810bf2c:	2b00      	cmp	r3, #0
 810bf2e:	d05b      	beq.n	810bfe8 <__multiply+0x148>
 810bf30:	6106      	str	r6, [r0, #16]
 810bf32:	b005      	add	sp, #20
 810bf34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bf38:	f843 2b04 	str.w	r2, [r3], #4
 810bf3c:	e7d8      	b.n	810bef0 <__multiply+0x50>
 810bf3e:	f8b3 a000 	ldrh.w	sl, [r3]
 810bf42:	f1ba 0f00 	cmp.w	sl, #0
 810bf46:	d024      	beq.n	810bf92 <__multiply+0xf2>
 810bf48:	f104 0e14 	add.w	lr, r4, #20
 810bf4c:	46a9      	mov	r9, r5
 810bf4e:	f04f 0c00 	mov.w	ip, #0
 810bf52:	f85e 2b04 	ldr.w	r2, [lr], #4
 810bf56:	f8d9 1000 	ldr.w	r1, [r9]
 810bf5a:	fa1f fb82 	uxth.w	fp, r2
 810bf5e:	b289      	uxth	r1, r1
 810bf60:	fb0a 110b 	mla	r1, sl, fp, r1
 810bf64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810bf68:	f8d9 2000 	ldr.w	r2, [r9]
 810bf6c:	4461      	add	r1, ip
 810bf6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810bf72:	fb0a c20b 	mla	r2, sl, fp, ip
 810bf76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810bf7a:	b289      	uxth	r1, r1
 810bf7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810bf80:	4577      	cmp	r7, lr
 810bf82:	f849 1b04 	str.w	r1, [r9], #4
 810bf86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810bf8a:	d8e2      	bhi.n	810bf52 <__multiply+0xb2>
 810bf8c:	9a01      	ldr	r2, [sp, #4]
 810bf8e:	f845 c002 	str.w	ip, [r5, r2]
 810bf92:	9a03      	ldr	r2, [sp, #12]
 810bf94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810bf98:	3304      	adds	r3, #4
 810bf9a:	f1b9 0f00 	cmp.w	r9, #0
 810bf9e:	d021      	beq.n	810bfe4 <__multiply+0x144>
 810bfa0:	6829      	ldr	r1, [r5, #0]
 810bfa2:	f104 0c14 	add.w	ip, r4, #20
 810bfa6:	46ae      	mov	lr, r5
 810bfa8:	f04f 0a00 	mov.w	sl, #0
 810bfac:	f8bc b000 	ldrh.w	fp, [ip]
 810bfb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810bfb4:	fb09 220b 	mla	r2, r9, fp, r2
 810bfb8:	4452      	add	r2, sl
 810bfba:	b289      	uxth	r1, r1
 810bfbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810bfc0:	f84e 1b04 	str.w	r1, [lr], #4
 810bfc4:	f85c 1b04 	ldr.w	r1, [ip], #4
 810bfc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810bfcc:	f8be 1000 	ldrh.w	r1, [lr]
 810bfd0:	fb09 110a 	mla	r1, r9, sl, r1
 810bfd4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 810bfd8:	4567      	cmp	r7, ip
 810bfda:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810bfde:	d8e5      	bhi.n	810bfac <__multiply+0x10c>
 810bfe0:	9a01      	ldr	r2, [sp, #4]
 810bfe2:	50a9      	str	r1, [r5, r2]
 810bfe4:	3504      	adds	r5, #4
 810bfe6:	e799      	b.n	810bf1c <__multiply+0x7c>
 810bfe8:	3e01      	subs	r6, #1
 810bfea:	e79b      	b.n	810bf24 <__multiply+0x84>
 810bfec:	0810e91d 	.word	0x0810e91d
 810bff0:	0810e92e 	.word	0x0810e92e

0810bff4 <__pow5mult>:
 810bff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bff8:	4615      	mov	r5, r2
 810bffa:	f012 0203 	ands.w	r2, r2, #3
 810bffe:	4606      	mov	r6, r0
 810c000:	460f      	mov	r7, r1
 810c002:	d007      	beq.n	810c014 <__pow5mult+0x20>
 810c004:	4c25      	ldr	r4, [pc, #148]	; (810c09c <__pow5mult+0xa8>)
 810c006:	3a01      	subs	r2, #1
 810c008:	2300      	movs	r3, #0
 810c00a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810c00e:	f7ff fe53 	bl	810bcb8 <__multadd>
 810c012:	4607      	mov	r7, r0
 810c014:	10ad      	asrs	r5, r5, #2
 810c016:	d03d      	beq.n	810c094 <__pow5mult+0xa0>
 810c018:	69f4      	ldr	r4, [r6, #28]
 810c01a:	b97c      	cbnz	r4, 810c03c <__pow5mult+0x48>
 810c01c:	2010      	movs	r0, #16
 810c01e:	f7ff fd35 	bl	810ba8c <malloc>
 810c022:	4602      	mov	r2, r0
 810c024:	61f0      	str	r0, [r6, #28]
 810c026:	b928      	cbnz	r0, 810c034 <__pow5mult+0x40>
 810c028:	4b1d      	ldr	r3, [pc, #116]	; (810c0a0 <__pow5mult+0xac>)
 810c02a:	481e      	ldr	r0, [pc, #120]	; (810c0a4 <__pow5mult+0xb0>)
 810c02c:	f240 11b3 	movw	r1, #435	; 0x1b3
 810c030:	f001 fd56 	bl	810dae0 <__assert_func>
 810c034:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810c038:	6004      	str	r4, [r0, #0]
 810c03a:	60c4      	str	r4, [r0, #12]
 810c03c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 810c040:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810c044:	b94c      	cbnz	r4, 810c05a <__pow5mult+0x66>
 810c046:	f240 2171 	movw	r1, #625	; 0x271
 810c04a:	4630      	mov	r0, r6
 810c04c:	f7ff ff12 	bl	810be74 <__i2b>
 810c050:	2300      	movs	r3, #0
 810c052:	f8c8 0008 	str.w	r0, [r8, #8]
 810c056:	4604      	mov	r4, r0
 810c058:	6003      	str	r3, [r0, #0]
 810c05a:	f04f 0900 	mov.w	r9, #0
 810c05e:	07eb      	lsls	r3, r5, #31
 810c060:	d50a      	bpl.n	810c078 <__pow5mult+0x84>
 810c062:	4639      	mov	r1, r7
 810c064:	4622      	mov	r2, r4
 810c066:	4630      	mov	r0, r6
 810c068:	f7ff ff1a 	bl	810bea0 <__multiply>
 810c06c:	4639      	mov	r1, r7
 810c06e:	4680      	mov	r8, r0
 810c070:	4630      	mov	r0, r6
 810c072:	f7ff fdff 	bl	810bc74 <_Bfree>
 810c076:	4647      	mov	r7, r8
 810c078:	106d      	asrs	r5, r5, #1
 810c07a:	d00b      	beq.n	810c094 <__pow5mult+0xa0>
 810c07c:	6820      	ldr	r0, [r4, #0]
 810c07e:	b938      	cbnz	r0, 810c090 <__pow5mult+0x9c>
 810c080:	4622      	mov	r2, r4
 810c082:	4621      	mov	r1, r4
 810c084:	4630      	mov	r0, r6
 810c086:	f7ff ff0b 	bl	810bea0 <__multiply>
 810c08a:	6020      	str	r0, [r4, #0]
 810c08c:	f8c0 9000 	str.w	r9, [r0]
 810c090:	4604      	mov	r4, r0
 810c092:	e7e4      	b.n	810c05e <__pow5mult+0x6a>
 810c094:	4638      	mov	r0, r7
 810c096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c09a:	bf00      	nop
 810c09c:	0810ea78 	.word	0x0810ea78
 810c0a0:	0810e8ae 	.word	0x0810e8ae
 810c0a4:	0810e92e 	.word	0x0810e92e

0810c0a8 <__lshift>:
 810c0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c0ac:	460c      	mov	r4, r1
 810c0ae:	6849      	ldr	r1, [r1, #4]
 810c0b0:	6923      	ldr	r3, [r4, #16]
 810c0b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810c0b6:	68a3      	ldr	r3, [r4, #8]
 810c0b8:	4607      	mov	r7, r0
 810c0ba:	4691      	mov	r9, r2
 810c0bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810c0c0:	f108 0601 	add.w	r6, r8, #1
 810c0c4:	42b3      	cmp	r3, r6
 810c0c6:	db0b      	blt.n	810c0e0 <__lshift+0x38>
 810c0c8:	4638      	mov	r0, r7
 810c0ca:	f7ff fd93 	bl	810bbf4 <_Balloc>
 810c0ce:	4605      	mov	r5, r0
 810c0d0:	b948      	cbnz	r0, 810c0e6 <__lshift+0x3e>
 810c0d2:	4602      	mov	r2, r0
 810c0d4:	4b28      	ldr	r3, [pc, #160]	; (810c178 <__lshift+0xd0>)
 810c0d6:	4829      	ldr	r0, [pc, #164]	; (810c17c <__lshift+0xd4>)
 810c0d8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 810c0dc:	f001 fd00 	bl	810dae0 <__assert_func>
 810c0e0:	3101      	adds	r1, #1
 810c0e2:	005b      	lsls	r3, r3, #1
 810c0e4:	e7ee      	b.n	810c0c4 <__lshift+0x1c>
 810c0e6:	2300      	movs	r3, #0
 810c0e8:	f100 0114 	add.w	r1, r0, #20
 810c0ec:	f100 0210 	add.w	r2, r0, #16
 810c0f0:	4618      	mov	r0, r3
 810c0f2:	4553      	cmp	r3, sl
 810c0f4:	db33      	blt.n	810c15e <__lshift+0xb6>
 810c0f6:	6920      	ldr	r0, [r4, #16]
 810c0f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810c0fc:	f104 0314 	add.w	r3, r4, #20
 810c100:	f019 091f 	ands.w	r9, r9, #31
 810c104:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810c108:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810c10c:	d02b      	beq.n	810c166 <__lshift+0xbe>
 810c10e:	f1c9 0e20 	rsb	lr, r9, #32
 810c112:	468a      	mov	sl, r1
 810c114:	2200      	movs	r2, #0
 810c116:	6818      	ldr	r0, [r3, #0]
 810c118:	fa00 f009 	lsl.w	r0, r0, r9
 810c11c:	4310      	orrs	r0, r2
 810c11e:	f84a 0b04 	str.w	r0, [sl], #4
 810c122:	f853 2b04 	ldr.w	r2, [r3], #4
 810c126:	459c      	cmp	ip, r3
 810c128:	fa22 f20e 	lsr.w	r2, r2, lr
 810c12c:	d8f3      	bhi.n	810c116 <__lshift+0x6e>
 810c12e:	ebac 0304 	sub.w	r3, ip, r4
 810c132:	3b15      	subs	r3, #21
 810c134:	f023 0303 	bic.w	r3, r3, #3
 810c138:	3304      	adds	r3, #4
 810c13a:	f104 0015 	add.w	r0, r4, #21
 810c13e:	4584      	cmp	ip, r0
 810c140:	bf38      	it	cc
 810c142:	2304      	movcc	r3, #4
 810c144:	50ca      	str	r2, [r1, r3]
 810c146:	b10a      	cbz	r2, 810c14c <__lshift+0xa4>
 810c148:	f108 0602 	add.w	r6, r8, #2
 810c14c:	3e01      	subs	r6, #1
 810c14e:	4638      	mov	r0, r7
 810c150:	612e      	str	r6, [r5, #16]
 810c152:	4621      	mov	r1, r4
 810c154:	f7ff fd8e 	bl	810bc74 <_Bfree>
 810c158:	4628      	mov	r0, r5
 810c15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c15e:	f842 0f04 	str.w	r0, [r2, #4]!
 810c162:	3301      	adds	r3, #1
 810c164:	e7c5      	b.n	810c0f2 <__lshift+0x4a>
 810c166:	3904      	subs	r1, #4
 810c168:	f853 2b04 	ldr.w	r2, [r3], #4
 810c16c:	f841 2f04 	str.w	r2, [r1, #4]!
 810c170:	459c      	cmp	ip, r3
 810c172:	d8f9      	bhi.n	810c168 <__lshift+0xc0>
 810c174:	e7ea      	b.n	810c14c <__lshift+0xa4>
 810c176:	bf00      	nop
 810c178:	0810e91d 	.word	0x0810e91d
 810c17c:	0810e92e 	.word	0x0810e92e

0810c180 <__mcmp>:
 810c180:	b530      	push	{r4, r5, lr}
 810c182:	6902      	ldr	r2, [r0, #16]
 810c184:	690c      	ldr	r4, [r1, #16]
 810c186:	1b12      	subs	r2, r2, r4
 810c188:	d10e      	bne.n	810c1a8 <__mcmp+0x28>
 810c18a:	f100 0314 	add.w	r3, r0, #20
 810c18e:	3114      	adds	r1, #20
 810c190:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810c194:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810c198:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810c19c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810c1a0:	42a5      	cmp	r5, r4
 810c1a2:	d003      	beq.n	810c1ac <__mcmp+0x2c>
 810c1a4:	d305      	bcc.n	810c1b2 <__mcmp+0x32>
 810c1a6:	2201      	movs	r2, #1
 810c1a8:	4610      	mov	r0, r2
 810c1aa:	bd30      	pop	{r4, r5, pc}
 810c1ac:	4283      	cmp	r3, r0
 810c1ae:	d3f3      	bcc.n	810c198 <__mcmp+0x18>
 810c1b0:	e7fa      	b.n	810c1a8 <__mcmp+0x28>
 810c1b2:	f04f 32ff 	mov.w	r2, #4294967295
 810c1b6:	e7f7      	b.n	810c1a8 <__mcmp+0x28>

0810c1b8 <__mdiff>:
 810c1b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c1bc:	460c      	mov	r4, r1
 810c1be:	4606      	mov	r6, r0
 810c1c0:	4611      	mov	r1, r2
 810c1c2:	4620      	mov	r0, r4
 810c1c4:	4690      	mov	r8, r2
 810c1c6:	f7ff ffdb 	bl	810c180 <__mcmp>
 810c1ca:	1e05      	subs	r5, r0, #0
 810c1cc:	d110      	bne.n	810c1f0 <__mdiff+0x38>
 810c1ce:	4629      	mov	r1, r5
 810c1d0:	4630      	mov	r0, r6
 810c1d2:	f7ff fd0f 	bl	810bbf4 <_Balloc>
 810c1d6:	b930      	cbnz	r0, 810c1e6 <__mdiff+0x2e>
 810c1d8:	4b3a      	ldr	r3, [pc, #232]	; (810c2c4 <__mdiff+0x10c>)
 810c1da:	4602      	mov	r2, r0
 810c1dc:	f240 2137 	movw	r1, #567	; 0x237
 810c1e0:	4839      	ldr	r0, [pc, #228]	; (810c2c8 <__mdiff+0x110>)
 810c1e2:	f001 fc7d 	bl	810dae0 <__assert_func>
 810c1e6:	2301      	movs	r3, #1
 810c1e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810c1ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c1f0:	bfa4      	itt	ge
 810c1f2:	4643      	movge	r3, r8
 810c1f4:	46a0      	movge	r8, r4
 810c1f6:	4630      	mov	r0, r6
 810c1f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810c1fc:	bfa6      	itte	ge
 810c1fe:	461c      	movge	r4, r3
 810c200:	2500      	movge	r5, #0
 810c202:	2501      	movlt	r5, #1
 810c204:	f7ff fcf6 	bl	810bbf4 <_Balloc>
 810c208:	b920      	cbnz	r0, 810c214 <__mdiff+0x5c>
 810c20a:	4b2e      	ldr	r3, [pc, #184]	; (810c2c4 <__mdiff+0x10c>)
 810c20c:	4602      	mov	r2, r0
 810c20e:	f240 2145 	movw	r1, #581	; 0x245
 810c212:	e7e5      	b.n	810c1e0 <__mdiff+0x28>
 810c214:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810c218:	6926      	ldr	r6, [r4, #16]
 810c21a:	60c5      	str	r5, [r0, #12]
 810c21c:	f104 0914 	add.w	r9, r4, #20
 810c220:	f108 0514 	add.w	r5, r8, #20
 810c224:	f100 0e14 	add.w	lr, r0, #20
 810c228:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810c22c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810c230:	f108 0210 	add.w	r2, r8, #16
 810c234:	46f2      	mov	sl, lr
 810c236:	2100      	movs	r1, #0
 810c238:	f859 3b04 	ldr.w	r3, [r9], #4
 810c23c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810c240:	fa11 f88b 	uxtah	r8, r1, fp
 810c244:	b299      	uxth	r1, r3
 810c246:	0c1b      	lsrs	r3, r3, #16
 810c248:	eba8 0801 	sub.w	r8, r8, r1
 810c24c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810c250:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810c254:	fa1f f888 	uxth.w	r8, r8
 810c258:	1419      	asrs	r1, r3, #16
 810c25a:	454e      	cmp	r6, r9
 810c25c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810c260:	f84a 3b04 	str.w	r3, [sl], #4
 810c264:	d8e8      	bhi.n	810c238 <__mdiff+0x80>
 810c266:	1b33      	subs	r3, r6, r4
 810c268:	3b15      	subs	r3, #21
 810c26a:	f023 0303 	bic.w	r3, r3, #3
 810c26e:	3304      	adds	r3, #4
 810c270:	3415      	adds	r4, #21
 810c272:	42a6      	cmp	r6, r4
 810c274:	bf38      	it	cc
 810c276:	2304      	movcc	r3, #4
 810c278:	441d      	add	r5, r3
 810c27a:	4473      	add	r3, lr
 810c27c:	469e      	mov	lr, r3
 810c27e:	462e      	mov	r6, r5
 810c280:	4566      	cmp	r6, ip
 810c282:	d30e      	bcc.n	810c2a2 <__mdiff+0xea>
 810c284:	f10c 0203 	add.w	r2, ip, #3
 810c288:	1b52      	subs	r2, r2, r5
 810c28a:	f022 0203 	bic.w	r2, r2, #3
 810c28e:	3d03      	subs	r5, #3
 810c290:	45ac      	cmp	ip, r5
 810c292:	bf38      	it	cc
 810c294:	2200      	movcc	r2, #0
 810c296:	4413      	add	r3, r2
 810c298:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 810c29c:	b17a      	cbz	r2, 810c2be <__mdiff+0x106>
 810c29e:	6107      	str	r7, [r0, #16]
 810c2a0:	e7a4      	b.n	810c1ec <__mdiff+0x34>
 810c2a2:	f856 8b04 	ldr.w	r8, [r6], #4
 810c2a6:	fa11 f288 	uxtah	r2, r1, r8
 810c2aa:	1414      	asrs	r4, r2, #16
 810c2ac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810c2b0:	b292      	uxth	r2, r2
 810c2b2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810c2b6:	f84e 2b04 	str.w	r2, [lr], #4
 810c2ba:	1421      	asrs	r1, r4, #16
 810c2bc:	e7e0      	b.n	810c280 <__mdiff+0xc8>
 810c2be:	3f01      	subs	r7, #1
 810c2c0:	e7ea      	b.n	810c298 <__mdiff+0xe0>
 810c2c2:	bf00      	nop
 810c2c4:	0810e91d 	.word	0x0810e91d
 810c2c8:	0810e92e 	.word	0x0810e92e

0810c2cc <__ulp>:
 810c2cc:	b082      	sub	sp, #8
 810c2ce:	ed8d 0b00 	vstr	d0, [sp]
 810c2d2:	9a01      	ldr	r2, [sp, #4]
 810c2d4:	4b0f      	ldr	r3, [pc, #60]	; (810c314 <__ulp+0x48>)
 810c2d6:	4013      	ands	r3, r2
 810c2d8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 810c2dc:	2b00      	cmp	r3, #0
 810c2de:	dc08      	bgt.n	810c2f2 <__ulp+0x26>
 810c2e0:	425b      	negs	r3, r3
 810c2e2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 810c2e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 810c2ea:	da04      	bge.n	810c2f6 <__ulp+0x2a>
 810c2ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810c2f0:	4113      	asrs	r3, r2
 810c2f2:	2200      	movs	r2, #0
 810c2f4:	e008      	b.n	810c308 <__ulp+0x3c>
 810c2f6:	f1a2 0314 	sub.w	r3, r2, #20
 810c2fa:	2b1e      	cmp	r3, #30
 810c2fc:	bfda      	itte	le
 810c2fe:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 810c302:	40da      	lsrle	r2, r3
 810c304:	2201      	movgt	r2, #1
 810c306:	2300      	movs	r3, #0
 810c308:	4619      	mov	r1, r3
 810c30a:	4610      	mov	r0, r2
 810c30c:	ec41 0b10 	vmov	d0, r0, r1
 810c310:	b002      	add	sp, #8
 810c312:	4770      	bx	lr
 810c314:	7ff00000 	.word	0x7ff00000

0810c318 <__b2d>:
 810c318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c31c:	6906      	ldr	r6, [r0, #16]
 810c31e:	f100 0814 	add.w	r8, r0, #20
 810c322:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810c326:	1f37      	subs	r7, r6, #4
 810c328:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810c32c:	4610      	mov	r0, r2
 810c32e:	f7ff fd53 	bl	810bdd8 <__hi0bits>
 810c332:	f1c0 0320 	rsb	r3, r0, #32
 810c336:	280a      	cmp	r0, #10
 810c338:	600b      	str	r3, [r1, #0]
 810c33a:	491b      	ldr	r1, [pc, #108]	; (810c3a8 <__b2d+0x90>)
 810c33c:	dc15      	bgt.n	810c36a <__b2d+0x52>
 810c33e:	f1c0 0c0b 	rsb	ip, r0, #11
 810c342:	fa22 f30c 	lsr.w	r3, r2, ip
 810c346:	45b8      	cmp	r8, r7
 810c348:	ea43 0501 	orr.w	r5, r3, r1
 810c34c:	bf34      	ite	cc
 810c34e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c352:	2300      	movcs	r3, #0
 810c354:	3015      	adds	r0, #21
 810c356:	fa02 f000 	lsl.w	r0, r2, r0
 810c35a:	fa23 f30c 	lsr.w	r3, r3, ip
 810c35e:	4303      	orrs	r3, r0
 810c360:	461c      	mov	r4, r3
 810c362:	ec45 4b10 	vmov	d0, r4, r5
 810c366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c36a:	45b8      	cmp	r8, r7
 810c36c:	bf3a      	itte	cc
 810c36e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c372:	f1a6 0708 	subcc.w	r7, r6, #8
 810c376:	2300      	movcs	r3, #0
 810c378:	380b      	subs	r0, #11
 810c37a:	d012      	beq.n	810c3a2 <__b2d+0x8a>
 810c37c:	f1c0 0120 	rsb	r1, r0, #32
 810c380:	fa23 f401 	lsr.w	r4, r3, r1
 810c384:	4082      	lsls	r2, r0
 810c386:	4322      	orrs	r2, r4
 810c388:	4547      	cmp	r7, r8
 810c38a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 810c38e:	bf8c      	ite	hi
 810c390:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810c394:	2200      	movls	r2, #0
 810c396:	4083      	lsls	r3, r0
 810c398:	40ca      	lsrs	r2, r1
 810c39a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810c39e:	4313      	orrs	r3, r2
 810c3a0:	e7de      	b.n	810c360 <__b2d+0x48>
 810c3a2:	ea42 0501 	orr.w	r5, r2, r1
 810c3a6:	e7db      	b.n	810c360 <__b2d+0x48>
 810c3a8:	3ff00000 	.word	0x3ff00000

0810c3ac <__d2b>:
 810c3ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c3b0:	460f      	mov	r7, r1
 810c3b2:	2101      	movs	r1, #1
 810c3b4:	ec59 8b10 	vmov	r8, r9, d0
 810c3b8:	4616      	mov	r6, r2
 810c3ba:	f7ff fc1b 	bl	810bbf4 <_Balloc>
 810c3be:	4604      	mov	r4, r0
 810c3c0:	b930      	cbnz	r0, 810c3d0 <__d2b+0x24>
 810c3c2:	4602      	mov	r2, r0
 810c3c4:	4b24      	ldr	r3, [pc, #144]	; (810c458 <__d2b+0xac>)
 810c3c6:	4825      	ldr	r0, [pc, #148]	; (810c45c <__d2b+0xb0>)
 810c3c8:	f240 310f 	movw	r1, #783	; 0x30f
 810c3cc:	f001 fb88 	bl	810dae0 <__assert_func>
 810c3d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810c3d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c3d8:	bb2d      	cbnz	r5, 810c426 <__d2b+0x7a>
 810c3da:	9301      	str	r3, [sp, #4]
 810c3dc:	f1b8 0300 	subs.w	r3, r8, #0
 810c3e0:	d026      	beq.n	810c430 <__d2b+0x84>
 810c3e2:	4668      	mov	r0, sp
 810c3e4:	9300      	str	r3, [sp, #0]
 810c3e6:	f7ff fd17 	bl	810be18 <__lo0bits>
 810c3ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 810c3ee:	b1e8      	cbz	r0, 810c42c <__d2b+0x80>
 810c3f0:	f1c0 0320 	rsb	r3, r0, #32
 810c3f4:	fa02 f303 	lsl.w	r3, r2, r3
 810c3f8:	430b      	orrs	r3, r1
 810c3fa:	40c2      	lsrs	r2, r0
 810c3fc:	6163      	str	r3, [r4, #20]
 810c3fe:	9201      	str	r2, [sp, #4]
 810c400:	9b01      	ldr	r3, [sp, #4]
 810c402:	61a3      	str	r3, [r4, #24]
 810c404:	2b00      	cmp	r3, #0
 810c406:	bf14      	ite	ne
 810c408:	2202      	movne	r2, #2
 810c40a:	2201      	moveq	r2, #1
 810c40c:	6122      	str	r2, [r4, #16]
 810c40e:	b1bd      	cbz	r5, 810c440 <__d2b+0x94>
 810c410:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810c414:	4405      	add	r5, r0
 810c416:	603d      	str	r5, [r7, #0]
 810c418:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810c41c:	6030      	str	r0, [r6, #0]
 810c41e:	4620      	mov	r0, r4
 810c420:	b003      	add	sp, #12
 810c422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810c42a:	e7d6      	b.n	810c3da <__d2b+0x2e>
 810c42c:	6161      	str	r1, [r4, #20]
 810c42e:	e7e7      	b.n	810c400 <__d2b+0x54>
 810c430:	a801      	add	r0, sp, #4
 810c432:	f7ff fcf1 	bl	810be18 <__lo0bits>
 810c436:	9b01      	ldr	r3, [sp, #4]
 810c438:	6163      	str	r3, [r4, #20]
 810c43a:	3020      	adds	r0, #32
 810c43c:	2201      	movs	r2, #1
 810c43e:	e7e5      	b.n	810c40c <__d2b+0x60>
 810c440:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810c444:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810c448:	6038      	str	r0, [r7, #0]
 810c44a:	6918      	ldr	r0, [r3, #16]
 810c44c:	f7ff fcc4 	bl	810bdd8 <__hi0bits>
 810c450:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810c454:	e7e2      	b.n	810c41c <__d2b+0x70>
 810c456:	bf00      	nop
 810c458:	0810e91d 	.word	0x0810e91d
 810c45c:	0810e92e 	.word	0x0810e92e

0810c460 <__ratio>:
 810c460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c464:	4688      	mov	r8, r1
 810c466:	4669      	mov	r1, sp
 810c468:	4681      	mov	r9, r0
 810c46a:	f7ff ff55 	bl	810c318 <__b2d>
 810c46e:	a901      	add	r1, sp, #4
 810c470:	4640      	mov	r0, r8
 810c472:	ec55 4b10 	vmov	r4, r5, d0
 810c476:	f7ff ff4f 	bl	810c318 <__b2d>
 810c47a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c47e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810c482:	eba3 0c02 	sub.w	ip, r3, r2
 810c486:	e9dd 3200 	ldrd	r3, r2, [sp]
 810c48a:	1a9b      	subs	r3, r3, r2
 810c48c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810c490:	ec51 0b10 	vmov	r0, r1, d0
 810c494:	2b00      	cmp	r3, #0
 810c496:	bfd6      	itet	le
 810c498:	460a      	movle	r2, r1
 810c49a:	462a      	movgt	r2, r5
 810c49c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810c4a0:	468b      	mov	fp, r1
 810c4a2:	462f      	mov	r7, r5
 810c4a4:	bfd4      	ite	le
 810c4a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810c4aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810c4ae:	4620      	mov	r0, r4
 810c4b0:	ee10 2a10 	vmov	r2, s0
 810c4b4:	465b      	mov	r3, fp
 810c4b6:	4639      	mov	r1, r7
 810c4b8:	f7f4 fa50 	bl	810095c <__aeabi_ddiv>
 810c4bc:	ec41 0b10 	vmov	d0, r0, r1
 810c4c0:	b003      	add	sp, #12
 810c4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c4c6 <__copybits>:
 810c4c6:	3901      	subs	r1, #1
 810c4c8:	b570      	push	{r4, r5, r6, lr}
 810c4ca:	1149      	asrs	r1, r1, #5
 810c4cc:	6914      	ldr	r4, [r2, #16]
 810c4ce:	3101      	adds	r1, #1
 810c4d0:	f102 0314 	add.w	r3, r2, #20
 810c4d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810c4d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810c4dc:	1f05      	subs	r5, r0, #4
 810c4de:	42a3      	cmp	r3, r4
 810c4e0:	d30c      	bcc.n	810c4fc <__copybits+0x36>
 810c4e2:	1aa3      	subs	r3, r4, r2
 810c4e4:	3b11      	subs	r3, #17
 810c4e6:	f023 0303 	bic.w	r3, r3, #3
 810c4ea:	3211      	adds	r2, #17
 810c4ec:	42a2      	cmp	r2, r4
 810c4ee:	bf88      	it	hi
 810c4f0:	2300      	movhi	r3, #0
 810c4f2:	4418      	add	r0, r3
 810c4f4:	2300      	movs	r3, #0
 810c4f6:	4288      	cmp	r0, r1
 810c4f8:	d305      	bcc.n	810c506 <__copybits+0x40>
 810c4fa:	bd70      	pop	{r4, r5, r6, pc}
 810c4fc:	f853 6b04 	ldr.w	r6, [r3], #4
 810c500:	f845 6f04 	str.w	r6, [r5, #4]!
 810c504:	e7eb      	b.n	810c4de <__copybits+0x18>
 810c506:	f840 3b04 	str.w	r3, [r0], #4
 810c50a:	e7f4      	b.n	810c4f6 <__copybits+0x30>

0810c50c <__any_on>:
 810c50c:	f100 0214 	add.w	r2, r0, #20
 810c510:	6900      	ldr	r0, [r0, #16]
 810c512:	114b      	asrs	r3, r1, #5
 810c514:	4298      	cmp	r0, r3
 810c516:	b510      	push	{r4, lr}
 810c518:	db11      	blt.n	810c53e <__any_on+0x32>
 810c51a:	dd0a      	ble.n	810c532 <__any_on+0x26>
 810c51c:	f011 011f 	ands.w	r1, r1, #31
 810c520:	d007      	beq.n	810c532 <__any_on+0x26>
 810c522:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810c526:	fa24 f001 	lsr.w	r0, r4, r1
 810c52a:	fa00 f101 	lsl.w	r1, r0, r1
 810c52e:	428c      	cmp	r4, r1
 810c530:	d10b      	bne.n	810c54a <__any_on+0x3e>
 810c532:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810c536:	4293      	cmp	r3, r2
 810c538:	d803      	bhi.n	810c542 <__any_on+0x36>
 810c53a:	2000      	movs	r0, #0
 810c53c:	bd10      	pop	{r4, pc}
 810c53e:	4603      	mov	r3, r0
 810c540:	e7f7      	b.n	810c532 <__any_on+0x26>
 810c542:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810c546:	2900      	cmp	r1, #0
 810c548:	d0f5      	beq.n	810c536 <__any_on+0x2a>
 810c54a:	2001      	movs	r0, #1
 810c54c:	e7f6      	b.n	810c53c <__any_on+0x30>

0810c54e <sulp>:
 810c54e:	b570      	push	{r4, r5, r6, lr}
 810c550:	4604      	mov	r4, r0
 810c552:	460d      	mov	r5, r1
 810c554:	ec45 4b10 	vmov	d0, r4, r5
 810c558:	4616      	mov	r6, r2
 810c55a:	f7ff feb7 	bl	810c2cc <__ulp>
 810c55e:	ec51 0b10 	vmov	r0, r1, d0
 810c562:	b17e      	cbz	r6, 810c584 <sulp+0x36>
 810c564:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810c568:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810c56c:	2b00      	cmp	r3, #0
 810c56e:	dd09      	ble.n	810c584 <sulp+0x36>
 810c570:	051b      	lsls	r3, r3, #20
 810c572:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810c576:	2400      	movs	r4, #0
 810c578:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810c57c:	4622      	mov	r2, r4
 810c57e:	462b      	mov	r3, r5
 810c580:	f7f4 f8c2 	bl	8100708 <__aeabi_dmul>
 810c584:	bd70      	pop	{r4, r5, r6, pc}
	...

0810c588 <_strtod_l>:
 810c588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c58c:	ed2d 8b02 	vpush	{d8}
 810c590:	b09b      	sub	sp, #108	; 0x6c
 810c592:	4604      	mov	r4, r0
 810c594:	9213      	str	r2, [sp, #76]	; 0x4c
 810c596:	2200      	movs	r2, #0
 810c598:	9216      	str	r2, [sp, #88]	; 0x58
 810c59a:	460d      	mov	r5, r1
 810c59c:	f04f 0800 	mov.w	r8, #0
 810c5a0:	f04f 0900 	mov.w	r9, #0
 810c5a4:	460a      	mov	r2, r1
 810c5a6:	9215      	str	r2, [sp, #84]	; 0x54
 810c5a8:	7811      	ldrb	r1, [r2, #0]
 810c5aa:	292b      	cmp	r1, #43	; 0x2b
 810c5ac:	d04c      	beq.n	810c648 <_strtod_l+0xc0>
 810c5ae:	d83a      	bhi.n	810c626 <_strtod_l+0x9e>
 810c5b0:	290d      	cmp	r1, #13
 810c5b2:	d834      	bhi.n	810c61e <_strtod_l+0x96>
 810c5b4:	2908      	cmp	r1, #8
 810c5b6:	d834      	bhi.n	810c622 <_strtod_l+0x9a>
 810c5b8:	2900      	cmp	r1, #0
 810c5ba:	d03d      	beq.n	810c638 <_strtod_l+0xb0>
 810c5bc:	2200      	movs	r2, #0
 810c5be:	920a      	str	r2, [sp, #40]	; 0x28
 810c5c0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 810c5c2:	7832      	ldrb	r2, [r6, #0]
 810c5c4:	2a30      	cmp	r2, #48	; 0x30
 810c5c6:	f040 80b4 	bne.w	810c732 <_strtod_l+0x1aa>
 810c5ca:	7872      	ldrb	r2, [r6, #1]
 810c5cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 810c5d0:	2a58      	cmp	r2, #88	; 0x58
 810c5d2:	d170      	bne.n	810c6b6 <_strtod_l+0x12e>
 810c5d4:	9302      	str	r3, [sp, #8]
 810c5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c5d8:	9301      	str	r3, [sp, #4]
 810c5da:	ab16      	add	r3, sp, #88	; 0x58
 810c5dc:	9300      	str	r3, [sp, #0]
 810c5de:	4a8e      	ldr	r2, [pc, #568]	; (810c818 <_strtod_l+0x290>)
 810c5e0:	ab17      	add	r3, sp, #92	; 0x5c
 810c5e2:	a915      	add	r1, sp, #84	; 0x54
 810c5e4:	4620      	mov	r0, r4
 810c5e6:	f001 fb17 	bl	810dc18 <__gethex>
 810c5ea:	f010 070f 	ands.w	r7, r0, #15
 810c5ee:	4605      	mov	r5, r0
 810c5f0:	d005      	beq.n	810c5fe <_strtod_l+0x76>
 810c5f2:	2f06      	cmp	r7, #6
 810c5f4:	d12a      	bne.n	810c64c <_strtod_l+0xc4>
 810c5f6:	3601      	adds	r6, #1
 810c5f8:	2300      	movs	r3, #0
 810c5fa:	9615      	str	r6, [sp, #84]	; 0x54
 810c5fc:	930a      	str	r3, [sp, #40]	; 0x28
 810c5fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810c600:	2b00      	cmp	r3, #0
 810c602:	f040 857f 	bne.w	810d104 <_strtod_l+0xb7c>
 810c606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c608:	b1db      	cbz	r3, 810c642 <_strtod_l+0xba>
 810c60a:	4642      	mov	r2, r8
 810c60c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810c610:	ec43 2b10 	vmov	d0, r2, r3
 810c614:	b01b      	add	sp, #108	; 0x6c
 810c616:	ecbd 8b02 	vpop	{d8}
 810c61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c61e:	2920      	cmp	r1, #32
 810c620:	d1cc      	bne.n	810c5bc <_strtod_l+0x34>
 810c622:	3201      	adds	r2, #1
 810c624:	e7bf      	b.n	810c5a6 <_strtod_l+0x1e>
 810c626:	292d      	cmp	r1, #45	; 0x2d
 810c628:	d1c8      	bne.n	810c5bc <_strtod_l+0x34>
 810c62a:	2101      	movs	r1, #1
 810c62c:	910a      	str	r1, [sp, #40]	; 0x28
 810c62e:	1c51      	adds	r1, r2, #1
 810c630:	9115      	str	r1, [sp, #84]	; 0x54
 810c632:	7852      	ldrb	r2, [r2, #1]
 810c634:	2a00      	cmp	r2, #0
 810c636:	d1c3      	bne.n	810c5c0 <_strtod_l+0x38>
 810c638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810c63a:	9515      	str	r5, [sp, #84]	; 0x54
 810c63c:	2b00      	cmp	r3, #0
 810c63e:	f040 855f 	bne.w	810d100 <_strtod_l+0xb78>
 810c642:	4642      	mov	r2, r8
 810c644:	464b      	mov	r3, r9
 810c646:	e7e3      	b.n	810c610 <_strtod_l+0x88>
 810c648:	2100      	movs	r1, #0
 810c64a:	e7ef      	b.n	810c62c <_strtod_l+0xa4>
 810c64c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810c64e:	b13a      	cbz	r2, 810c660 <_strtod_l+0xd8>
 810c650:	2135      	movs	r1, #53	; 0x35
 810c652:	a818      	add	r0, sp, #96	; 0x60
 810c654:	f7ff ff37 	bl	810c4c6 <__copybits>
 810c658:	9916      	ldr	r1, [sp, #88]	; 0x58
 810c65a:	4620      	mov	r0, r4
 810c65c:	f7ff fb0a 	bl	810bc74 <_Bfree>
 810c660:	3f01      	subs	r7, #1
 810c662:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c664:	2f04      	cmp	r7, #4
 810c666:	d806      	bhi.n	810c676 <_strtod_l+0xee>
 810c668:	e8df f007 	tbb	[pc, r7]
 810c66c:	201d0314 	.word	0x201d0314
 810c670:	14          	.byte	0x14
 810c671:	00          	.byte	0x00
 810c672:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 810c676:	05e9      	lsls	r1, r5, #23
 810c678:	bf48      	it	mi
 810c67a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 810c67e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810c682:	0d1b      	lsrs	r3, r3, #20
 810c684:	051b      	lsls	r3, r3, #20
 810c686:	2b00      	cmp	r3, #0
 810c688:	d1b9      	bne.n	810c5fe <_strtod_l+0x76>
 810c68a:	f7fe fb03 	bl	810ac94 <__errno>
 810c68e:	2322      	movs	r3, #34	; 0x22
 810c690:	6003      	str	r3, [r0, #0]
 810c692:	e7b4      	b.n	810c5fe <_strtod_l+0x76>
 810c694:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 810c698:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810c69c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810c6a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 810c6a4:	e7e7      	b.n	810c676 <_strtod_l+0xee>
 810c6a6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 810c820 <_strtod_l+0x298>
 810c6aa:	e7e4      	b.n	810c676 <_strtod_l+0xee>
 810c6ac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 810c6b0:	f04f 38ff 	mov.w	r8, #4294967295
 810c6b4:	e7df      	b.n	810c676 <_strtod_l+0xee>
 810c6b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c6b8:	1c5a      	adds	r2, r3, #1
 810c6ba:	9215      	str	r2, [sp, #84]	; 0x54
 810c6bc:	785b      	ldrb	r3, [r3, #1]
 810c6be:	2b30      	cmp	r3, #48	; 0x30
 810c6c0:	d0f9      	beq.n	810c6b6 <_strtod_l+0x12e>
 810c6c2:	2b00      	cmp	r3, #0
 810c6c4:	d09b      	beq.n	810c5fe <_strtod_l+0x76>
 810c6c6:	2301      	movs	r3, #1
 810c6c8:	f04f 0a00 	mov.w	sl, #0
 810c6cc:	9304      	str	r3, [sp, #16]
 810c6ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c6d0:	930b      	str	r3, [sp, #44]	; 0x2c
 810c6d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 810c6d6:	46d3      	mov	fp, sl
 810c6d8:	220a      	movs	r2, #10
 810c6da:	9815      	ldr	r0, [sp, #84]	; 0x54
 810c6dc:	7806      	ldrb	r6, [r0, #0]
 810c6de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810c6e2:	b2d9      	uxtb	r1, r3
 810c6e4:	2909      	cmp	r1, #9
 810c6e6:	d926      	bls.n	810c736 <_strtod_l+0x1ae>
 810c6e8:	494c      	ldr	r1, [pc, #304]	; (810c81c <_strtod_l+0x294>)
 810c6ea:	2201      	movs	r2, #1
 810c6ec:	f001 f9c0 	bl	810da70 <strncmp>
 810c6f0:	2800      	cmp	r0, #0
 810c6f2:	d030      	beq.n	810c756 <_strtod_l+0x1ce>
 810c6f4:	2000      	movs	r0, #0
 810c6f6:	4632      	mov	r2, r6
 810c6f8:	9005      	str	r0, [sp, #20]
 810c6fa:	465e      	mov	r6, fp
 810c6fc:	4603      	mov	r3, r0
 810c6fe:	2a65      	cmp	r2, #101	; 0x65
 810c700:	d001      	beq.n	810c706 <_strtod_l+0x17e>
 810c702:	2a45      	cmp	r2, #69	; 0x45
 810c704:	d113      	bne.n	810c72e <_strtod_l+0x1a6>
 810c706:	b91e      	cbnz	r6, 810c710 <_strtod_l+0x188>
 810c708:	9a04      	ldr	r2, [sp, #16]
 810c70a:	4302      	orrs	r2, r0
 810c70c:	d094      	beq.n	810c638 <_strtod_l+0xb0>
 810c70e:	2600      	movs	r6, #0
 810c710:	9d15      	ldr	r5, [sp, #84]	; 0x54
 810c712:	1c6a      	adds	r2, r5, #1
 810c714:	9215      	str	r2, [sp, #84]	; 0x54
 810c716:	786a      	ldrb	r2, [r5, #1]
 810c718:	2a2b      	cmp	r2, #43	; 0x2b
 810c71a:	d074      	beq.n	810c806 <_strtod_l+0x27e>
 810c71c:	2a2d      	cmp	r2, #45	; 0x2d
 810c71e:	d078      	beq.n	810c812 <_strtod_l+0x28a>
 810c720:	f04f 0c00 	mov.w	ip, #0
 810c724:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810c728:	2909      	cmp	r1, #9
 810c72a:	d97f      	bls.n	810c82c <_strtod_l+0x2a4>
 810c72c:	9515      	str	r5, [sp, #84]	; 0x54
 810c72e:	2700      	movs	r7, #0
 810c730:	e09e      	b.n	810c870 <_strtod_l+0x2e8>
 810c732:	2300      	movs	r3, #0
 810c734:	e7c8      	b.n	810c6c8 <_strtod_l+0x140>
 810c736:	f1bb 0f08 	cmp.w	fp, #8
 810c73a:	bfd8      	it	le
 810c73c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810c73e:	f100 0001 	add.w	r0, r0, #1
 810c742:	bfda      	itte	le
 810c744:	fb02 3301 	mlale	r3, r2, r1, r3
 810c748:	9309      	strle	r3, [sp, #36]	; 0x24
 810c74a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 810c74e:	f10b 0b01 	add.w	fp, fp, #1
 810c752:	9015      	str	r0, [sp, #84]	; 0x54
 810c754:	e7c1      	b.n	810c6da <_strtod_l+0x152>
 810c756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c758:	1c5a      	adds	r2, r3, #1
 810c75a:	9215      	str	r2, [sp, #84]	; 0x54
 810c75c:	785a      	ldrb	r2, [r3, #1]
 810c75e:	f1bb 0f00 	cmp.w	fp, #0
 810c762:	d037      	beq.n	810c7d4 <_strtod_l+0x24c>
 810c764:	9005      	str	r0, [sp, #20]
 810c766:	465e      	mov	r6, fp
 810c768:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810c76c:	2b09      	cmp	r3, #9
 810c76e:	d912      	bls.n	810c796 <_strtod_l+0x20e>
 810c770:	2301      	movs	r3, #1
 810c772:	e7c4      	b.n	810c6fe <_strtod_l+0x176>
 810c774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c776:	1c5a      	adds	r2, r3, #1
 810c778:	9215      	str	r2, [sp, #84]	; 0x54
 810c77a:	785a      	ldrb	r2, [r3, #1]
 810c77c:	3001      	adds	r0, #1
 810c77e:	2a30      	cmp	r2, #48	; 0x30
 810c780:	d0f8      	beq.n	810c774 <_strtod_l+0x1ec>
 810c782:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810c786:	2b08      	cmp	r3, #8
 810c788:	f200 84c1 	bhi.w	810d10e <_strtod_l+0xb86>
 810c78c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c78e:	9005      	str	r0, [sp, #20]
 810c790:	2000      	movs	r0, #0
 810c792:	930b      	str	r3, [sp, #44]	; 0x2c
 810c794:	4606      	mov	r6, r0
 810c796:	3a30      	subs	r2, #48	; 0x30
 810c798:	f100 0301 	add.w	r3, r0, #1
 810c79c:	d014      	beq.n	810c7c8 <_strtod_l+0x240>
 810c79e:	9905      	ldr	r1, [sp, #20]
 810c7a0:	4419      	add	r1, r3
 810c7a2:	9105      	str	r1, [sp, #20]
 810c7a4:	4633      	mov	r3, r6
 810c7a6:	eb00 0c06 	add.w	ip, r0, r6
 810c7aa:	210a      	movs	r1, #10
 810c7ac:	4563      	cmp	r3, ip
 810c7ae:	d113      	bne.n	810c7d8 <_strtod_l+0x250>
 810c7b0:	1833      	adds	r3, r6, r0
 810c7b2:	2b08      	cmp	r3, #8
 810c7b4:	f106 0601 	add.w	r6, r6, #1
 810c7b8:	4406      	add	r6, r0
 810c7ba:	dc1a      	bgt.n	810c7f2 <_strtod_l+0x26a>
 810c7bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 810c7be:	230a      	movs	r3, #10
 810c7c0:	fb03 2301 	mla	r3, r3, r1, r2
 810c7c4:	9309      	str	r3, [sp, #36]	; 0x24
 810c7c6:	2300      	movs	r3, #0
 810c7c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810c7ca:	1c51      	adds	r1, r2, #1
 810c7cc:	9115      	str	r1, [sp, #84]	; 0x54
 810c7ce:	7852      	ldrb	r2, [r2, #1]
 810c7d0:	4618      	mov	r0, r3
 810c7d2:	e7c9      	b.n	810c768 <_strtod_l+0x1e0>
 810c7d4:	4658      	mov	r0, fp
 810c7d6:	e7d2      	b.n	810c77e <_strtod_l+0x1f6>
 810c7d8:	2b08      	cmp	r3, #8
 810c7da:	f103 0301 	add.w	r3, r3, #1
 810c7de:	dc03      	bgt.n	810c7e8 <_strtod_l+0x260>
 810c7e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810c7e2:	434f      	muls	r7, r1
 810c7e4:	9709      	str	r7, [sp, #36]	; 0x24
 810c7e6:	e7e1      	b.n	810c7ac <_strtod_l+0x224>
 810c7e8:	2b10      	cmp	r3, #16
 810c7ea:	bfd8      	it	le
 810c7ec:	fb01 fa0a 	mulle.w	sl, r1, sl
 810c7f0:	e7dc      	b.n	810c7ac <_strtod_l+0x224>
 810c7f2:	2e10      	cmp	r6, #16
 810c7f4:	bfdc      	itt	le
 810c7f6:	230a      	movle	r3, #10
 810c7f8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 810c7fc:	e7e3      	b.n	810c7c6 <_strtod_l+0x23e>
 810c7fe:	2300      	movs	r3, #0
 810c800:	9305      	str	r3, [sp, #20]
 810c802:	2301      	movs	r3, #1
 810c804:	e780      	b.n	810c708 <_strtod_l+0x180>
 810c806:	f04f 0c00 	mov.w	ip, #0
 810c80a:	1caa      	adds	r2, r5, #2
 810c80c:	9215      	str	r2, [sp, #84]	; 0x54
 810c80e:	78aa      	ldrb	r2, [r5, #2]
 810c810:	e788      	b.n	810c724 <_strtod_l+0x19c>
 810c812:	f04f 0c01 	mov.w	ip, #1
 810c816:	e7f8      	b.n	810c80a <_strtod_l+0x282>
 810c818:	0810ea88 	.word	0x0810ea88
 810c81c:	0810ea84 	.word	0x0810ea84
 810c820:	7ff00000 	.word	0x7ff00000
 810c824:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810c826:	1c51      	adds	r1, r2, #1
 810c828:	9115      	str	r1, [sp, #84]	; 0x54
 810c82a:	7852      	ldrb	r2, [r2, #1]
 810c82c:	2a30      	cmp	r2, #48	; 0x30
 810c82e:	d0f9      	beq.n	810c824 <_strtod_l+0x29c>
 810c830:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810c834:	2908      	cmp	r1, #8
 810c836:	f63f af7a 	bhi.w	810c72e <_strtod_l+0x1a6>
 810c83a:	3a30      	subs	r2, #48	; 0x30
 810c83c:	9208      	str	r2, [sp, #32]
 810c83e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810c840:	920c      	str	r2, [sp, #48]	; 0x30
 810c842:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810c844:	1c57      	adds	r7, r2, #1
 810c846:	9715      	str	r7, [sp, #84]	; 0x54
 810c848:	7852      	ldrb	r2, [r2, #1]
 810c84a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810c84e:	f1be 0f09 	cmp.w	lr, #9
 810c852:	d938      	bls.n	810c8c6 <_strtod_l+0x33e>
 810c854:	990c      	ldr	r1, [sp, #48]	; 0x30
 810c856:	1a7f      	subs	r7, r7, r1
 810c858:	2f08      	cmp	r7, #8
 810c85a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 810c85e:	dc03      	bgt.n	810c868 <_strtod_l+0x2e0>
 810c860:	9908      	ldr	r1, [sp, #32]
 810c862:	428f      	cmp	r7, r1
 810c864:	bfa8      	it	ge
 810c866:	460f      	movge	r7, r1
 810c868:	f1bc 0f00 	cmp.w	ip, #0
 810c86c:	d000      	beq.n	810c870 <_strtod_l+0x2e8>
 810c86e:	427f      	negs	r7, r7
 810c870:	2e00      	cmp	r6, #0
 810c872:	d14f      	bne.n	810c914 <_strtod_l+0x38c>
 810c874:	9904      	ldr	r1, [sp, #16]
 810c876:	4301      	orrs	r1, r0
 810c878:	f47f aec1 	bne.w	810c5fe <_strtod_l+0x76>
 810c87c:	2b00      	cmp	r3, #0
 810c87e:	f47f aedb 	bne.w	810c638 <_strtod_l+0xb0>
 810c882:	2a69      	cmp	r2, #105	; 0x69
 810c884:	d029      	beq.n	810c8da <_strtod_l+0x352>
 810c886:	dc26      	bgt.n	810c8d6 <_strtod_l+0x34e>
 810c888:	2a49      	cmp	r2, #73	; 0x49
 810c88a:	d026      	beq.n	810c8da <_strtod_l+0x352>
 810c88c:	2a4e      	cmp	r2, #78	; 0x4e
 810c88e:	f47f aed3 	bne.w	810c638 <_strtod_l+0xb0>
 810c892:	499b      	ldr	r1, [pc, #620]	; (810cb00 <_strtod_l+0x578>)
 810c894:	a815      	add	r0, sp, #84	; 0x54
 810c896:	f001 fbff 	bl	810e098 <__match>
 810c89a:	2800      	cmp	r0, #0
 810c89c:	f43f aecc 	beq.w	810c638 <_strtod_l+0xb0>
 810c8a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c8a2:	781b      	ldrb	r3, [r3, #0]
 810c8a4:	2b28      	cmp	r3, #40	; 0x28
 810c8a6:	d12f      	bne.n	810c908 <_strtod_l+0x380>
 810c8a8:	4996      	ldr	r1, [pc, #600]	; (810cb04 <_strtod_l+0x57c>)
 810c8aa:	aa18      	add	r2, sp, #96	; 0x60
 810c8ac:	a815      	add	r0, sp, #84	; 0x54
 810c8ae:	f001 fc07 	bl	810e0c0 <__hexnan>
 810c8b2:	2805      	cmp	r0, #5
 810c8b4:	d128      	bne.n	810c908 <_strtod_l+0x380>
 810c8b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810c8b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810c8bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 810c8c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 810c8c4:	e69b      	b.n	810c5fe <_strtod_l+0x76>
 810c8c6:	9f08      	ldr	r7, [sp, #32]
 810c8c8:	210a      	movs	r1, #10
 810c8ca:	fb01 2107 	mla	r1, r1, r7, r2
 810c8ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 810c8d2:	9208      	str	r2, [sp, #32]
 810c8d4:	e7b5      	b.n	810c842 <_strtod_l+0x2ba>
 810c8d6:	2a6e      	cmp	r2, #110	; 0x6e
 810c8d8:	e7d9      	b.n	810c88e <_strtod_l+0x306>
 810c8da:	498b      	ldr	r1, [pc, #556]	; (810cb08 <_strtod_l+0x580>)
 810c8dc:	a815      	add	r0, sp, #84	; 0x54
 810c8de:	f001 fbdb 	bl	810e098 <__match>
 810c8e2:	2800      	cmp	r0, #0
 810c8e4:	f43f aea8 	beq.w	810c638 <_strtod_l+0xb0>
 810c8e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c8ea:	4988      	ldr	r1, [pc, #544]	; (810cb0c <_strtod_l+0x584>)
 810c8ec:	3b01      	subs	r3, #1
 810c8ee:	a815      	add	r0, sp, #84	; 0x54
 810c8f0:	9315      	str	r3, [sp, #84]	; 0x54
 810c8f2:	f001 fbd1 	bl	810e098 <__match>
 810c8f6:	b910      	cbnz	r0, 810c8fe <_strtod_l+0x376>
 810c8f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c8fa:	3301      	adds	r3, #1
 810c8fc:	9315      	str	r3, [sp, #84]	; 0x54
 810c8fe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 810cb1c <_strtod_l+0x594>
 810c902:	f04f 0800 	mov.w	r8, #0
 810c906:	e67a      	b.n	810c5fe <_strtod_l+0x76>
 810c908:	4881      	ldr	r0, [pc, #516]	; (810cb10 <_strtod_l+0x588>)
 810c90a:	f001 f8e1 	bl	810dad0 <nan>
 810c90e:	ec59 8b10 	vmov	r8, r9, d0
 810c912:	e674      	b.n	810c5fe <_strtod_l+0x76>
 810c914:	9b05      	ldr	r3, [sp, #20]
 810c916:	9809      	ldr	r0, [sp, #36]	; 0x24
 810c918:	1afb      	subs	r3, r7, r3
 810c91a:	f1bb 0f00 	cmp.w	fp, #0
 810c91e:	bf08      	it	eq
 810c920:	46b3      	moveq	fp, r6
 810c922:	2e10      	cmp	r6, #16
 810c924:	9308      	str	r3, [sp, #32]
 810c926:	4635      	mov	r5, r6
 810c928:	bfa8      	it	ge
 810c92a:	2510      	movge	r5, #16
 810c92c:	f7f3 fe72 	bl	8100614 <__aeabi_ui2d>
 810c930:	2e09      	cmp	r6, #9
 810c932:	4680      	mov	r8, r0
 810c934:	4689      	mov	r9, r1
 810c936:	dd13      	ble.n	810c960 <_strtod_l+0x3d8>
 810c938:	4b76      	ldr	r3, [pc, #472]	; (810cb14 <_strtod_l+0x58c>)
 810c93a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810c93e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810c942:	f7f3 fee1 	bl	8100708 <__aeabi_dmul>
 810c946:	4680      	mov	r8, r0
 810c948:	4650      	mov	r0, sl
 810c94a:	4689      	mov	r9, r1
 810c94c:	f7f3 fe62 	bl	8100614 <__aeabi_ui2d>
 810c950:	4602      	mov	r2, r0
 810c952:	460b      	mov	r3, r1
 810c954:	4640      	mov	r0, r8
 810c956:	4649      	mov	r1, r9
 810c958:	f7f3 fd20 	bl	810039c <__adddf3>
 810c95c:	4680      	mov	r8, r0
 810c95e:	4689      	mov	r9, r1
 810c960:	2e0f      	cmp	r6, #15
 810c962:	dc38      	bgt.n	810c9d6 <_strtod_l+0x44e>
 810c964:	9b08      	ldr	r3, [sp, #32]
 810c966:	2b00      	cmp	r3, #0
 810c968:	f43f ae49 	beq.w	810c5fe <_strtod_l+0x76>
 810c96c:	dd24      	ble.n	810c9b8 <_strtod_l+0x430>
 810c96e:	2b16      	cmp	r3, #22
 810c970:	dc0b      	bgt.n	810c98a <_strtod_l+0x402>
 810c972:	4968      	ldr	r1, [pc, #416]	; (810cb14 <_strtod_l+0x58c>)
 810c974:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c978:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c97c:	4642      	mov	r2, r8
 810c97e:	464b      	mov	r3, r9
 810c980:	f7f3 fec2 	bl	8100708 <__aeabi_dmul>
 810c984:	4680      	mov	r8, r0
 810c986:	4689      	mov	r9, r1
 810c988:	e639      	b.n	810c5fe <_strtod_l+0x76>
 810c98a:	9a08      	ldr	r2, [sp, #32]
 810c98c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 810c990:	4293      	cmp	r3, r2
 810c992:	db20      	blt.n	810c9d6 <_strtod_l+0x44e>
 810c994:	4c5f      	ldr	r4, [pc, #380]	; (810cb14 <_strtod_l+0x58c>)
 810c996:	f1c6 060f 	rsb	r6, r6, #15
 810c99a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 810c99e:	4642      	mov	r2, r8
 810c9a0:	464b      	mov	r3, r9
 810c9a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c9a6:	f7f3 feaf 	bl	8100708 <__aeabi_dmul>
 810c9aa:	9b08      	ldr	r3, [sp, #32]
 810c9ac:	1b9e      	subs	r6, r3, r6
 810c9ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 810c9b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 810c9b6:	e7e3      	b.n	810c980 <_strtod_l+0x3f8>
 810c9b8:	9b08      	ldr	r3, [sp, #32]
 810c9ba:	3316      	adds	r3, #22
 810c9bc:	db0b      	blt.n	810c9d6 <_strtod_l+0x44e>
 810c9be:	9b05      	ldr	r3, [sp, #20]
 810c9c0:	1bdf      	subs	r7, r3, r7
 810c9c2:	4b54      	ldr	r3, [pc, #336]	; (810cb14 <_strtod_l+0x58c>)
 810c9c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 810c9c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 810c9cc:	4640      	mov	r0, r8
 810c9ce:	4649      	mov	r1, r9
 810c9d0:	f7f3 ffc4 	bl	810095c <__aeabi_ddiv>
 810c9d4:	e7d6      	b.n	810c984 <_strtod_l+0x3fc>
 810c9d6:	9b08      	ldr	r3, [sp, #32]
 810c9d8:	1b75      	subs	r5, r6, r5
 810c9da:	441d      	add	r5, r3
 810c9dc:	2d00      	cmp	r5, #0
 810c9de:	dd70      	ble.n	810cac2 <_strtod_l+0x53a>
 810c9e0:	f015 030f 	ands.w	r3, r5, #15
 810c9e4:	d00a      	beq.n	810c9fc <_strtod_l+0x474>
 810c9e6:	494b      	ldr	r1, [pc, #300]	; (810cb14 <_strtod_l+0x58c>)
 810c9e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c9ec:	4642      	mov	r2, r8
 810c9ee:	464b      	mov	r3, r9
 810c9f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c9f4:	f7f3 fe88 	bl	8100708 <__aeabi_dmul>
 810c9f8:	4680      	mov	r8, r0
 810c9fa:	4689      	mov	r9, r1
 810c9fc:	f035 050f 	bics.w	r5, r5, #15
 810ca00:	d04d      	beq.n	810ca9e <_strtod_l+0x516>
 810ca02:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 810ca06:	dd22      	ble.n	810ca4e <_strtod_l+0x4c6>
 810ca08:	2500      	movs	r5, #0
 810ca0a:	46ab      	mov	fp, r5
 810ca0c:	9509      	str	r5, [sp, #36]	; 0x24
 810ca0e:	9505      	str	r5, [sp, #20]
 810ca10:	2322      	movs	r3, #34	; 0x22
 810ca12:	f8df 9108 	ldr.w	r9, [pc, #264]	; 810cb1c <_strtod_l+0x594>
 810ca16:	6023      	str	r3, [r4, #0]
 810ca18:	f04f 0800 	mov.w	r8, #0
 810ca1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ca1e:	2b00      	cmp	r3, #0
 810ca20:	f43f aded 	beq.w	810c5fe <_strtod_l+0x76>
 810ca24:	9916      	ldr	r1, [sp, #88]	; 0x58
 810ca26:	4620      	mov	r0, r4
 810ca28:	f7ff f924 	bl	810bc74 <_Bfree>
 810ca2c:	9905      	ldr	r1, [sp, #20]
 810ca2e:	4620      	mov	r0, r4
 810ca30:	f7ff f920 	bl	810bc74 <_Bfree>
 810ca34:	4659      	mov	r1, fp
 810ca36:	4620      	mov	r0, r4
 810ca38:	f7ff f91c 	bl	810bc74 <_Bfree>
 810ca3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810ca3e:	4620      	mov	r0, r4
 810ca40:	f7ff f918 	bl	810bc74 <_Bfree>
 810ca44:	4629      	mov	r1, r5
 810ca46:	4620      	mov	r0, r4
 810ca48:	f7ff f914 	bl	810bc74 <_Bfree>
 810ca4c:	e5d7      	b.n	810c5fe <_strtod_l+0x76>
 810ca4e:	4b32      	ldr	r3, [pc, #200]	; (810cb18 <_strtod_l+0x590>)
 810ca50:	9304      	str	r3, [sp, #16]
 810ca52:	2300      	movs	r3, #0
 810ca54:	112d      	asrs	r5, r5, #4
 810ca56:	4640      	mov	r0, r8
 810ca58:	4649      	mov	r1, r9
 810ca5a:	469a      	mov	sl, r3
 810ca5c:	2d01      	cmp	r5, #1
 810ca5e:	dc21      	bgt.n	810caa4 <_strtod_l+0x51c>
 810ca60:	b10b      	cbz	r3, 810ca66 <_strtod_l+0x4de>
 810ca62:	4680      	mov	r8, r0
 810ca64:	4689      	mov	r9, r1
 810ca66:	492c      	ldr	r1, [pc, #176]	; (810cb18 <_strtod_l+0x590>)
 810ca68:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 810ca6c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810ca70:	4642      	mov	r2, r8
 810ca72:	464b      	mov	r3, r9
 810ca74:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ca78:	f7f3 fe46 	bl	8100708 <__aeabi_dmul>
 810ca7c:	4b27      	ldr	r3, [pc, #156]	; (810cb1c <_strtod_l+0x594>)
 810ca7e:	460a      	mov	r2, r1
 810ca80:	400b      	ands	r3, r1
 810ca82:	4927      	ldr	r1, [pc, #156]	; (810cb20 <_strtod_l+0x598>)
 810ca84:	428b      	cmp	r3, r1
 810ca86:	4680      	mov	r8, r0
 810ca88:	d8be      	bhi.n	810ca08 <_strtod_l+0x480>
 810ca8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810ca8e:	428b      	cmp	r3, r1
 810ca90:	bf86      	itte	hi
 810ca92:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 810cb24 <_strtod_l+0x59c>
 810ca96:	f04f 38ff 	movhi.w	r8, #4294967295
 810ca9a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 810ca9e:	2300      	movs	r3, #0
 810caa0:	9304      	str	r3, [sp, #16]
 810caa2:	e07b      	b.n	810cb9c <_strtod_l+0x614>
 810caa4:	07ea      	lsls	r2, r5, #31
 810caa6:	d505      	bpl.n	810cab4 <_strtod_l+0x52c>
 810caa8:	9b04      	ldr	r3, [sp, #16]
 810caaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810caae:	f7f3 fe2b 	bl	8100708 <__aeabi_dmul>
 810cab2:	2301      	movs	r3, #1
 810cab4:	9a04      	ldr	r2, [sp, #16]
 810cab6:	3208      	adds	r2, #8
 810cab8:	f10a 0a01 	add.w	sl, sl, #1
 810cabc:	106d      	asrs	r5, r5, #1
 810cabe:	9204      	str	r2, [sp, #16]
 810cac0:	e7cc      	b.n	810ca5c <_strtod_l+0x4d4>
 810cac2:	d0ec      	beq.n	810ca9e <_strtod_l+0x516>
 810cac4:	426d      	negs	r5, r5
 810cac6:	f015 020f 	ands.w	r2, r5, #15
 810caca:	d00a      	beq.n	810cae2 <_strtod_l+0x55a>
 810cacc:	4b11      	ldr	r3, [pc, #68]	; (810cb14 <_strtod_l+0x58c>)
 810cace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810cad2:	4640      	mov	r0, r8
 810cad4:	4649      	mov	r1, r9
 810cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cada:	f7f3 ff3f 	bl	810095c <__aeabi_ddiv>
 810cade:	4680      	mov	r8, r0
 810cae0:	4689      	mov	r9, r1
 810cae2:	112d      	asrs	r5, r5, #4
 810cae4:	d0db      	beq.n	810ca9e <_strtod_l+0x516>
 810cae6:	2d1f      	cmp	r5, #31
 810cae8:	dd1e      	ble.n	810cb28 <_strtod_l+0x5a0>
 810caea:	2500      	movs	r5, #0
 810caec:	46ab      	mov	fp, r5
 810caee:	9509      	str	r5, [sp, #36]	; 0x24
 810caf0:	9505      	str	r5, [sp, #20]
 810caf2:	2322      	movs	r3, #34	; 0x22
 810caf4:	f04f 0800 	mov.w	r8, #0
 810caf8:	f04f 0900 	mov.w	r9, #0
 810cafc:	6023      	str	r3, [r4, #0]
 810cafe:	e78d      	b.n	810ca1c <_strtod_l+0x494>
 810cb00:	0810e875 	.word	0x0810e875
 810cb04:	0810ea9c 	.word	0x0810ea9c
 810cb08:	0810e86d 	.word	0x0810e86d
 810cb0c:	0810e8a4 	.word	0x0810e8a4
 810cb10:	0810ec2d 	.word	0x0810ec2d
 810cb14:	0810e9b0 	.word	0x0810e9b0
 810cb18:	0810e988 	.word	0x0810e988
 810cb1c:	7ff00000 	.word	0x7ff00000
 810cb20:	7ca00000 	.word	0x7ca00000
 810cb24:	7fefffff 	.word	0x7fefffff
 810cb28:	f015 0310 	ands.w	r3, r5, #16
 810cb2c:	bf18      	it	ne
 810cb2e:	236a      	movne	r3, #106	; 0x6a
 810cb30:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 810ced4 <_strtod_l+0x94c>
 810cb34:	9304      	str	r3, [sp, #16]
 810cb36:	4640      	mov	r0, r8
 810cb38:	4649      	mov	r1, r9
 810cb3a:	2300      	movs	r3, #0
 810cb3c:	07ea      	lsls	r2, r5, #31
 810cb3e:	d504      	bpl.n	810cb4a <_strtod_l+0x5c2>
 810cb40:	e9da 2300 	ldrd	r2, r3, [sl]
 810cb44:	f7f3 fde0 	bl	8100708 <__aeabi_dmul>
 810cb48:	2301      	movs	r3, #1
 810cb4a:	106d      	asrs	r5, r5, #1
 810cb4c:	f10a 0a08 	add.w	sl, sl, #8
 810cb50:	d1f4      	bne.n	810cb3c <_strtod_l+0x5b4>
 810cb52:	b10b      	cbz	r3, 810cb58 <_strtod_l+0x5d0>
 810cb54:	4680      	mov	r8, r0
 810cb56:	4689      	mov	r9, r1
 810cb58:	9b04      	ldr	r3, [sp, #16]
 810cb5a:	b1bb      	cbz	r3, 810cb8c <_strtod_l+0x604>
 810cb5c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 810cb60:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810cb64:	2b00      	cmp	r3, #0
 810cb66:	4649      	mov	r1, r9
 810cb68:	dd10      	ble.n	810cb8c <_strtod_l+0x604>
 810cb6a:	2b1f      	cmp	r3, #31
 810cb6c:	f340 811e 	ble.w	810cdac <_strtod_l+0x824>
 810cb70:	2b34      	cmp	r3, #52	; 0x34
 810cb72:	bfde      	ittt	le
 810cb74:	f04f 33ff 	movle.w	r3, #4294967295
 810cb78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810cb7c:	4093      	lslle	r3, r2
 810cb7e:	f04f 0800 	mov.w	r8, #0
 810cb82:	bfcc      	ite	gt
 810cb84:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 810cb88:	ea03 0901 	andle.w	r9, r3, r1
 810cb8c:	2200      	movs	r2, #0
 810cb8e:	2300      	movs	r3, #0
 810cb90:	4640      	mov	r0, r8
 810cb92:	4649      	mov	r1, r9
 810cb94:	f7f4 f820 	bl	8100bd8 <__aeabi_dcmpeq>
 810cb98:	2800      	cmp	r0, #0
 810cb9a:	d1a6      	bne.n	810caea <_strtod_l+0x562>
 810cb9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cb9e:	9300      	str	r3, [sp, #0]
 810cba0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810cba2:	4633      	mov	r3, r6
 810cba4:	465a      	mov	r2, fp
 810cba6:	4620      	mov	r0, r4
 810cba8:	f7ff f8cc 	bl	810bd44 <__s2b>
 810cbac:	9009      	str	r0, [sp, #36]	; 0x24
 810cbae:	2800      	cmp	r0, #0
 810cbb0:	f43f af2a 	beq.w	810ca08 <_strtod_l+0x480>
 810cbb4:	9a08      	ldr	r2, [sp, #32]
 810cbb6:	9b05      	ldr	r3, [sp, #20]
 810cbb8:	2a00      	cmp	r2, #0
 810cbba:	eba3 0307 	sub.w	r3, r3, r7
 810cbbe:	bfa8      	it	ge
 810cbc0:	2300      	movge	r3, #0
 810cbc2:	930c      	str	r3, [sp, #48]	; 0x30
 810cbc4:	2500      	movs	r5, #0
 810cbc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810cbca:	9312      	str	r3, [sp, #72]	; 0x48
 810cbcc:	46ab      	mov	fp, r5
 810cbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cbd0:	4620      	mov	r0, r4
 810cbd2:	6859      	ldr	r1, [r3, #4]
 810cbd4:	f7ff f80e 	bl	810bbf4 <_Balloc>
 810cbd8:	9005      	str	r0, [sp, #20]
 810cbda:	2800      	cmp	r0, #0
 810cbdc:	f43f af18 	beq.w	810ca10 <_strtod_l+0x488>
 810cbe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cbe2:	691a      	ldr	r2, [r3, #16]
 810cbe4:	3202      	adds	r2, #2
 810cbe6:	f103 010c 	add.w	r1, r3, #12
 810cbea:	0092      	lsls	r2, r2, #2
 810cbec:	300c      	adds	r0, #12
 810cbee:	f000 ff61 	bl	810dab4 <memcpy>
 810cbf2:	ec49 8b10 	vmov	d0, r8, r9
 810cbf6:	aa18      	add	r2, sp, #96	; 0x60
 810cbf8:	a917      	add	r1, sp, #92	; 0x5c
 810cbfa:	4620      	mov	r0, r4
 810cbfc:	f7ff fbd6 	bl	810c3ac <__d2b>
 810cc00:	ec49 8b18 	vmov	d8, r8, r9
 810cc04:	9016      	str	r0, [sp, #88]	; 0x58
 810cc06:	2800      	cmp	r0, #0
 810cc08:	f43f af02 	beq.w	810ca10 <_strtod_l+0x488>
 810cc0c:	2101      	movs	r1, #1
 810cc0e:	4620      	mov	r0, r4
 810cc10:	f7ff f930 	bl	810be74 <__i2b>
 810cc14:	4683      	mov	fp, r0
 810cc16:	2800      	cmp	r0, #0
 810cc18:	f43f aefa 	beq.w	810ca10 <_strtod_l+0x488>
 810cc1c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810cc1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810cc20:	2e00      	cmp	r6, #0
 810cc22:	bfab      	itete	ge
 810cc24:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 810cc26:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 810cc28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810cc2a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 810cc2e:	bfac      	ite	ge
 810cc30:	eb06 0a03 	addge.w	sl, r6, r3
 810cc34:	1b9f      	sublt	r7, r3, r6
 810cc36:	9b04      	ldr	r3, [sp, #16]
 810cc38:	1af6      	subs	r6, r6, r3
 810cc3a:	4416      	add	r6, r2
 810cc3c:	4ba0      	ldr	r3, [pc, #640]	; (810cec0 <_strtod_l+0x938>)
 810cc3e:	3e01      	subs	r6, #1
 810cc40:	429e      	cmp	r6, r3
 810cc42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810cc46:	f280 80c4 	bge.w	810cdd2 <_strtod_l+0x84a>
 810cc4a:	1b9b      	subs	r3, r3, r6
 810cc4c:	2b1f      	cmp	r3, #31
 810cc4e:	eba2 0203 	sub.w	r2, r2, r3
 810cc52:	f04f 0101 	mov.w	r1, #1
 810cc56:	f300 80b0 	bgt.w	810cdba <_strtod_l+0x832>
 810cc5a:	fa01 f303 	lsl.w	r3, r1, r3
 810cc5e:	930e      	str	r3, [sp, #56]	; 0x38
 810cc60:	2300      	movs	r3, #0
 810cc62:	930d      	str	r3, [sp, #52]	; 0x34
 810cc64:	eb0a 0602 	add.w	r6, sl, r2
 810cc68:	9b04      	ldr	r3, [sp, #16]
 810cc6a:	45b2      	cmp	sl, r6
 810cc6c:	4417      	add	r7, r2
 810cc6e:	441f      	add	r7, r3
 810cc70:	4653      	mov	r3, sl
 810cc72:	bfa8      	it	ge
 810cc74:	4633      	movge	r3, r6
 810cc76:	42bb      	cmp	r3, r7
 810cc78:	bfa8      	it	ge
 810cc7a:	463b      	movge	r3, r7
 810cc7c:	2b00      	cmp	r3, #0
 810cc7e:	bfc2      	ittt	gt
 810cc80:	1af6      	subgt	r6, r6, r3
 810cc82:	1aff      	subgt	r7, r7, r3
 810cc84:	ebaa 0a03 	subgt.w	sl, sl, r3
 810cc88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810cc8a:	2b00      	cmp	r3, #0
 810cc8c:	dd17      	ble.n	810ccbe <_strtod_l+0x736>
 810cc8e:	4659      	mov	r1, fp
 810cc90:	461a      	mov	r2, r3
 810cc92:	4620      	mov	r0, r4
 810cc94:	f7ff f9ae 	bl	810bff4 <__pow5mult>
 810cc98:	4683      	mov	fp, r0
 810cc9a:	2800      	cmp	r0, #0
 810cc9c:	f43f aeb8 	beq.w	810ca10 <_strtod_l+0x488>
 810cca0:	4601      	mov	r1, r0
 810cca2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810cca4:	4620      	mov	r0, r4
 810cca6:	f7ff f8fb 	bl	810bea0 <__multiply>
 810ccaa:	900b      	str	r0, [sp, #44]	; 0x2c
 810ccac:	2800      	cmp	r0, #0
 810ccae:	f43f aeaf 	beq.w	810ca10 <_strtod_l+0x488>
 810ccb2:	9916      	ldr	r1, [sp, #88]	; 0x58
 810ccb4:	4620      	mov	r0, r4
 810ccb6:	f7fe ffdd 	bl	810bc74 <_Bfree>
 810ccba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ccbc:	9316      	str	r3, [sp, #88]	; 0x58
 810ccbe:	2e00      	cmp	r6, #0
 810ccc0:	f300 808c 	bgt.w	810cddc <_strtod_l+0x854>
 810ccc4:	9b08      	ldr	r3, [sp, #32]
 810ccc6:	2b00      	cmp	r3, #0
 810ccc8:	dd08      	ble.n	810ccdc <_strtod_l+0x754>
 810ccca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810cccc:	9905      	ldr	r1, [sp, #20]
 810ccce:	4620      	mov	r0, r4
 810ccd0:	f7ff f990 	bl	810bff4 <__pow5mult>
 810ccd4:	9005      	str	r0, [sp, #20]
 810ccd6:	2800      	cmp	r0, #0
 810ccd8:	f43f ae9a 	beq.w	810ca10 <_strtod_l+0x488>
 810ccdc:	2f00      	cmp	r7, #0
 810ccde:	dd08      	ble.n	810ccf2 <_strtod_l+0x76a>
 810cce0:	9905      	ldr	r1, [sp, #20]
 810cce2:	463a      	mov	r2, r7
 810cce4:	4620      	mov	r0, r4
 810cce6:	f7ff f9df 	bl	810c0a8 <__lshift>
 810ccea:	9005      	str	r0, [sp, #20]
 810ccec:	2800      	cmp	r0, #0
 810ccee:	f43f ae8f 	beq.w	810ca10 <_strtod_l+0x488>
 810ccf2:	f1ba 0f00 	cmp.w	sl, #0
 810ccf6:	dd08      	ble.n	810cd0a <_strtod_l+0x782>
 810ccf8:	4659      	mov	r1, fp
 810ccfa:	4652      	mov	r2, sl
 810ccfc:	4620      	mov	r0, r4
 810ccfe:	f7ff f9d3 	bl	810c0a8 <__lshift>
 810cd02:	4683      	mov	fp, r0
 810cd04:	2800      	cmp	r0, #0
 810cd06:	f43f ae83 	beq.w	810ca10 <_strtod_l+0x488>
 810cd0a:	9a05      	ldr	r2, [sp, #20]
 810cd0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 810cd0e:	4620      	mov	r0, r4
 810cd10:	f7ff fa52 	bl	810c1b8 <__mdiff>
 810cd14:	4605      	mov	r5, r0
 810cd16:	2800      	cmp	r0, #0
 810cd18:	f43f ae7a 	beq.w	810ca10 <_strtod_l+0x488>
 810cd1c:	68c3      	ldr	r3, [r0, #12]
 810cd1e:	930b      	str	r3, [sp, #44]	; 0x2c
 810cd20:	2300      	movs	r3, #0
 810cd22:	60c3      	str	r3, [r0, #12]
 810cd24:	4659      	mov	r1, fp
 810cd26:	f7ff fa2b 	bl	810c180 <__mcmp>
 810cd2a:	2800      	cmp	r0, #0
 810cd2c:	da60      	bge.n	810cdf0 <_strtod_l+0x868>
 810cd2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810cd30:	ea53 0308 	orrs.w	r3, r3, r8
 810cd34:	f040 8084 	bne.w	810ce40 <_strtod_l+0x8b8>
 810cd38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810cd3c:	2b00      	cmp	r3, #0
 810cd3e:	d17f      	bne.n	810ce40 <_strtod_l+0x8b8>
 810cd40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810cd44:	0d1b      	lsrs	r3, r3, #20
 810cd46:	051b      	lsls	r3, r3, #20
 810cd48:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810cd4c:	d978      	bls.n	810ce40 <_strtod_l+0x8b8>
 810cd4e:	696b      	ldr	r3, [r5, #20]
 810cd50:	b913      	cbnz	r3, 810cd58 <_strtod_l+0x7d0>
 810cd52:	692b      	ldr	r3, [r5, #16]
 810cd54:	2b01      	cmp	r3, #1
 810cd56:	dd73      	ble.n	810ce40 <_strtod_l+0x8b8>
 810cd58:	4629      	mov	r1, r5
 810cd5a:	2201      	movs	r2, #1
 810cd5c:	4620      	mov	r0, r4
 810cd5e:	f7ff f9a3 	bl	810c0a8 <__lshift>
 810cd62:	4659      	mov	r1, fp
 810cd64:	4605      	mov	r5, r0
 810cd66:	f7ff fa0b 	bl	810c180 <__mcmp>
 810cd6a:	2800      	cmp	r0, #0
 810cd6c:	dd68      	ble.n	810ce40 <_strtod_l+0x8b8>
 810cd6e:	9904      	ldr	r1, [sp, #16]
 810cd70:	4a54      	ldr	r2, [pc, #336]	; (810cec4 <_strtod_l+0x93c>)
 810cd72:	464b      	mov	r3, r9
 810cd74:	2900      	cmp	r1, #0
 810cd76:	f000 8084 	beq.w	810ce82 <_strtod_l+0x8fa>
 810cd7a:	ea02 0109 	and.w	r1, r2, r9
 810cd7e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810cd82:	dc7e      	bgt.n	810ce82 <_strtod_l+0x8fa>
 810cd84:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810cd88:	f77f aeb3 	ble.w	810caf2 <_strtod_l+0x56a>
 810cd8c:	4b4e      	ldr	r3, [pc, #312]	; (810cec8 <_strtod_l+0x940>)
 810cd8e:	4640      	mov	r0, r8
 810cd90:	4649      	mov	r1, r9
 810cd92:	2200      	movs	r2, #0
 810cd94:	f7f3 fcb8 	bl	8100708 <__aeabi_dmul>
 810cd98:	4b4a      	ldr	r3, [pc, #296]	; (810cec4 <_strtod_l+0x93c>)
 810cd9a:	400b      	ands	r3, r1
 810cd9c:	4680      	mov	r8, r0
 810cd9e:	4689      	mov	r9, r1
 810cda0:	2b00      	cmp	r3, #0
 810cda2:	f47f ae3f 	bne.w	810ca24 <_strtod_l+0x49c>
 810cda6:	2322      	movs	r3, #34	; 0x22
 810cda8:	6023      	str	r3, [r4, #0]
 810cdaa:	e63b      	b.n	810ca24 <_strtod_l+0x49c>
 810cdac:	f04f 32ff 	mov.w	r2, #4294967295
 810cdb0:	fa02 f303 	lsl.w	r3, r2, r3
 810cdb4:	ea03 0808 	and.w	r8, r3, r8
 810cdb8:	e6e8      	b.n	810cb8c <_strtod_l+0x604>
 810cdba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 810cdbe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 810cdc2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 810cdc6:	36e2      	adds	r6, #226	; 0xe2
 810cdc8:	fa01 f306 	lsl.w	r3, r1, r6
 810cdcc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 810cdd0:	e748      	b.n	810cc64 <_strtod_l+0x6dc>
 810cdd2:	2100      	movs	r1, #0
 810cdd4:	2301      	movs	r3, #1
 810cdd6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 810cdda:	e743      	b.n	810cc64 <_strtod_l+0x6dc>
 810cddc:	9916      	ldr	r1, [sp, #88]	; 0x58
 810cdde:	4632      	mov	r2, r6
 810cde0:	4620      	mov	r0, r4
 810cde2:	f7ff f961 	bl	810c0a8 <__lshift>
 810cde6:	9016      	str	r0, [sp, #88]	; 0x58
 810cde8:	2800      	cmp	r0, #0
 810cdea:	f47f af6b 	bne.w	810ccc4 <_strtod_l+0x73c>
 810cdee:	e60f      	b.n	810ca10 <_strtod_l+0x488>
 810cdf0:	46ca      	mov	sl, r9
 810cdf2:	d171      	bne.n	810ced8 <_strtod_l+0x950>
 810cdf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810cdf6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810cdfa:	b352      	cbz	r2, 810ce52 <_strtod_l+0x8ca>
 810cdfc:	4a33      	ldr	r2, [pc, #204]	; (810cecc <_strtod_l+0x944>)
 810cdfe:	4293      	cmp	r3, r2
 810ce00:	d12a      	bne.n	810ce58 <_strtod_l+0x8d0>
 810ce02:	9b04      	ldr	r3, [sp, #16]
 810ce04:	4641      	mov	r1, r8
 810ce06:	b1fb      	cbz	r3, 810ce48 <_strtod_l+0x8c0>
 810ce08:	4b2e      	ldr	r3, [pc, #184]	; (810cec4 <_strtod_l+0x93c>)
 810ce0a:	ea09 0303 	and.w	r3, r9, r3
 810ce0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810ce12:	f04f 32ff 	mov.w	r2, #4294967295
 810ce16:	d81a      	bhi.n	810ce4e <_strtod_l+0x8c6>
 810ce18:	0d1b      	lsrs	r3, r3, #20
 810ce1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810ce1e:	fa02 f303 	lsl.w	r3, r2, r3
 810ce22:	4299      	cmp	r1, r3
 810ce24:	d118      	bne.n	810ce58 <_strtod_l+0x8d0>
 810ce26:	4b2a      	ldr	r3, [pc, #168]	; (810ced0 <_strtod_l+0x948>)
 810ce28:	459a      	cmp	sl, r3
 810ce2a:	d102      	bne.n	810ce32 <_strtod_l+0x8aa>
 810ce2c:	3101      	adds	r1, #1
 810ce2e:	f43f adef 	beq.w	810ca10 <_strtod_l+0x488>
 810ce32:	4b24      	ldr	r3, [pc, #144]	; (810cec4 <_strtod_l+0x93c>)
 810ce34:	ea0a 0303 	and.w	r3, sl, r3
 810ce38:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 810ce3c:	f04f 0800 	mov.w	r8, #0
 810ce40:	9b04      	ldr	r3, [sp, #16]
 810ce42:	2b00      	cmp	r3, #0
 810ce44:	d1a2      	bne.n	810cd8c <_strtod_l+0x804>
 810ce46:	e5ed      	b.n	810ca24 <_strtod_l+0x49c>
 810ce48:	f04f 33ff 	mov.w	r3, #4294967295
 810ce4c:	e7e9      	b.n	810ce22 <_strtod_l+0x89a>
 810ce4e:	4613      	mov	r3, r2
 810ce50:	e7e7      	b.n	810ce22 <_strtod_l+0x89a>
 810ce52:	ea53 0308 	orrs.w	r3, r3, r8
 810ce56:	d08a      	beq.n	810cd6e <_strtod_l+0x7e6>
 810ce58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810ce5a:	b1e3      	cbz	r3, 810ce96 <_strtod_l+0x90e>
 810ce5c:	ea13 0f0a 	tst.w	r3, sl
 810ce60:	d0ee      	beq.n	810ce40 <_strtod_l+0x8b8>
 810ce62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ce64:	9a04      	ldr	r2, [sp, #16]
 810ce66:	4640      	mov	r0, r8
 810ce68:	4649      	mov	r1, r9
 810ce6a:	b1c3      	cbz	r3, 810ce9e <_strtod_l+0x916>
 810ce6c:	f7ff fb6f 	bl	810c54e <sulp>
 810ce70:	4602      	mov	r2, r0
 810ce72:	460b      	mov	r3, r1
 810ce74:	ec51 0b18 	vmov	r0, r1, d8
 810ce78:	f7f3 fa90 	bl	810039c <__adddf3>
 810ce7c:	4680      	mov	r8, r0
 810ce7e:	4689      	mov	r9, r1
 810ce80:	e7de      	b.n	810ce40 <_strtod_l+0x8b8>
 810ce82:	4013      	ands	r3, r2
 810ce84:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810ce88:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 810ce8c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 810ce90:	f04f 38ff 	mov.w	r8, #4294967295
 810ce94:	e7d4      	b.n	810ce40 <_strtod_l+0x8b8>
 810ce96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810ce98:	ea13 0f08 	tst.w	r3, r8
 810ce9c:	e7e0      	b.n	810ce60 <_strtod_l+0x8d8>
 810ce9e:	f7ff fb56 	bl	810c54e <sulp>
 810cea2:	4602      	mov	r2, r0
 810cea4:	460b      	mov	r3, r1
 810cea6:	ec51 0b18 	vmov	r0, r1, d8
 810ceaa:	f7f3 fa75 	bl	8100398 <__aeabi_dsub>
 810ceae:	2200      	movs	r2, #0
 810ceb0:	2300      	movs	r3, #0
 810ceb2:	4680      	mov	r8, r0
 810ceb4:	4689      	mov	r9, r1
 810ceb6:	f7f3 fe8f 	bl	8100bd8 <__aeabi_dcmpeq>
 810ceba:	2800      	cmp	r0, #0
 810cebc:	d0c0      	beq.n	810ce40 <_strtod_l+0x8b8>
 810cebe:	e618      	b.n	810caf2 <_strtod_l+0x56a>
 810cec0:	fffffc02 	.word	0xfffffc02
 810cec4:	7ff00000 	.word	0x7ff00000
 810cec8:	39500000 	.word	0x39500000
 810cecc:	000fffff 	.word	0x000fffff
 810ced0:	7fefffff 	.word	0x7fefffff
 810ced4:	0810eab0 	.word	0x0810eab0
 810ced8:	4659      	mov	r1, fp
 810ceda:	4628      	mov	r0, r5
 810cedc:	f7ff fac0 	bl	810c460 <__ratio>
 810cee0:	ec57 6b10 	vmov	r6, r7, d0
 810cee4:	ee10 0a10 	vmov	r0, s0
 810cee8:	2200      	movs	r2, #0
 810ceea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810ceee:	4639      	mov	r1, r7
 810cef0:	f7f3 fe86 	bl	8100c00 <__aeabi_dcmple>
 810cef4:	2800      	cmp	r0, #0
 810cef6:	d071      	beq.n	810cfdc <_strtod_l+0xa54>
 810cef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810cefa:	2b00      	cmp	r3, #0
 810cefc:	d17c      	bne.n	810cff8 <_strtod_l+0xa70>
 810cefe:	f1b8 0f00 	cmp.w	r8, #0
 810cf02:	d15a      	bne.n	810cfba <_strtod_l+0xa32>
 810cf04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810cf08:	2b00      	cmp	r3, #0
 810cf0a:	d15d      	bne.n	810cfc8 <_strtod_l+0xa40>
 810cf0c:	4b90      	ldr	r3, [pc, #576]	; (810d150 <_strtod_l+0xbc8>)
 810cf0e:	2200      	movs	r2, #0
 810cf10:	4630      	mov	r0, r6
 810cf12:	4639      	mov	r1, r7
 810cf14:	f7f3 fe6a 	bl	8100bec <__aeabi_dcmplt>
 810cf18:	2800      	cmp	r0, #0
 810cf1a:	d15c      	bne.n	810cfd6 <_strtod_l+0xa4e>
 810cf1c:	4630      	mov	r0, r6
 810cf1e:	4639      	mov	r1, r7
 810cf20:	4b8c      	ldr	r3, [pc, #560]	; (810d154 <_strtod_l+0xbcc>)
 810cf22:	2200      	movs	r2, #0
 810cf24:	f7f3 fbf0 	bl	8100708 <__aeabi_dmul>
 810cf28:	4606      	mov	r6, r0
 810cf2a:	460f      	mov	r7, r1
 810cf2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 810cf30:	9606      	str	r6, [sp, #24]
 810cf32:	9307      	str	r3, [sp, #28]
 810cf34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cf38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810cf3c:	4b86      	ldr	r3, [pc, #536]	; (810d158 <_strtod_l+0xbd0>)
 810cf3e:	ea0a 0303 	and.w	r3, sl, r3
 810cf42:	930d      	str	r3, [sp, #52]	; 0x34
 810cf44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810cf46:	4b85      	ldr	r3, [pc, #532]	; (810d15c <_strtod_l+0xbd4>)
 810cf48:	429a      	cmp	r2, r3
 810cf4a:	f040 8090 	bne.w	810d06e <_strtod_l+0xae6>
 810cf4e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 810cf52:	ec49 8b10 	vmov	d0, r8, r9
 810cf56:	f7ff f9b9 	bl	810c2cc <__ulp>
 810cf5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cf5e:	ec51 0b10 	vmov	r0, r1, d0
 810cf62:	f7f3 fbd1 	bl	8100708 <__aeabi_dmul>
 810cf66:	4642      	mov	r2, r8
 810cf68:	464b      	mov	r3, r9
 810cf6a:	f7f3 fa17 	bl	810039c <__adddf3>
 810cf6e:	460b      	mov	r3, r1
 810cf70:	4979      	ldr	r1, [pc, #484]	; (810d158 <_strtod_l+0xbd0>)
 810cf72:	4a7b      	ldr	r2, [pc, #492]	; (810d160 <_strtod_l+0xbd8>)
 810cf74:	4019      	ands	r1, r3
 810cf76:	4291      	cmp	r1, r2
 810cf78:	4680      	mov	r8, r0
 810cf7a:	d944      	bls.n	810d006 <_strtod_l+0xa7e>
 810cf7c:	ee18 2a90 	vmov	r2, s17
 810cf80:	4b78      	ldr	r3, [pc, #480]	; (810d164 <_strtod_l+0xbdc>)
 810cf82:	429a      	cmp	r2, r3
 810cf84:	d104      	bne.n	810cf90 <_strtod_l+0xa08>
 810cf86:	ee18 3a10 	vmov	r3, s16
 810cf8a:	3301      	adds	r3, #1
 810cf8c:	f43f ad40 	beq.w	810ca10 <_strtod_l+0x488>
 810cf90:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 810d164 <_strtod_l+0xbdc>
 810cf94:	f04f 38ff 	mov.w	r8, #4294967295
 810cf98:	9916      	ldr	r1, [sp, #88]	; 0x58
 810cf9a:	4620      	mov	r0, r4
 810cf9c:	f7fe fe6a 	bl	810bc74 <_Bfree>
 810cfa0:	9905      	ldr	r1, [sp, #20]
 810cfa2:	4620      	mov	r0, r4
 810cfa4:	f7fe fe66 	bl	810bc74 <_Bfree>
 810cfa8:	4659      	mov	r1, fp
 810cfaa:	4620      	mov	r0, r4
 810cfac:	f7fe fe62 	bl	810bc74 <_Bfree>
 810cfb0:	4629      	mov	r1, r5
 810cfb2:	4620      	mov	r0, r4
 810cfb4:	f7fe fe5e 	bl	810bc74 <_Bfree>
 810cfb8:	e609      	b.n	810cbce <_strtod_l+0x646>
 810cfba:	f1b8 0f01 	cmp.w	r8, #1
 810cfbe:	d103      	bne.n	810cfc8 <_strtod_l+0xa40>
 810cfc0:	f1b9 0f00 	cmp.w	r9, #0
 810cfc4:	f43f ad95 	beq.w	810caf2 <_strtod_l+0x56a>
 810cfc8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 810d120 <_strtod_l+0xb98>
 810cfcc:	4f60      	ldr	r7, [pc, #384]	; (810d150 <_strtod_l+0xbc8>)
 810cfce:	ed8d 7b06 	vstr	d7, [sp, #24]
 810cfd2:	2600      	movs	r6, #0
 810cfd4:	e7ae      	b.n	810cf34 <_strtod_l+0x9ac>
 810cfd6:	4f5f      	ldr	r7, [pc, #380]	; (810d154 <_strtod_l+0xbcc>)
 810cfd8:	2600      	movs	r6, #0
 810cfda:	e7a7      	b.n	810cf2c <_strtod_l+0x9a4>
 810cfdc:	4b5d      	ldr	r3, [pc, #372]	; (810d154 <_strtod_l+0xbcc>)
 810cfde:	4630      	mov	r0, r6
 810cfe0:	4639      	mov	r1, r7
 810cfe2:	2200      	movs	r2, #0
 810cfe4:	f7f3 fb90 	bl	8100708 <__aeabi_dmul>
 810cfe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810cfea:	4606      	mov	r6, r0
 810cfec:	460f      	mov	r7, r1
 810cfee:	2b00      	cmp	r3, #0
 810cff0:	d09c      	beq.n	810cf2c <_strtod_l+0x9a4>
 810cff2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810cff6:	e79d      	b.n	810cf34 <_strtod_l+0x9ac>
 810cff8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 810d128 <_strtod_l+0xba0>
 810cffc:	ed8d 7b06 	vstr	d7, [sp, #24]
 810d000:	ec57 6b17 	vmov	r6, r7, d7
 810d004:	e796      	b.n	810cf34 <_strtod_l+0x9ac>
 810d006:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 810d00a:	9b04      	ldr	r3, [sp, #16]
 810d00c:	46ca      	mov	sl, r9
 810d00e:	2b00      	cmp	r3, #0
 810d010:	d1c2      	bne.n	810cf98 <_strtod_l+0xa10>
 810d012:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810d016:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810d018:	0d1b      	lsrs	r3, r3, #20
 810d01a:	051b      	lsls	r3, r3, #20
 810d01c:	429a      	cmp	r2, r3
 810d01e:	d1bb      	bne.n	810cf98 <_strtod_l+0xa10>
 810d020:	4630      	mov	r0, r6
 810d022:	4639      	mov	r1, r7
 810d024:	f7f3 fed0 	bl	8100dc8 <__aeabi_d2lz>
 810d028:	f7f3 fb40 	bl	81006ac <__aeabi_l2d>
 810d02c:	4602      	mov	r2, r0
 810d02e:	460b      	mov	r3, r1
 810d030:	4630      	mov	r0, r6
 810d032:	4639      	mov	r1, r7
 810d034:	f7f3 f9b0 	bl	8100398 <__aeabi_dsub>
 810d038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810d03a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810d03e:	ea43 0308 	orr.w	r3, r3, r8
 810d042:	4313      	orrs	r3, r2
 810d044:	4606      	mov	r6, r0
 810d046:	460f      	mov	r7, r1
 810d048:	d054      	beq.n	810d0f4 <_strtod_l+0xb6c>
 810d04a:	a339      	add	r3, pc, #228	; (adr r3, 810d130 <_strtod_l+0xba8>)
 810d04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d050:	f7f3 fdcc 	bl	8100bec <__aeabi_dcmplt>
 810d054:	2800      	cmp	r0, #0
 810d056:	f47f ace5 	bne.w	810ca24 <_strtod_l+0x49c>
 810d05a:	a337      	add	r3, pc, #220	; (adr r3, 810d138 <_strtod_l+0xbb0>)
 810d05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d060:	4630      	mov	r0, r6
 810d062:	4639      	mov	r1, r7
 810d064:	f7f3 fde0 	bl	8100c28 <__aeabi_dcmpgt>
 810d068:	2800      	cmp	r0, #0
 810d06a:	d095      	beq.n	810cf98 <_strtod_l+0xa10>
 810d06c:	e4da      	b.n	810ca24 <_strtod_l+0x49c>
 810d06e:	9b04      	ldr	r3, [sp, #16]
 810d070:	b333      	cbz	r3, 810d0c0 <_strtod_l+0xb38>
 810d072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d074:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810d078:	d822      	bhi.n	810d0c0 <_strtod_l+0xb38>
 810d07a:	a331      	add	r3, pc, #196	; (adr r3, 810d140 <_strtod_l+0xbb8>)
 810d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d080:	4630      	mov	r0, r6
 810d082:	4639      	mov	r1, r7
 810d084:	f7f3 fdbc 	bl	8100c00 <__aeabi_dcmple>
 810d088:	b1a0      	cbz	r0, 810d0b4 <_strtod_l+0xb2c>
 810d08a:	4639      	mov	r1, r7
 810d08c:	4630      	mov	r0, r6
 810d08e:	f7f3 fe13 	bl	8100cb8 <__aeabi_d2uiz>
 810d092:	2801      	cmp	r0, #1
 810d094:	bf38      	it	cc
 810d096:	2001      	movcc	r0, #1
 810d098:	f7f3 fabc 	bl	8100614 <__aeabi_ui2d>
 810d09c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d09e:	4606      	mov	r6, r0
 810d0a0:	460f      	mov	r7, r1
 810d0a2:	bb23      	cbnz	r3, 810d0ee <_strtod_l+0xb66>
 810d0a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810d0a8:	9010      	str	r0, [sp, #64]	; 0x40
 810d0aa:	9311      	str	r3, [sp, #68]	; 0x44
 810d0ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810d0b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810d0b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810d0b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810d0b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810d0bc:	1a9b      	subs	r3, r3, r2
 810d0be:	930f      	str	r3, [sp, #60]	; 0x3c
 810d0c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810d0c4:	eeb0 0a48 	vmov.f32	s0, s16
 810d0c8:	eef0 0a68 	vmov.f32	s1, s17
 810d0cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 810d0d0:	f7ff f8fc 	bl	810c2cc <__ulp>
 810d0d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810d0d8:	ec53 2b10 	vmov	r2, r3, d0
 810d0dc:	f7f3 fb14 	bl	8100708 <__aeabi_dmul>
 810d0e0:	ec53 2b18 	vmov	r2, r3, d8
 810d0e4:	f7f3 f95a 	bl	810039c <__adddf3>
 810d0e8:	4680      	mov	r8, r0
 810d0ea:	4689      	mov	r9, r1
 810d0ec:	e78d      	b.n	810d00a <_strtod_l+0xa82>
 810d0ee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 810d0f2:	e7db      	b.n	810d0ac <_strtod_l+0xb24>
 810d0f4:	a314      	add	r3, pc, #80	; (adr r3, 810d148 <_strtod_l+0xbc0>)
 810d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0fa:	f7f3 fd77 	bl	8100bec <__aeabi_dcmplt>
 810d0fe:	e7b3      	b.n	810d068 <_strtod_l+0xae0>
 810d100:	2300      	movs	r3, #0
 810d102:	930a      	str	r3, [sp, #40]	; 0x28
 810d104:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810d106:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d108:	6013      	str	r3, [r2, #0]
 810d10a:	f7ff ba7c 	b.w	810c606 <_strtod_l+0x7e>
 810d10e:	2a65      	cmp	r2, #101	; 0x65
 810d110:	f43f ab75 	beq.w	810c7fe <_strtod_l+0x276>
 810d114:	2a45      	cmp	r2, #69	; 0x45
 810d116:	f43f ab72 	beq.w	810c7fe <_strtod_l+0x276>
 810d11a:	2301      	movs	r3, #1
 810d11c:	f7ff bbaa 	b.w	810c874 <_strtod_l+0x2ec>
 810d120:	00000000 	.word	0x00000000
 810d124:	bff00000 	.word	0xbff00000
 810d128:	00000000 	.word	0x00000000
 810d12c:	3ff00000 	.word	0x3ff00000
 810d130:	94a03595 	.word	0x94a03595
 810d134:	3fdfffff 	.word	0x3fdfffff
 810d138:	35afe535 	.word	0x35afe535
 810d13c:	3fe00000 	.word	0x3fe00000
 810d140:	ffc00000 	.word	0xffc00000
 810d144:	41dfffff 	.word	0x41dfffff
 810d148:	94a03595 	.word	0x94a03595
 810d14c:	3fcfffff 	.word	0x3fcfffff
 810d150:	3ff00000 	.word	0x3ff00000
 810d154:	3fe00000 	.word	0x3fe00000
 810d158:	7ff00000 	.word	0x7ff00000
 810d15c:	7fe00000 	.word	0x7fe00000
 810d160:	7c9fffff 	.word	0x7c9fffff
 810d164:	7fefffff 	.word	0x7fefffff

0810d168 <_strtod_r>:
 810d168:	4b01      	ldr	r3, [pc, #4]	; (810d170 <_strtod_r+0x8>)
 810d16a:	f7ff ba0d 	b.w	810c588 <_strtod_l>
 810d16e:	bf00      	nop
 810d170:	100000cc 	.word	0x100000cc

0810d174 <_strtol_l.constprop.0>:
 810d174:	2b01      	cmp	r3, #1
 810d176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d17a:	d001      	beq.n	810d180 <_strtol_l.constprop.0+0xc>
 810d17c:	2b24      	cmp	r3, #36	; 0x24
 810d17e:	d906      	bls.n	810d18e <_strtol_l.constprop.0+0x1a>
 810d180:	f7fd fd88 	bl	810ac94 <__errno>
 810d184:	2316      	movs	r3, #22
 810d186:	6003      	str	r3, [r0, #0]
 810d188:	2000      	movs	r0, #0
 810d18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d18e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810d274 <_strtol_l.constprop.0+0x100>
 810d192:	460d      	mov	r5, r1
 810d194:	462e      	mov	r6, r5
 810d196:	f815 4b01 	ldrb.w	r4, [r5], #1
 810d19a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 810d19e:	f017 0708 	ands.w	r7, r7, #8
 810d1a2:	d1f7      	bne.n	810d194 <_strtol_l.constprop.0+0x20>
 810d1a4:	2c2d      	cmp	r4, #45	; 0x2d
 810d1a6:	d132      	bne.n	810d20e <_strtol_l.constprop.0+0x9a>
 810d1a8:	782c      	ldrb	r4, [r5, #0]
 810d1aa:	2701      	movs	r7, #1
 810d1ac:	1cb5      	adds	r5, r6, #2
 810d1ae:	2b00      	cmp	r3, #0
 810d1b0:	d05b      	beq.n	810d26a <_strtol_l.constprop.0+0xf6>
 810d1b2:	2b10      	cmp	r3, #16
 810d1b4:	d109      	bne.n	810d1ca <_strtol_l.constprop.0+0x56>
 810d1b6:	2c30      	cmp	r4, #48	; 0x30
 810d1b8:	d107      	bne.n	810d1ca <_strtol_l.constprop.0+0x56>
 810d1ba:	782c      	ldrb	r4, [r5, #0]
 810d1bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810d1c0:	2c58      	cmp	r4, #88	; 0x58
 810d1c2:	d14d      	bne.n	810d260 <_strtol_l.constprop.0+0xec>
 810d1c4:	786c      	ldrb	r4, [r5, #1]
 810d1c6:	2310      	movs	r3, #16
 810d1c8:	3502      	adds	r5, #2
 810d1ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810d1ce:	f108 38ff 	add.w	r8, r8, #4294967295
 810d1d2:	f04f 0e00 	mov.w	lr, #0
 810d1d6:	fbb8 f9f3 	udiv	r9, r8, r3
 810d1da:	4676      	mov	r6, lr
 810d1dc:	fb03 8a19 	mls	sl, r3, r9, r8
 810d1e0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 810d1e4:	f1bc 0f09 	cmp.w	ip, #9
 810d1e8:	d816      	bhi.n	810d218 <_strtol_l.constprop.0+0xa4>
 810d1ea:	4664      	mov	r4, ip
 810d1ec:	42a3      	cmp	r3, r4
 810d1ee:	dd24      	ble.n	810d23a <_strtol_l.constprop.0+0xc6>
 810d1f0:	f1be 3fff 	cmp.w	lr, #4294967295
 810d1f4:	d008      	beq.n	810d208 <_strtol_l.constprop.0+0x94>
 810d1f6:	45b1      	cmp	r9, r6
 810d1f8:	d31c      	bcc.n	810d234 <_strtol_l.constprop.0+0xc0>
 810d1fa:	d101      	bne.n	810d200 <_strtol_l.constprop.0+0x8c>
 810d1fc:	45a2      	cmp	sl, r4
 810d1fe:	db19      	blt.n	810d234 <_strtol_l.constprop.0+0xc0>
 810d200:	fb06 4603 	mla	r6, r6, r3, r4
 810d204:	f04f 0e01 	mov.w	lr, #1
 810d208:	f815 4b01 	ldrb.w	r4, [r5], #1
 810d20c:	e7e8      	b.n	810d1e0 <_strtol_l.constprop.0+0x6c>
 810d20e:	2c2b      	cmp	r4, #43	; 0x2b
 810d210:	bf04      	itt	eq
 810d212:	782c      	ldrbeq	r4, [r5, #0]
 810d214:	1cb5      	addeq	r5, r6, #2
 810d216:	e7ca      	b.n	810d1ae <_strtol_l.constprop.0+0x3a>
 810d218:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 810d21c:	f1bc 0f19 	cmp.w	ip, #25
 810d220:	d801      	bhi.n	810d226 <_strtol_l.constprop.0+0xb2>
 810d222:	3c37      	subs	r4, #55	; 0x37
 810d224:	e7e2      	b.n	810d1ec <_strtol_l.constprop.0+0x78>
 810d226:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 810d22a:	f1bc 0f19 	cmp.w	ip, #25
 810d22e:	d804      	bhi.n	810d23a <_strtol_l.constprop.0+0xc6>
 810d230:	3c57      	subs	r4, #87	; 0x57
 810d232:	e7db      	b.n	810d1ec <_strtol_l.constprop.0+0x78>
 810d234:	f04f 3eff 	mov.w	lr, #4294967295
 810d238:	e7e6      	b.n	810d208 <_strtol_l.constprop.0+0x94>
 810d23a:	f1be 3fff 	cmp.w	lr, #4294967295
 810d23e:	d105      	bne.n	810d24c <_strtol_l.constprop.0+0xd8>
 810d240:	2322      	movs	r3, #34	; 0x22
 810d242:	6003      	str	r3, [r0, #0]
 810d244:	4646      	mov	r6, r8
 810d246:	b942      	cbnz	r2, 810d25a <_strtol_l.constprop.0+0xe6>
 810d248:	4630      	mov	r0, r6
 810d24a:	e79e      	b.n	810d18a <_strtol_l.constprop.0+0x16>
 810d24c:	b107      	cbz	r7, 810d250 <_strtol_l.constprop.0+0xdc>
 810d24e:	4276      	negs	r6, r6
 810d250:	2a00      	cmp	r2, #0
 810d252:	d0f9      	beq.n	810d248 <_strtol_l.constprop.0+0xd4>
 810d254:	f1be 0f00 	cmp.w	lr, #0
 810d258:	d000      	beq.n	810d25c <_strtol_l.constprop.0+0xe8>
 810d25a:	1e69      	subs	r1, r5, #1
 810d25c:	6011      	str	r1, [r2, #0]
 810d25e:	e7f3      	b.n	810d248 <_strtol_l.constprop.0+0xd4>
 810d260:	2430      	movs	r4, #48	; 0x30
 810d262:	2b00      	cmp	r3, #0
 810d264:	d1b1      	bne.n	810d1ca <_strtol_l.constprop.0+0x56>
 810d266:	2308      	movs	r3, #8
 810d268:	e7af      	b.n	810d1ca <_strtol_l.constprop.0+0x56>
 810d26a:	2c30      	cmp	r4, #48	; 0x30
 810d26c:	d0a5      	beq.n	810d1ba <_strtol_l.constprop.0+0x46>
 810d26e:	230a      	movs	r3, #10
 810d270:	e7ab      	b.n	810d1ca <_strtol_l.constprop.0+0x56>
 810d272:	bf00      	nop
 810d274:	0810ead9 	.word	0x0810ead9

0810d278 <_strtol_r>:
 810d278:	f7ff bf7c 	b.w	810d174 <_strtol_l.constprop.0>

0810d27c <__ssputs_r>:
 810d27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d280:	688e      	ldr	r6, [r1, #8]
 810d282:	461f      	mov	r7, r3
 810d284:	42be      	cmp	r6, r7
 810d286:	680b      	ldr	r3, [r1, #0]
 810d288:	4682      	mov	sl, r0
 810d28a:	460c      	mov	r4, r1
 810d28c:	4690      	mov	r8, r2
 810d28e:	d82c      	bhi.n	810d2ea <__ssputs_r+0x6e>
 810d290:	898a      	ldrh	r2, [r1, #12]
 810d292:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810d296:	d026      	beq.n	810d2e6 <__ssputs_r+0x6a>
 810d298:	6965      	ldr	r5, [r4, #20]
 810d29a:	6909      	ldr	r1, [r1, #16]
 810d29c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810d2a0:	eba3 0901 	sub.w	r9, r3, r1
 810d2a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810d2a8:	1c7b      	adds	r3, r7, #1
 810d2aa:	444b      	add	r3, r9
 810d2ac:	106d      	asrs	r5, r5, #1
 810d2ae:	429d      	cmp	r5, r3
 810d2b0:	bf38      	it	cc
 810d2b2:	461d      	movcc	r5, r3
 810d2b4:	0553      	lsls	r3, r2, #21
 810d2b6:	d527      	bpl.n	810d308 <__ssputs_r+0x8c>
 810d2b8:	4629      	mov	r1, r5
 810d2ba:	f7fe fc0f 	bl	810badc <_malloc_r>
 810d2be:	4606      	mov	r6, r0
 810d2c0:	b360      	cbz	r0, 810d31c <__ssputs_r+0xa0>
 810d2c2:	6921      	ldr	r1, [r4, #16]
 810d2c4:	464a      	mov	r2, r9
 810d2c6:	f000 fbf5 	bl	810dab4 <memcpy>
 810d2ca:	89a3      	ldrh	r3, [r4, #12]
 810d2cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810d2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d2d4:	81a3      	strh	r3, [r4, #12]
 810d2d6:	6126      	str	r6, [r4, #16]
 810d2d8:	6165      	str	r5, [r4, #20]
 810d2da:	444e      	add	r6, r9
 810d2dc:	eba5 0509 	sub.w	r5, r5, r9
 810d2e0:	6026      	str	r6, [r4, #0]
 810d2e2:	60a5      	str	r5, [r4, #8]
 810d2e4:	463e      	mov	r6, r7
 810d2e6:	42be      	cmp	r6, r7
 810d2e8:	d900      	bls.n	810d2ec <__ssputs_r+0x70>
 810d2ea:	463e      	mov	r6, r7
 810d2ec:	6820      	ldr	r0, [r4, #0]
 810d2ee:	4632      	mov	r2, r6
 810d2f0:	4641      	mov	r1, r8
 810d2f2:	f000 fba3 	bl	810da3c <memmove>
 810d2f6:	68a3      	ldr	r3, [r4, #8]
 810d2f8:	1b9b      	subs	r3, r3, r6
 810d2fa:	60a3      	str	r3, [r4, #8]
 810d2fc:	6823      	ldr	r3, [r4, #0]
 810d2fe:	4433      	add	r3, r6
 810d300:	6023      	str	r3, [r4, #0]
 810d302:	2000      	movs	r0, #0
 810d304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d308:	462a      	mov	r2, r5
 810d30a:	f000 ff86 	bl	810e21a <_realloc_r>
 810d30e:	4606      	mov	r6, r0
 810d310:	2800      	cmp	r0, #0
 810d312:	d1e0      	bne.n	810d2d6 <__ssputs_r+0x5a>
 810d314:	6921      	ldr	r1, [r4, #16]
 810d316:	4650      	mov	r0, sl
 810d318:	f7fe fb6c 	bl	810b9f4 <_free_r>
 810d31c:	230c      	movs	r3, #12
 810d31e:	f8ca 3000 	str.w	r3, [sl]
 810d322:	89a3      	ldrh	r3, [r4, #12]
 810d324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d328:	81a3      	strh	r3, [r4, #12]
 810d32a:	f04f 30ff 	mov.w	r0, #4294967295
 810d32e:	e7e9      	b.n	810d304 <__ssputs_r+0x88>

0810d330 <_svfiprintf_r>:
 810d330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d334:	4698      	mov	r8, r3
 810d336:	898b      	ldrh	r3, [r1, #12]
 810d338:	061b      	lsls	r3, r3, #24
 810d33a:	b09d      	sub	sp, #116	; 0x74
 810d33c:	4607      	mov	r7, r0
 810d33e:	460d      	mov	r5, r1
 810d340:	4614      	mov	r4, r2
 810d342:	d50e      	bpl.n	810d362 <_svfiprintf_r+0x32>
 810d344:	690b      	ldr	r3, [r1, #16]
 810d346:	b963      	cbnz	r3, 810d362 <_svfiprintf_r+0x32>
 810d348:	2140      	movs	r1, #64	; 0x40
 810d34a:	f7fe fbc7 	bl	810badc <_malloc_r>
 810d34e:	6028      	str	r0, [r5, #0]
 810d350:	6128      	str	r0, [r5, #16]
 810d352:	b920      	cbnz	r0, 810d35e <_svfiprintf_r+0x2e>
 810d354:	230c      	movs	r3, #12
 810d356:	603b      	str	r3, [r7, #0]
 810d358:	f04f 30ff 	mov.w	r0, #4294967295
 810d35c:	e0d0      	b.n	810d500 <_svfiprintf_r+0x1d0>
 810d35e:	2340      	movs	r3, #64	; 0x40
 810d360:	616b      	str	r3, [r5, #20]
 810d362:	2300      	movs	r3, #0
 810d364:	9309      	str	r3, [sp, #36]	; 0x24
 810d366:	2320      	movs	r3, #32
 810d368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d36c:	f8cd 800c 	str.w	r8, [sp, #12]
 810d370:	2330      	movs	r3, #48	; 0x30
 810d372:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 810d518 <_svfiprintf_r+0x1e8>
 810d376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d37a:	f04f 0901 	mov.w	r9, #1
 810d37e:	4623      	mov	r3, r4
 810d380:	469a      	mov	sl, r3
 810d382:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d386:	b10a      	cbz	r2, 810d38c <_svfiprintf_r+0x5c>
 810d388:	2a25      	cmp	r2, #37	; 0x25
 810d38a:	d1f9      	bne.n	810d380 <_svfiprintf_r+0x50>
 810d38c:	ebba 0b04 	subs.w	fp, sl, r4
 810d390:	d00b      	beq.n	810d3aa <_svfiprintf_r+0x7a>
 810d392:	465b      	mov	r3, fp
 810d394:	4622      	mov	r2, r4
 810d396:	4629      	mov	r1, r5
 810d398:	4638      	mov	r0, r7
 810d39a:	f7ff ff6f 	bl	810d27c <__ssputs_r>
 810d39e:	3001      	adds	r0, #1
 810d3a0:	f000 80a9 	beq.w	810d4f6 <_svfiprintf_r+0x1c6>
 810d3a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d3a6:	445a      	add	r2, fp
 810d3a8:	9209      	str	r2, [sp, #36]	; 0x24
 810d3aa:	f89a 3000 	ldrb.w	r3, [sl]
 810d3ae:	2b00      	cmp	r3, #0
 810d3b0:	f000 80a1 	beq.w	810d4f6 <_svfiprintf_r+0x1c6>
 810d3b4:	2300      	movs	r3, #0
 810d3b6:	f04f 32ff 	mov.w	r2, #4294967295
 810d3ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d3be:	f10a 0a01 	add.w	sl, sl, #1
 810d3c2:	9304      	str	r3, [sp, #16]
 810d3c4:	9307      	str	r3, [sp, #28]
 810d3c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d3ca:	931a      	str	r3, [sp, #104]	; 0x68
 810d3cc:	4654      	mov	r4, sl
 810d3ce:	2205      	movs	r2, #5
 810d3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d3d4:	4850      	ldr	r0, [pc, #320]	; (810d518 <_svfiprintf_r+0x1e8>)
 810d3d6:	f7f2 ff83 	bl	81002e0 <memchr>
 810d3da:	9a04      	ldr	r2, [sp, #16]
 810d3dc:	b9d8      	cbnz	r0, 810d416 <_svfiprintf_r+0xe6>
 810d3de:	06d0      	lsls	r0, r2, #27
 810d3e0:	bf44      	itt	mi
 810d3e2:	2320      	movmi	r3, #32
 810d3e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d3e8:	0711      	lsls	r1, r2, #28
 810d3ea:	bf44      	itt	mi
 810d3ec:	232b      	movmi	r3, #43	; 0x2b
 810d3ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d3f2:	f89a 3000 	ldrb.w	r3, [sl]
 810d3f6:	2b2a      	cmp	r3, #42	; 0x2a
 810d3f8:	d015      	beq.n	810d426 <_svfiprintf_r+0xf6>
 810d3fa:	9a07      	ldr	r2, [sp, #28]
 810d3fc:	4654      	mov	r4, sl
 810d3fe:	2000      	movs	r0, #0
 810d400:	f04f 0c0a 	mov.w	ip, #10
 810d404:	4621      	mov	r1, r4
 810d406:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d40a:	3b30      	subs	r3, #48	; 0x30
 810d40c:	2b09      	cmp	r3, #9
 810d40e:	d94d      	bls.n	810d4ac <_svfiprintf_r+0x17c>
 810d410:	b1b0      	cbz	r0, 810d440 <_svfiprintf_r+0x110>
 810d412:	9207      	str	r2, [sp, #28]
 810d414:	e014      	b.n	810d440 <_svfiprintf_r+0x110>
 810d416:	eba0 0308 	sub.w	r3, r0, r8
 810d41a:	fa09 f303 	lsl.w	r3, r9, r3
 810d41e:	4313      	orrs	r3, r2
 810d420:	9304      	str	r3, [sp, #16]
 810d422:	46a2      	mov	sl, r4
 810d424:	e7d2      	b.n	810d3cc <_svfiprintf_r+0x9c>
 810d426:	9b03      	ldr	r3, [sp, #12]
 810d428:	1d19      	adds	r1, r3, #4
 810d42a:	681b      	ldr	r3, [r3, #0]
 810d42c:	9103      	str	r1, [sp, #12]
 810d42e:	2b00      	cmp	r3, #0
 810d430:	bfbb      	ittet	lt
 810d432:	425b      	neglt	r3, r3
 810d434:	f042 0202 	orrlt.w	r2, r2, #2
 810d438:	9307      	strge	r3, [sp, #28]
 810d43a:	9307      	strlt	r3, [sp, #28]
 810d43c:	bfb8      	it	lt
 810d43e:	9204      	strlt	r2, [sp, #16]
 810d440:	7823      	ldrb	r3, [r4, #0]
 810d442:	2b2e      	cmp	r3, #46	; 0x2e
 810d444:	d10c      	bne.n	810d460 <_svfiprintf_r+0x130>
 810d446:	7863      	ldrb	r3, [r4, #1]
 810d448:	2b2a      	cmp	r3, #42	; 0x2a
 810d44a:	d134      	bne.n	810d4b6 <_svfiprintf_r+0x186>
 810d44c:	9b03      	ldr	r3, [sp, #12]
 810d44e:	1d1a      	adds	r2, r3, #4
 810d450:	681b      	ldr	r3, [r3, #0]
 810d452:	9203      	str	r2, [sp, #12]
 810d454:	2b00      	cmp	r3, #0
 810d456:	bfb8      	it	lt
 810d458:	f04f 33ff 	movlt.w	r3, #4294967295
 810d45c:	3402      	adds	r4, #2
 810d45e:	9305      	str	r3, [sp, #20]
 810d460:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 810d528 <_svfiprintf_r+0x1f8>
 810d464:	7821      	ldrb	r1, [r4, #0]
 810d466:	2203      	movs	r2, #3
 810d468:	4650      	mov	r0, sl
 810d46a:	f7f2 ff39 	bl	81002e0 <memchr>
 810d46e:	b138      	cbz	r0, 810d480 <_svfiprintf_r+0x150>
 810d470:	9b04      	ldr	r3, [sp, #16]
 810d472:	eba0 000a 	sub.w	r0, r0, sl
 810d476:	2240      	movs	r2, #64	; 0x40
 810d478:	4082      	lsls	r2, r0
 810d47a:	4313      	orrs	r3, r2
 810d47c:	3401      	adds	r4, #1
 810d47e:	9304      	str	r3, [sp, #16]
 810d480:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d484:	4825      	ldr	r0, [pc, #148]	; (810d51c <_svfiprintf_r+0x1ec>)
 810d486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d48a:	2206      	movs	r2, #6
 810d48c:	f7f2 ff28 	bl	81002e0 <memchr>
 810d490:	2800      	cmp	r0, #0
 810d492:	d038      	beq.n	810d506 <_svfiprintf_r+0x1d6>
 810d494:	4b22      	ldr	r3, [pc, #136]	; (810d520 <_svfiprintf_r+0x1f0>)
 810d496:	bb1b      	cbnz	r3, 810d4e0 <_svfiprintf_r+0x1b0>
 810d498:	9b03      	ldr	r3, [sp, #12]
 810d49a:	3307      	adds	r3, #7
 810d49c:	f023 0307 	bic.w	r3, r3, #7
 810d4a0:	3308      	adds	r3, #8
 810d4a2:	9303      	str	r3, [sp, #12]
 810d4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d4a6:	4433      	add	r3, r6
 810d4a8:	9309      	str	r3, [sp, #36]	; 0x24
 810d4aa:	e768      	b.n	810d37e <_svfiprintf_r+0x4e>
 810d4ac:	fb0c 3202 	mla	r2, ip, r2, r3
 810d4b0:	460c      	mov	r4, r1
 810d4b2:	2001      	movs	r0, #1
 810d4b4:	e7a6      	b.n	810d404 <_svfiprintf_r+0xd4>
 810d4b6:	2300      	movs	r3, #0
 810d4b8:	3401      	adds	r4, #1
 810d4ba:	9305      	str	r3, [sp, #20]
 810d4bc:	4619      	mov	r1, r3
 810d4be:	f04f 0c0a 	mov.w	ip, #10
 810d4c2:	4620      	mov	r0, r4
 810d4c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d4c8:	3a30      	subs	r2, #48	; 0x30
 810d4ca:	2a09      	cmp	r2, #9
 810d4cc:	d903      	bls.n	810d4d6 <_svfiprintf_r+0x1a6>
 810d4ce:	2b00      	cmp	r3, #0
 810d4d0:	d0c6      	beq.n	810d460 <_svfiprintf_r+0x130>
 810d4d2:	9105      	str	r1, [sp, #20]
 810d4d4:	e7c4      	b.n	810d460 <_svfiprintf_r+0x130>
 810d4d6:	fb0c 2101 	mla	r1, ip, r1, r2
 810d4da:	4604      	mov	r4, r0
 810d4dc:	2301      	movs	r3, #1
 810d4de:	e7f0      	b.n	810d4c2 <_svfiprintf_r+0x192>
 810d4e0:	ab03      	add	r3, sp, #12
 810d4e2:	9300      	str	r3, [sp, #0]
 810d4e4:	462a      	mov	r2, r5
 810d4e6:	4b0f      	ldr	r3, [pc, #60]	; (810d524 <_svfiprintf_r+0x1f4>)
 810d4e8:	a904      	add	r1, sp, #16
 810d4ea:	4638      	mov	r0, r7
 810d4ec:	f7fc fc72 	bl	8109dd4 <_printf_float>
 810d4f0:	1c42      	adds	r2, r0, #1
 810d4f2:	4606      	mov	r6, r0
 810d4f4:	d1d6      	bne.n	810d4a4 <_svfiprintf_r+0x174>
 810d4f6:	89ab      	ldrh	r3, [r5, #12]
 810d4f8:	065b      	lsls	r3, r3, #25
 810d4fa:	f53f af2d 	bmi.w	810d358 <_svfiprintf_r+0x28>
 810d4fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d500:	b01d      	add	sp, #116	; 0x74
 810d502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d506:	ab03      	add	r3, sp, #12
 810d508:	9300      	str	r3, [sp, #0]
 810d50a:	462a      	mov	r2, r5
 810d50c:	4b05      	ldr	r3, [pc, #20]	; (810d524 <_svfiprintf_r+0x1f4>)
 810d50e:	a904      	add	r1, sp, #16
 810d510:	4638      	mov	r0, r7
 810d512:	f7fc ff03 	bl	810a31c <_printf_i>
 810d516:	e7eb      	b.n	810d4f0 <_svfiprintf_r+0x1c0>
 810d518:	0810ebd9 	.word	0x0810ebd9
 810d51c:	0810ebe3 	.word	0x0810ebe3
 810d520:	08109dd5 	.word	0x08109dd5
 810d524:	0810d27d 	.word	0x0810d27d
 810d528:	0810ebdf 	.word	0x0810ebdf

0810d52c <__sfputc_r>:
 810d52c:	6893      	ldr	r3, [r2, #8]
 810d52e:	3b01      	subs	r3, #1
 810d530:	2b00      	cmp	r3, #0
 810d532:	b410      	push	{r4}
 810d534:	6093      	str	r3, [r2, #8]
 810d536:	da08      	bge.n	810d54a <__sfputc_r+0x1e>
 810d538:	6994      	ldr	r4, [r2, #24]
 810d53a:	42a3      	cmp	r3, r4
 810d53c:	db01      	blt.n	810d542 <__sfputc_r+0x16>
 810d53e:	290a      	cmp	r1, #10
 810d540:	d103      	bne.n	810d54a <__sfputc_r+0x1e>
 810d542:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d546:	f000 b9e3 	b.w	810d910 <__swbuf_r>
 810d54a:	6813      	ldr	r3, [r2, #0]
 810d54c:	1c58      	adds	r0, r3, #1
 810d54e:	6010      	str	r0, [r2, #0]
 810d550:	7019      	strb	r1, [r3, #0]
 810d552:	4608      	mov	r0, r1
 810d554:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d558:	4770      	bx	lr

0810d55a <__sfputs_r>:
 810d55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d55c:	4606      	mov	r6, r0
 810d55e:	460f      	mov	r7, r1
 810d560:	4614      	mov	r4, r2
 810d562:	18d5      	adds	r5, r2, r3
 810d564:	42ac      	cmp	r4, r5
 810d566:	d101      	bne.n	810d56c <__sfputs_r+0x12>
 810d568:	2000      	movs	r0, #0
 810d56a:	e007      	b.n	810d57c <__sfputs_r+0x22>
 810d56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d570:	463a      	mov	r2, r7
 810d572:	4630      	mov	r0, r6
 810d574:	f7ff ffda 	bl	810d52c <__sfputc_r>
 810d578:	1c43      	adds	r3, r0, #1
 810d57a:	d1f3      	bne.n	810d564 <__sfputs_r+0xa>
 810d57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810d580 <_vfiprintf_r>:
 810d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d584:	460d      	mov	r5, r1
 810d586:	b09d      	sub	sp, #116	; 0x74
 810d588:	4614      	mov	r4, r2
 810d58a:	4698      	mov	r8, r3
 810d58c:	4606      	mov	r6, r0
 810d58e:	b118      	cbz	r0, 810d598 <_vfiprintf_r+0x18>
 810d590:	6a03      	ldr	r3, [r0, #32]
 810d592:	b90b      	cbnz	r3, 810d598 <_vfiprintf_r+0x18>
 810d594:	f7fd fa80 	bl	810aa98 <__sinit>
 810d598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d59a:	07d9      	lsls	r1, r3, #31
 810d59c:	d405      	bmi.n	810d5aa <_vfiprintf_r+0x2a>
 810d59e:	89ab      	ldrh	r3, [r5, #12]
 810d5a0:	059a      	lsls	r2, r3, #22
 810d5a2:	d402      	bmi.n	810d5aa <_vfiprintf_r+0x2a>
 810d5a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d5a6:	f7fd fba0 	bl	810acea <__retarget_lock_acquire_recursive>
 810d5aa:	89ab      	ldrh	r3, [r5, #12]
 810d5ac:	071b      	lsls	r3, r3, #28
 810d5ae:	d501      	bpl.n	810d5b4 <_vfiprintf_r+0x34>
 810d5b0:	692b      	ldr	r3, [r5, #16]
 810d5b2:	b99b      	cbnz	r3, 810d5dc <_vfiprintf_r+0x5c>
 810d5b4:	4629      	mov	r1, r5
 810d5b6:	4630      	mov	r0, r6
 810d5b8:	f000 f9e8 	bl	810d98c <__swsetup_r>
 810d5bc:	b170      	cbz	r0, 810d5dc <_vfiprintf_r+0x5c>
 810d5be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d5c0:	07dc      	lsls	r4, r3, #31
 810d5c2:	d504      	bpl.n	810d5ce <_vfiprintf_r+0x4e>
 810d5c4:	f04f 30ff 	mov.w	r0, #4294967295
 810d5c8:	b01d      	add	sp, #116	; 0x74
 810d5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d5ce:	89ab      	ldrh	r3, [r5, #12]
 810d5d0:	0598      	lsls	r0, r3, #22
 810d5d2:	d4f7      	bmi.n	810d5c4 <_vfiprintf_r+0x44>
 810d5d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d5d6:	f7fd fb89 	bl	810acec <__retarget_lock_release_recursive>
 810d5da:	e7f3      	b.n	810d5c4 <_vfiprintf_r+0x44>
 810d5dc:	2300      	movs	r3, #0
 810d5de:	9309      	str	r3, [sp, #36]	; 0x24
 810d5e0:	2320      	movs	r3, #32
 810d5e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d5e6:	f8cd 800c 	str.w	r8, [sp, #12]
 810d5ea:	2330      	movs	r3, #48	; 0x30
 810d5ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810d7a0 <_vfiprintf_r+0x220>
 810d5f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d5f4:	f04f 0901 	mov.w	r9, #1
 810d5f8:	4623      	mov	r3, r4
 810d5fa:	469a      	mov	sl, r3
 810d5fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d600:	b10a      	cbz	r2, 810d606 <_vfiprintf_r+0x86>
 810d602:	2a25      	cmp	r2, #37	; 0x25
 810d604:	d1f9      	bne.n	810d5fa <_vfiprintf_r+0x7a>
 810d606:	ebba 0b04 	subs.w	fp, sl, r4
 810d60a:	d00b      	beq.n	810d624 <_vfiprintf_r+0xa4>
 810d60c:	465b      	mov	r3, fp
 810d60e:	4622      	mov	r2, r4
 810d610:	4629      	mov	r1, r5
 810d612:	4630      	mov	r0, r6
 810d614:	f7ff ffa1 	bl	810d55a <__sfputs_r>
 810d618:	3001      	adds	r0, #1
 810d61a:	f000 80a9 	beq.w	810d770 <_vfiprintf_r+0x1f0>
 810d61e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d620:	445a      	add	r2, fp
 810d622:	9209      	str	r2, [sp, #36]	; 0x24
 810d624:	f89a 3000 	ldrb.w	r3, [sl]
 810d628:	2b00      	cmp	r3, #0
 810d62a:	f000 80a1 	beq.w	810d770 <_vfiprintf_r+0x1f0>
 810d62e:	2300      	movs	r3, #0
 810d630:	f04f 32ff 	mov.w	r2, #4294967295
 810d634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d638:	f10a 0a01 	add.w	sl, sl, #1
 810d63c:	9304      	str	r3, [sp, #16]
 810d63e:	9307      	str	r3, [sp, #28]
 810d640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d644:	931a      	str	r3, [sp, #104]	; 0x68
 810d646:	4654      	mov	r4, sl
 810d648:	2205      	movs	r2, #5
 810d64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d64e:	4854      	ldr	r0, [pc, #336]	; (810d7a0 <_vfiprintf_r+0x220>)
 810d650:	f7f2 fe46 	bl	81002e0 <memchr>
 810d654:	9a04      	ldr	r2, [sp, #16]
 810d656:	b9d8      	cbnz	r0, 810d690 <_vfiprintf_r+0x110>
 810d658:	06d1      	lsls	r1, r2, #27
 810d65a:	bf44      	itt	mi
 810d65c:	2320      	movmi	r3, #32
 810d65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d662:	0713      	lsls	r3, r2, #28
 810d664:	bf44      	itt	mi
 810d666:	232b      	movmi	r3, #43	; 0x2b
 810d668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d66c:	f89a 3000 	ldrb.w	r3, [sl]
 810d670:	2b2a      	cmp	r3, #42	; 0x2a
 810d672:	d015      	beq.n	810d6a0 <_vfiprintf_r+0x120>
 810d674:	9a07      	ldr	r2, [sp, #28]
 810d676:	4654      	mov	r4, sl
 810d678:	2000      	movs	r0, #0
 810d67a:	f04f 0c0a 	mov.w	ip, #10
 810d67e:	4621      	mov	r1, r4
 810d680:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d684:	3b30      	subs	r3, #48	; 0x30
 810d686:	2b09      	cmp	r3, #9
 810d688:	d94d      	bls.n	810d726 <_vfiprintf_r+0x1a6>
 810d68a:	b1b0      	cbz	r0, 810d6ba <_vfiprintf_r+0x13a>
 810d68c:	9207      	str	r2, [sp, #28]
 810d68e:	e014      	b.n	810d6ba <_vfiprintf_r+0x13a>
 810d690:	eba0 0308 	sub.w	r3, r0, r8
 810d694:	fa09 f303 	lsl.w	r3, r9, r3
 810d698:	4313      	orrs	r3, r2
 810d69a:	9304      	str	r3, [sp, #16]
 810d69c:	46a2      	mov	sl, r4
 810d69e:	e7d2      	b.n	810d646 <_vfiprintf_r+0xc6>
 810d6a0:	9b03      	ldr	r3, [sp, #12]
 810d6a2:	1d19      	adds	r1, r3, #4
 810d6a4:	681b      	ldr	r3, [r3, #0]
 810d6a6:	9103      	str	r1, [sp, #12]
 810d6a8:	2b00      	cmp	r3, #0
 810d6aa:	bfbb      	ittet	lt
 810d6ac:	425b      	neglt	r3, r3
 810d6ae:	f042 0202 	orrlt.w	r2, r2, #2
 810d6b2:	9307      	strge	r3, [sp, #28]
 810d6b4:	9307      	strlt	r3, [sp, #28]
 810d6b6:	bfb8      	it	lt
 810d6b8:	9204      	strlt	r2, [sp, #16]
 810d6ba:	7823      	ldrb	r3, [r4, #0]
 810d6bc:	2b2e      	cmp	r3, #46	; 0x2e
 810d6be:	d10c      	bne.n	810d6da <_vfiprintf_r+0x15a>
 810d6c0:	7863      	ldrb	r3, [r4, #1]
 810d6c2:	2b2a      	cmp	r3, #42	; 0x2a
 810d6c4:	d134      	bne.n	810d730 <_vfiprintf_r+0x1b0>
 810d6c6:	9b03      	ldr	r3, [sp, #12]
 810d6c8:	1d1a      	adds	r2, r3, #4
 810d6ca:	681b      	ldr	r3, [r3, #0]
 810d6cc:	9203      	str	r2, [sp, #12]
 810d6ce:	2b00      	cmp	r3, #0
 810d6d0:	bfb8      	it	lt
 810d6d2:	f04f 33ff 	movlt.w	r3, #4294967295
 810d6d6:	3402      	adds	r4, #2
 810d6d8:	9305      	str	r3, [sp, #20]
 810d6da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 810d7b0 <_vfiprintf_r+0x230>
 810d6de:	7821      	ldrb	r1, [r4, #0]
 810d6e0:	2203      	movs	r2, #3
 810d6e2:	4650      	mov	r0, sl
 810d6e4:	f7f2 fdfc 	bl	81002e0 <memchr>
 810d6e8:	b138      	cbz	r0, 810d6fa <_vfiprintf_r+0x17a>
 810d6ea:	9b04      	ldr	r3, [sp, #16]
 810d6ec:	eba0 000a 	sub.w	r0, r0, sl
 810d6f0:	2240      	movs	r2, #64	; 0x40
 810d6f2:	4082      	lsls	r2, r0
 810d6f4:	4313      	orrs	r3, r2
 810d6f6:	3401      	adds	r4, #1
 810d6f8:	9304      	str	r3, [sp, #16]
 810d6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d6fe:	4829      	ldr	r0, [pc, #164]	; (810d7a4 <_vfiprintf_r+0x224>)
 810d700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d704:	2206      	movs	r2, #6
 810d706:	f7f2 fdeb 	bl	81002e0 <memchr>
 810d70a:	2800      	cmp	r0, #0
 810d70c:	d03f      	beq.n	810d78e <_vfiprintf_r+0x20e>
 810d70e:	4b26      	ldr	r3, [pc, #152]	; (810d7a8 <_vfiprintf_r+0x228>)
 810d710:	bb1b      	cbnz	r3, 810d75a <_vfiprintf_r+0x1da>
 810d712:	9b03      	ldr	r3, [sp, #12]
 810d714:	3307      	adds	r3, #7
 810d716:	f023 0307 	bic.w	r3, r3, #7
 810d71a:	3308      	adds	r3, #8
 810d71c:	9303      	str	r3, [sp, #12]
 810d71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d720:	443b      	add	r3, r7
 810d722:	9309      	str	r3, [sp, #36]	; 0x24
 810d724:	e768      	b.n	810d5f8 <_vfiprintf_r+0x78>
 810d726:	fb0c 3202 	mla	r2, ip, r2, r3
 810d72a:	460c      	mov	r4, r1
 810d72c:	2001      	movs	r0, #1
 810d72e:	e7a6      	b.n	810d67e <_vfiprintf_r+0xfe>
 810d730:	2300      	movs	r3, #0
 810d732:	3401      	adds	r4, #1
 810d734:	9305      	str	r3, [sp, #20]
 810d736:	4619      	mov	r1, r3
 810d738:	f04f 0c0a 	mov.w	ip, #10
 810d73c:	4620      	mov	r0, r4
 810d73e:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d742:	3a30      	subs	r2, #48	; 0x30
 810d744:	2a09      	cmp	r2, #9
 810d746:	d903      	bls.n	810d750 <_vfiprintf_r+0x1d0>
 810d748:	2b00      	cmp	r3, #0
 810d74a:	d0c6      	beq.n	810d6da <_vfiprintf_r+0x15a>
 810d74c:	9105      	str	r1, [sp, #20]
 810d74e:	e7c4      	b.n	810d6da <_vfiprintf_r+0x15a>
 810d750:	fb0c 2101 	mla	r1, ip, r1, r2
 810d754:	4604      	mov	r4, r0
 810d756:	2301      	movs	r3, #1
 810d758:	e7f0      	b.n	810d73c <_vfiprintf_r+0x1bc>
 810d75a:	ab03      	add	r3, sp, #12
 810d75c:	9300      	str	r3, [sp, #0]
 810d75e:	462a      	mov	r2, r5
 810d760:	4b12      	ldr	r3, [pc, #72]	; (810d7ac <_vfiprintf_r+0x22c>)
 810d762:	a904      	add	r1, sp, #16
 810d764:	4630      	mov	r0, r6
 810d766:	f7fc fb35 	bl	8109dd4 <_printf_float>
 810d76a:	4607      	mov	r7, r0
 810d76c:	1c78      	adds	r0, r7, #1
 810d76e:	d1d6      	bne.n	810d71e <_vfiprintf_r+0x19e>
 810d770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d772:	07d9      	lsls	r1, r3, #31
 810d774:	d405      	bmi.n	810d782 <_vfiprintf_r+0x202>
 810d776:	89ab      	ldrh	r3, [r5, #12]
 810d778:	059a      	lsls	r2, r3, #22
 810d77a:	d402      	bmi.n	810d782 <_vfiprintf_r+0x202>
 810d77c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d77e:	f7fd fab5 	bl	810acec <__retarget_lock_release_recursive>
 810d782:	89ab      	ldrh	r3, [r5, #12]
 810d784:	065b      	lsls	r3, r3, #25
 810d786:	f53f af1d 	bmi.w	810d5c4 <_vfiprintf_r+0x44>
 810d78a:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d78c:	e71c      	b.n	810d5c8 <_vfiprintf_r+0x48>
 810d78e:	ab03      	add	r3, sp, #12
 810d790:	9300      	str	r3, [sp, #0]
 810d792:	462a      	mov	r2, r5
 810d794:	4b05      	ldr	r3, [pc, #20]	; (810d7ac <_vfiprintf_r+0x22c>)
 810d796:	a904      	add	r1, sp, #16
 810d798:	4630      	mov	r0, r6
 810d79a:	f7fc fdbf 	bl	810a31c <_printf_i>
 810d79e:	e7e4      	b.n	810d76a <_vfiprintf_r+0x1ea>
 810d7a0:	0810ebd9 	.word	0x0810ebd9
 810d7a4:	0810ebe3 	.word	0x0810ebe3
 810d7a8:	08109dd5 	.word	0x08109dd5
 810d7ac:	0810d55b 	.word	0x0810d55b
 810d7b0:	0810ebdf 	.word	0x0810ebdf

0810d7b4 <__sflush_r>:
 810d7b4:	898a      	ldrh	r2, [r1, #12]
 810d7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d7ba:	4605      	mov	r5, r0
 810d7bc:	0710      	lsls	r0, r2, #28
 810d7be:	460c      	mov	r4, r1
 810d7c0:	d458      	bmi.n	810d874 <__sflush_r+0xc0>
 810d7c2:	684b      	ldr	r3, [r1, #4]
 810d7c4:	2b00      	cmp	r3, #0
 810d7c6:	dc05      	bgt.n	810d7d4 <__sflush_r+0x20>
 810d7c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810d7ca:	2b00      	cmp	r3, #0
 810d7cc:	dc02      	bgt.n	810d7d4 <__sflush_r+0x20>
 810d7ce:	2000      	movs	r0, #0
 810d7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d7d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810d7d6:	2e00      	cmp	r6, #0
 810d7d8:	d0f9      	beq.n	810d7ce <__sflush_r+0x1a>
 810d7da:	2300      	movs	r3, #0
 810d7dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810d7e0:	682f      	ldr	r7, [r5, #0]
 810d7e2:	6a21      	ldr	r1, [r4, #32]
 810d7e4:	602b      	str	r3, [r5, #0]
 810d7e6:	d032      	beq.n	810d84e <__sflush_r+0x9a>
 810d7e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810d7ea:	89a3      	ldrh	r3, [r4, #12]
 810d7ec:	075a      	lsls	r2, r3, #29
 810d7ee:	d505      	bpl.n	810d7fc <__sflush_r+0x48>
 810d7f0:	6863      	ldr	r3, [r4, #4]
 810d7f2:	1ac0      	subs	r0, r0, r3
 810d7f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810d7f6:	b10b      	cbz	r3, 810d7fc <__sflush_r+0x48>
 810d7f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810d7fa:	1ac0      	subs	r0, r0, r3
 810d7fc:	2300      	movs	r3, #0
 810d7fe:	4602      	mov	r2, r0
 810d800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810d802:	6a21      	ldr	r1, [r4, #32]
 810d804:	4628      	mov	r0, r5
 810d806:	47b0      	blx	r6
 810d808:	1c43      	adds	r3, r0, #1
 810d80a:	89a3      	ldrh	r3, [r4, #12]
 810d80c:	d106      	bne.n	810d81c <__sflush_r+0x68>
 810d80e:	6829      	ldr	r1, [r5, #0]
 810d810:	291d      	cmp	r1, #29
 810d812:	d82b      	bhi.n	810d86c <__sflush_r+0xb8>
 810d814:	4a29      	ldr	r2, [pc, #164]	; (810d8bc <__sflush_r+0x108>)
 810d816:	410a      	asrs	r2, r1
 810d818:	07d6      	lsls	r6, r2, #31
 810d81a:	d427      	bmi.n	810d86c <__sflush_r+0xb8>
 810d81c:	2200      	movs	r2, #0
 810d81e:	6062      	str	r2, [r4, #4]
 810d820:	04d9      	lsls	r1, r3, #19
 810d822:	6922      	ldr	r2, [r4, #16]
 810d824:	6022      	str	r2, [r4, #0]
 810d826:	d504      	bpl.n	810d832 <__sflush_r+0x7e>
 810d828:	1c42      	adds	r2, r0, #1
 810d82a:	d101      	bne.n	810d830 <__sflush_r+0x7c>
 810d82c:	682b      	ldr	r3, [r5, #0]
 810d82e:	b903      	cbnz	r3, 810d832 <__sflush_r+0x7e>
 810d830:	6560      	str	r0, [r4, #84]	; 0x54
 810d832:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d834:	602f      	str	r7, [r5, #0]
 810d836:	2900      	cmp	r1, #0
 810d838:	d0c9      	beq.n	810d7ce <__sflush_r+0x1a>
 810d83a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d83e:	4299      	cmp	r1, r3
 810d840:	d002      	beq.n	810d848 <__sflush_r+0x94>
 810d842:	4628      	mov	r0, r5
 810d844:	f7fe f8d6 	bl	810b9f4 <_free_r>
 810d848:	2000      	movs	r0, #0
 810d84a:	6360      	str	r0, [r4, #52]	; 0x34
 810d84c:	e7c0      	b.n	810d7d0 <__sflush_r+0x1c>
 810d84e:	2301      	movs	r3, #1
 810d850:	4628      	mov	r0, r5
 810d852:	47b0      	blx	r6
 810d854:	1c41      	adds	r1, r0, #1
 810d856:	d1c8      	bne.n	810d7ea <__sflush_r+0x36>
 810d858:	682b      	ldr	r3, [r5, #0]
 810d85a:	2b00      	cmp	r3, #0
 810d85c:	d0c5      	beq.n	810d7ea <__sflush_r+0x36>
 810d85e:	2b1d      	cmp	r3, #29
 810d860:	d001      	beq.n	810d866 <__sflush_r+0xb2>
 810d862:	2b16      	cmp	r3, #22
 810d864:	d101      	bne.n	810d86a <__sflush_r+0xb6>
 810d866:	602f      	str	r7, [r5, #0]
 810d868:	e7b1      	b.n	810d7ce <__sflush_r+0x1a>
 810d86a:	89a3      	ldrh	r3, [r4, #12]
 810d86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d870:	81a3      	strh	r3, [r4, #12]
 810d872:	e7ad      	b.n	810d7d0 <__sflush_r+0x1c>
 810d874:	690f      	ldr	r7, [r1, #16]
 810d876:	2f00      	cmp	r7, #0
 810d878:	d0a9      	beq.n	810d7ce <__sflush_r+0x1a>
 810d87a:	0793      	lsls	r3, r2, #30
 810d87c:	680e      	ldr	r6, [r1, #0]
 810d87e:	bf08      	it	eq
 810d880:	694b      	ldreq	r3, [r1, #20]
 810d882:	600f      	str	r7, [r1, #0]
 810d884:	bf18      	it	ne
 810d886:	2300      	movne	r3, #0
 810d888:	eba6 0807 	sub.w	r8, r6, r7
 810d88c:	608b      	str	r3, [r1, #8]
 810d88e:	f1b8 0f00 	cmp.w	r8, #0
 810d892:	dd9c      	ble.n	810d7ce <__sflush_r+0x1a>
 810d894:	6a21      	ldr	r1, [r4, #32]
 810d896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810d898:	4643      	mov	r3, r8
 810d89a:	463a      	mov	r2, r7
 810d89c:	4628      	mov	r0, r5
 810d89e:	47b0      	blx	r6
 810d8a0:	2800      	cmp	r0, #0
 810d8a2:	dc06      	bgt.n	810d8b2 <__sflush_r+0xfe>
 810d8a4:	89a3      	ldrh	r3, [r4, #12]
 810d8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d8aa:	81a3      	strh	r3, [r4, #12]
 810d8ac:	f04f 30ff 	mov.w	r0, #4294967295
 810d8b0:	e78e      	b.n	810d7d0 <__sflush_r+0x1c>
 810d8b2:	4407      	add	r7, r0
 810d8b4:	eba8 0800 	sub.w	r8, r8, r0
 810d8b8:	e7e9      	b.n	810d88e <__sflush_r+0xda>
 810d8ba:	bf00      	nop
 810d8bc:	dfbffffe 	.word	0xdfbffffe

0810d8c0 <_fflush_r>:
 810d8c0:	b538      	push	{r3, r4, r5, lr}
 810d8c2:	690b      	ldr	r3, [r1, #16]
 810d8c4:	4605      	mov	r5, r0
 810d8c6:	460c      	mov	r4, r1
 810d8c8:	b913      	cbnz	r3, 810d8d0 <_fflush_r+0x10>
 810d8ca:	2500      	movs	r5, #0
 810d8cc:	4628      	mov	r0, r5
 810d8ce:	bd38      	pop	{r3, r4, r5, pc}
 810d8d0:	b118      	cbz	r0, 810d8da <_fflush_r+0x1a>
 810d8d2:	6a03      	ldr	r3, [r0, #32]
 810d8d4:	b90b      	cbnz	r3, 810d8da <_fflush_r+0x1a>
 810d8d6:	f7fd f8df 	bl	810aa98 <__sinit>
 810d8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d8de:	2b00      	cmp	r3, #0
 810d8e0:	d0f3      	beq.n	810d8ca <_fflush_r+0xa>
 810d8e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810d8e4:	07d0      	lsls	r0, r2, #31
 810d8e6:	d404      	bmi.n	810d8f2 <_fflush_r+0x32>
 810d8e8:	0599      	lsls	r1, r3, #22
 810d8ea:	d402      	bmi.n	810d8f2 <_fflush_r+0x32>
 810d8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810d8ee:	f7fd f9fc 	bl	810acea <__retarget_lock_acquire_recursive>
 810d8f2:	4628      	mov	r0, r5
 810d8f4:	4621      	mov	r1, r4
 810d8f6:	f7ff ff5d 	bl	810d7b4 <__sflush_r>
 810d8fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810d8fc:	07da      	lsls	r2, r3, #31
 810d8fe:	4605      	mov	r5, r0
 810d900:	d4e4      	bmi.n	810d8cc <_fflush_r+0xc>
 810d902:	89a3      	ldrh	r3, [r4, #12]
 810d904:	059b      	lsls	r3, r3, #22
 810d906:	d4e1      	bmi.n	810d8cc <_fflush_r+0xc>
 810d908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810d90a:	f7fd f9ef 	bl	810acec <__retarget_lock_release_recursive>
 810d90e:	e7dd      	b.n	810d8cc <_fflush_r+0xc>

0810d910 <__swbuf_r>:
 810d910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d912:	460e      	mov	r6, r1
 810d914:	4614      	mov	r4, r2
 810d916:	4605      	mov	r5, r0
 810d918:	b118      	cbz	r0, 810d922 <__swbuf_r+0x12>
 810d91a:	6a03      	ldr	r3, [r0, #32]
 810d91c:	b90b      	cbnz	r3, 810d922 <__swbuf_r+0x12>
 810d91e:	f7fd f8bb 	bl	810aa98 <__sinit>
 810d922:	69a3      	ldr	r3, [r4, #24]
 810d924:	60a3      	str	r3, [r4, #8]
 810d926:	89a3      	ldrh	r3, [r4, #12]
 810d928:	071a      	lsls	r2, r3, #28
 810d92a:	d525      	bpl.n	810d978 <__swbuf_r+0x68>
 810d92c:	6923      	ldr	r3, [r4, #16]
 810d92e:	b31b      	cbz	r3, 810d978 <__swbuf_r+0x68>
 810d930:	6823      	ldr	r3, [r4, #0]
 810d932:	6922      	ldr	r2, [r4, #16]
 810d934:	1a98      	subs	r0, r3, r2
 810d936:	6963      	ldr	r3, [r4, #20]
 810d938:	b2f6      	uxtb	r6, r6
 810d93a:	4283      	cmp	r3, r0
 810d93c:	4637      	mov	r7, r6
 810d93e:	dc04      	bgt.n	810d94a <__swbuf_r+0x3a>
 810d940:	4621      	mov	r1, r4
 810d942:	4628      	mov	r0, r5
 810d944:	f7ff ffbc 	bl	810d8c0 <_fflush_r>
 810d948:	b9e0      	cbnz	r0, 810d984 <__swbuf_r+0x74>
 810d94a:	68a3      	ldr	r3, [r4, #8]
 810d94c:	3b01      	subs	r3, #1
 810d94e:	60a3      	str	r3, [r4, #8]
 810d950:	6823      	ldr	r3, [r4, #0]
 810d952:	1c5a      	adds	r2, r3, #1
 810d954:	6022      	str	r2, [r4, #0]
 810d956:	701e      	strb	r6, [r3, #0]
 810d958:	6962      	ldr	r2, [r4, #20]
 810d95a:	1c43      	adds	r3, r0, #1
 810d95c:	429a      	cmp	r2, r3
 810d95e:	d004      	beq.n	810d96a <__swbuf_r+0x5a>
 810d960:	89a3      	ldrh	r3, [r4, #12]
 810d962:	07db      	lsls	r3, r3, #31
 810d964:	d506      	bpl.n	810d974 <__swbuf_r+0x64>
 810d966:	2e0a      	cmp	r6, #10
 810d968:	d104      	bne.n	810d974 <__swbuf_r+0x64>
 810d96a:	4621      	mov	r1, r4
 810d96c:	4628      	mov	r0, r5
 810d96e:	f7ff ffa7 	bl	810d8c0 <_fflush_r>
 810d972:	b938      	cbnz	r0, 810d984 <__swbuf_r+0x74>
 810d974:	4638      	mov	r0, r7
 810d976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d978:	4621      	mov	r1, r4
 810d97a:	4628      	mov	r0, r5
 810d97c:	f000 f806 	bl	810d98c <__swsetup_r>
 810d980:	2800      	cmp	r0, #0
 810d982:	d0d5      	beq.n	810d930 <__swbuf_r+0x20>
 810d984:	f04f 37ff 	mov.w	r7, #4294967295
 810d988:	e7f4      	b.n	810d974 <__swbuf_r+0x64>
	...

0810d98c <__swsetup_r>:
 810d98c:	b538      	push	{r3, r4, r5, lr}
 810d98e:	4b2a      	ldr	r3, [pc, #168]	; (810da38 <__swsetup_r+0xac>)
 810d990:	4605      	mov	r5, r0
 810d992:	6818      	ldr	r0, [r3, #0]
 810d994:	460c      	mov	r4, r1
 810d996:	b118      	cbz	r0, 810d9a0 <__swsetup_r+0x14>
 810d998:	6a03      	ldr	r3, [r0, #32]
 810d99a:	b90b      	cbnz	r3, 810d9a0 <__swsetup_r+0x14>
 810d99c:	f7fd f87c 	bl	810aa98 <__sinit>
 810d9a0:	89a3      	ldrh	r3, [r4, #12]
 810d9a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d9a6:	0718      	lsls	r0, r3, #28
 810d9a8:	d422      	bmi.n	810d9f0 <__swsetup_r+0x64>
 810d9aa:	06d9      	lsls	r1, r3, #27
 810d9ac:	d407      	bmi.n	810d9be <__swsetup_r+0x32>
 810d9ae:	2309      	movs	r3, #9
 810d9b0:	602b      	str	r3, [r5, #0]
 810d9b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810d9b6:	81a3      	strh	r3, [r4, #12]
 810d9b8:	f04f 30ff 	mov.w	r0, #4294967295
 810d9bc:	e034      	b.n	810da28 <__swsetup_r+0x9c>
 810d9be:	0758      	lsls	r0, r3, #29
 810d9c0:	d512      	bpl.n	810d9e8 <__swsetup_r+0x5c>
 810d9c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d9c4:	b141      	cbz	r1, 810d9d8 <__swsetup_r+0x4c>
 810d9c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d9ca:	4299      	cmp	r1, r3
 810d9cc:	d002      	beq.n	810d9d4 <__swsetup_r+0x48>
 810d9ce:	4628      	mov	r0, r5
 810d9d0:	f7fe f810 	bl	810b9f4 <_free_r>
 810d9d4:	2300      	movs	r3, #0
 810d9d6:	6363      	str	r3, [r4, #52]	; 0x34
 810d9d8:	89a3      	ldrh	r3, [r4, #12]
 810d9da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810d9de:	81a3      	strh	r3, [r4, #12]
 810d9e0:	2300      	movs	r3, #0
 810d9e2:	6063      	str	r3, [r4, #4]
 810d9e4:	6923      	ldr	r3, [r4, #16]
 810d9e6:	6023      	str	r3, [r4, #0]
 810d9e8:	89a3      	ldrh	r3, [r4, #12]
 810d9ea:	f043 0308 	orr.w	r3, r3, #8
 810d9ee:	81a3      	strh	r3, [r4, #12]
 810d9f0:	6923      	ldr	r3, [r4, #16]
 810d9f2:	b94b      	cbnz	r3, 810da08 <__swsetup_r+0x7c>
 810d9f4:	89a3      	ldrh	r3, [r4, #12]
 810d9f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810d9fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810d9fe:	d003      	beq.n	810da08 <__swsetup_r+0x7c>
 810da00:	4621      	mov	r1, r4
 810da02:	4628      	mov	r0, r5
 810da04:	f000 fc7e 	bl	810e304 <__smakebuf_r>
 810da08:	89a0      	ldrh	r0, [r4, #12]
 810da0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810da0e:	f010 0301 	ands.w	r3, r0, #1
 810da12:	d00a      	beq.n	810da2a <__swsetup_r+0x9e>
 810da14:	2300      	movs	r3, #0
 810da16:	60a3      	str	r3, [r4, #8]
 810da18:	6963      	ldr	r3, [r4, #20]
 810da1a:	425b      	negs	r3, r3
 810da1c:	61a3      	str	r3, [r4, #24]
 810da1e:	6923      	ldr	r3, [r4, #16]
 810da20:	b943      	cbnz	r3, 810da34 <__swsetup_r+0xa8>
 810da22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810da26:	d1c4      	bne.n	810d9b2 <__swsetup_r+0x26>
 810da28:	bd38      	pop	{r3, r4, r5, pc}
 810da2a:	0781      	lsls	r1, r0, #30
 810da2c:	bf58      	it	pl
 810da2e:	6963      	ldrpl	r3, [r4, #20]
 810da30:	60a3      	str	r3, [r4, #8]
 810da32:	e7f4      	b.n	810da1e <__swsetup_r+0x92>
 810da34:	2000      	movs	r0, #0
 810da36:	e7f7      	b.n	810da28 <__swsetup_r+0x9c>
 810da38:	100000c8 	.word	0x100000c8

0810da3c <memmove>:
 810da3c:	4288      	cmp	r0, r1
 810da3e:	b510      	push	{r4, lr}
 810da40:	eb01 0402 	add.w	r4, r1, r2
 810da44:	d902      	bls.n	810da4c <memmove+0x10>
 810da46:	4284      	cmp	r4, r0
 810da48:	4623      	mov	r3, r4
 810da4a:	d807      	bhi.n	810da5c <memmove+0x20>
 810da4c:	1e43      	subs	r3, r0, #1
 810da4e:	42a1      	cmp	r1, r4
 810da50:	d008      	beq.n	810da64 <memmove+0x28>
 810da52:	f811 2b01 	ldrb.w	r2, [r1], #1
 810da56:	f803 2f01 	strb.w	r2, [r3, #1]!
 810da5a:	e7f8      	b.n	810da4e <memmove+0x12>
 810da5c:	4402      	add	r2, r0
 810da5e:	4601      	mov	r1, r0
 810da60:	428a      	cmp	r2, r1
 810da62:	d100      	bne.n	810da66 <memmove+0x2a>
 810da64:	bd10      	pop	{r4, pc}
 810da66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810da6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810da6e:	e7f7      	b.n	810da60 <memmove+0x24>

0810da70 <strncmp>:
 810da70:	b510      	push	{r4, lr}
 810da72:	b16a      	cbz	r2, 810da90 <strncmp+0x20>
 810da74:	3901      	subs	r1, #1
 810da76:	1884      	adds	r4, r0, r2
 810da78:	f810 2b01 	ldrb.w	r2, [r0], #1
 810da7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810da80:	429a      	cmp	r2, r3
 810da82:	d103      	bne.n	810da8c <strncmp+0x1c>
 810da84:	42a0      	cmp	r0, r4
 810da86:	d001      	beq.n	810da8c <strncmp+0x1c>
 810da88:	2a00      	cmp	r2, #0
 810da8a:	d1f5      	bne.n	810da78 <strncmp+0x8>
 810da8c:	1ad0      	subs	r0, r2, r3
 810da8e:	bd10      	pop	{r4, pc}
 810da90:	4610      	mov	r0, r2
 810da92:	e7fc      	b.n	810da8e <strncmp+0x1e>

0810da94 <_sbrk_r>:
 810da94:	b538      	push	{r3, r4, r5, lr}
 810da96:	4d06      	ldr	r5, [pc, #24]	; (810dab0 <_sbrk_r+0x1c>)
 810da98:	2300      	movs	r3, #0
 810da9a:	4604      	mov	r4, r0
 810da9c:	4608      	mov	r0, r1
 810da9e:	602b      	str	r3, [r5, #0]
 810daa0:	f7f5 fc60 	bl	8103364 <_sbrk>
 810daa4:	1c43      	adds	r3, r0, #1
 810daa6:	d102      	bne.n	810daae <_sbrk_r+0x1a>
 810daa8:	682b      	ldr	r3, [r5, #0]
 810daaa:	b103      	cbz	r3, 810daae <_sbrk_r+0x1a>
 810daac:	6023      	str	r3, [r4, #0]
 810daae:	bd38      	pop	{r3, r4, r5, pc}
 810dab0:	100006a4 	.word	0x100006a4

0810dab4 <memcpy>:
 810dab4:	440a      	add	r2, r1
 810dab6:	4291      	cmp	r1, r2
 810dab8:	f100 33ff 	add.w	r3, r0, #4294967295
 810dabc:	d100      	bne.n	810dac0 <memcpy+0xc>
 810dabe:	4770      	bx	lr
 810dac0:	b510      	push	{r4, lr}
 810dac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 810dac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 810daca:	4291      	cmp	r1, r2
 810dacc:	d1f9      	bne.n	810dac2 <memcpy+0xe>
 810dace:	bd10      	pop	{r4, pc}

0810dad0 <nan>:
 810dad0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810dad8 <nan+0x8>
 810dad4:	4770      	bx	lr
 810dad6:	bf00      	nop
 810dad8:	00000000 	.word	0x00000000
 810dadc:	7ff80000 	.word	0x7ff80000

0810dae0 <__assert_func>:
 810dae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810dae2:	4614      	mov	r4, r2
 810dae4:	461a      	mov	r2, r3
 810dae6:	4b09      	ldr	r3, [pc, #36]	; (810db0c <__assert_func+0x2c>)
 810dae8:	681b      	ldr	r3, [r3, #0]
 810daea:	4605      	mov	r5, r0
 810daec:	68d8      	ldr	r0, [r3, #12]
 810daee:	b14c      	cbz	r4, 810db04 <__assert_func+0x24>
 810daf0:	4b07      	ldr	r3, [pc, #28]	; (810db10 <__assert_func+0x30>)
 810daf2:	9100      	str	r1, [sp, #0]
 810daf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810daf8:	4906      	ldr	r1, [pc, #24]	; (810db14 <__assert_func+0x34>)
 810dafa:	462b      	mov	r3, r5
 810dafc:	f000 fbca 	bl	810e294 <fiprintf>
 810db00:	f000 fc5e 	bl	810e3c0 <abort>
 810db04:	4b04      	ldr	r3, [pc, #16]	; (810db18 <__assert_func+0x38>)
 810db06:	461c      	mov	r4, r3
 810db08:	e7f3      	b.n	810daf2 <__assert_func+0x12>
 810db0a:	bf00      	nop
 810db0c:	100000c8 	.word	0x100000c8
 810db10:	0810ebf2 	.word	0x0810ebf2
 810db14:	0810ebff 	.word	0x0810ebff
 810db18:	0810ec2d 	.word	0x0810ec2d

0810db1c <_calloc_r>:
 810db1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810db1e:	fba1 2402 	umull	r2, r4, r1, r2
 810db22:	b94c      	cbnz	r4, 810db38 <_calloc_r+0x1c>
 810db24:	4611      	mov	r1, r2
 810db26:	9201      	str	r2, [sp, #4]
 810db28:	f7fd ffd8 	bl	810badc <_malloc_r>
 810db2c:	9a01      	ldr	r2, [sp, #4]
 810db2e:	4605      	mov	r5, r0
 810db30:	b930      	cbnz	r0, 810db40 <_calloc_r+0x24>
 810db32:	4628      	mov	r0, r5
 810db34:	b003      	add	sp, #12
 810db36:	bd30      	pop	{r4, r5, pc}
 810db38:	220c      	movs	r2, #12
 810db3a:	6002      	str	r2, [r0, #0]
 810db3c:	2500      	movs	r5, #0
 810db3e:	e7f8      	b.n	810db32 <_calloc_r+0x16>
 810db40:	4621      	mov	r1, r4
 810db42:	f7fd f854 	bl	810abee <memset>
 810db46:	e7f4      	b.n	810db32 <_calloc_r+0x16>

0810db48 <rshift>:
 810db48:	6903      	ldr	r3, [r0, #16]
 810db4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810db4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810db52:	ea4f 1261 	mov.w	r2, r1, asr #5
 810db56:	f100 0414 	add.w	r4, r0, #20
 810db5a:	dd45      	ble.n	810dbe8 <rshift+0xa0>
 810db5c:	f011 011f 	ands.w	r1, r1, #31
 810db60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810db64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810db68:	d10c      	bne.n	810db84 <rshift+0x3c>
 810db6a:	f100 0710 	add.w	r7, r0, #16
 810db6e:	4629      	mov	r1, r5
 810db70:	42b1      	cmp	r1, r6
 810db72:	d334      	bcc.n	810dbde <rshift+0x96>
 810db74:	1a9b      	subs	r3, r3, r2
 810db76:	009b      	lsls	r3, r3, #2
 810db78:	1eea      	subs	r2, r5, #3
 810db7a:	4296      	cmp	r6, r2
 810db7c:	bf38      	it	cc
 810db7e:	2300      	movcc	r3, #0
 810db80:	4423      	add	r3, r4
 810db82:	e015      	b.n	810dbb0 <rshift+0x68>
 810db84:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810db88:	f1c1 0820 	rsb	r8, r1, #32
 810db8c:	40cf      	lsrs	r7, r1
 810db8e:	f105 0e04 	add.w	lr, r5, #4
 810db92:	46a1      	mov	r9, r4
 810db94:	4576      	cmp	r6, lr
 810db96:	46f4      	mov	ip, lr
 810db98:	d815      	bhi.n	810dbc6 <rshift+0x7e>
 810db9a:	1a9a      	subs	r2, r3, r2
 810db9c:	0092      	lsls	r2, r2, #2
 810db9e:	3a04      	subs	r2, #4
 810dba0:	3501      	adds	r5, #1
 810dba2:	42ae      	cmp	r6, r5
 810dba4:	bf38      	it	cc
 810dba6:	2200      	movcc	r2, #0
 810dba8:	18a3      	adds	r3, r4, r2
 810dbaa:	50a7      	str	r7, [r4, r2]
 810dbac:	b107      	cbz	r7, 810dbb0 <rshift+0x68>
 810dbae:	3304      	adds	r3, #4
 810dbb0:	1b1a      	subs	r2, r3, r4
 810dbb2:	42a3      	cmp	r3, r4
 810dbb4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810dbb8:	bf08      	it	eq
 810dbba:	2300      	moveq	r3, #0
 810dbbc:	6102      	str	r2, [r0, #16]
 810dbbe:	bf08      	it	eq
 810dbc0:	6143      	streq	r3, [r0, #20]
 810dbc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810dbc6:	f8dc c000 	ldr.w	ip, [ip]
 810dbca:	fa0c fc08 	lsl.w	ip, ip, r8
 810dbce:	ea4c 0707 	orr.w	r7, ip, r7
 810dbd2:	f849 7b04 	str.w	r7, [r9], #4
 810dbd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 810dbda:	40cf      	lsrs	r7, r1
 810dbdc:	e7da      	b.n	810db94 <rshift+0x4c>
 810dbde:	f851 cb04 	ldr.w	ip, [r1], #4
 810dbe2:	f847 cf04 	str.w	ip, [r7, #4]!
 810dbe6:	e7c3      	b.n	810db70 <rshift+0x28>
 810dbe8:	4623      	mov	r3, r4
 810dbea:	e7e1      	b.n	810dbb0 <rshift+0x68>

0810dbec <__hexdig_fun>:
 810dbec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810dbf0:	2b09      	cmp	r3, #9
 810dbf2:	d802      	bhi.n	810dbfa <__hexdig_fun+0xe>
 810dbf4:	3820      	subs	r0, #32
 810dbf6:	b2c0      	uxtb	r0, r0
 810dbf8:	4770      	bx	lr
 810dbfa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810dbfe:	2b05      	cmp	r3, #5
 810dc00:	d801      	bhi.n	810dc06 <__hexdig_fun+0x1a>
 810dc02:	3847      	subs	r0, #71	; 0x47
 810dc04:	e7f7      	b.n	810dbf6 <__hexdig_fun+0xa>
 810dc06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810dc0a:	2b05      	cmp	r3, #5
 810dc0c:	d801      	bhi.n	810dc12 <__hexdig_fun+0x26>
 810dc0e:	3827      	subs	r0, #39	; 0x27
 810dc10:	e7f1      	b.n	810dbf6 <__hexdig_fun+0xa>
 810dc12:	2000      	movs	r0, #0
 810dc14:	4770      	bx	lr
	...

0810dc18 <__gethex>:
 810dc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dc1c:	4617      	mov	r7, r2
 810dc1e:	680a      	ldr	r2, [r1, #0]
 810dc20:	b085      	sub	sp, #20
 810dc22:	f102 0b02 	add.w	fp, r2, #2
 810dc26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810dc2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810dc2e:	4681      	mov	r9, r0
 810dc30:	468a      	mov	sl, r1
 810dc32:	9302      	str	r3, [sp, #8]
 810dc34:	32fe      	adds	r2, #254	; 0xfe
 810dc36:	eb02 030b 	add.w	r3, r2, fp
 810dc3a:	46d8      	mov	r8, fp
 810dc3c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 810dc40:	9301      	str	r3, [sp, #4]
 810dc42:	2830      	cmp	r0, #48	; 0x30
 810dc44:	d0f7      	beq.n	810dc36 <__gethex+0x1e>
 810dc46:	f7ff ffd1 	bl	810dbec <__hexdig_fun>
 810dc4a:	4604      	mov	r4, r0
 810dc4c:	2800      	cmp	r0, #0
 810dc4e:	d138      	bne.n	810dcc2 <__gethex+0xaa>
 810dc50:	49a7      	ldr	r1, [pc, #668]	; (810def0 <__gethex+0x2d8>)
 810dc52:	2201      	movs	r2, #1
 810dc54:	4640      	mov	r0, r8
 810dc56:	f7ff ff0b 	bl	810da70 <strncmp>
 810dc5a:	4606      	mov	r6, r0
 810dc5c:	2800      	cmp	r0, #0
 810dc5e:	d169      	bne.n	810dd34 <__gethex+0x11c>
 810dc60:	f898 0001 	ldrb.w	r0, [r8, #1]
 810dc64:	465d      	mov	r5, fp
 810dc66:	f7ff ffc1 	bl	810dbec <__hexdig_fun>
 810dc6a:	2800      	cmp	r0, #0
 810dc6c:	d064      	beq.n	810dd38 <__gethex+0x120>
 810dc6e:	465a      	mov	r2, fp
 810dc70:	7810      	ldrb	r0, [r2, #0]
 810dc72:	2830      	cmp	r0, #48	; 0x30
 810dc74:	4690      	mov	r8, r2
 810dc76:	f102 0201 	add.w	r2, r2, #1
 810dc7a:	d0f9      	beq.n	810dc70 <__gethex+0x58>
 810dc7c:	f7ff ffb6 	bl	810dbec <__hexdig_fun>
 810dc80:	2301      	movs	r3, #1
 810dc82:	fab0 f480 	clz	r4, r0
 810dc86:	0964      	lsrs	r4, r4, #5
 810dc88:	465e      	mov	r6, fp
 810dc8a:	9301      	str	r3, [sp, #4]
 810dc8c:	4642      	mov	r2, r8
 810dc8e:	4615      	mov	r5, r2
 810dc90:	3201      	adds	r2, #1
 810dc92:	7828      	ldrb	r0, [r5, #0]
 810dc94:	f7ff ffaa 	bl	810dbec <__hexdig_fun>
 810dc98:	2800      	cmp	r0, #0
 810dc9a:	d1f8      	bne.n	810dc8e <__gethex+0x76>
 810dc9c:	4994      	ldr	r1, [pc, #592]	; (810def0 <__gethex+0x2d8>)
 810dc9e:	2201      	movs	r2, #1
 810dca0:	4628      	mov	r0, r5
 810dca2:	f7ff fee5 	bl	810da70 <strncmp>
 810dca6:	b978      	cbnz	r0, 810dcc8 <__gethex+0xb0>
 810dca8:	b946      	cbnz	r6, 810dcbc <__gethex+0xa4>
 810dcaa:	1c6e      	adds	r6, r5, #1
 810dcac:	4632      	mov	r2, r6
 810dcae:	4615      	mov	r5, r2
 810dcb0:	3201      	adds	r2, #1
 810dcb2:	7828      	ldrb	r0, [r5, #0]
 810dcb4:	f7ff ff9a 	bl	810dbec <__hexdig_fun>
 810dcb8:	2800      	cmp	r0, #0
 810dcba:	d1f8      	bne.n	810dcae <__gethex+0x96>
 810dcbc:	1b73      	subs	r3, r6, r5
 810dcbe:	009e      	lsls	r6, r3, #2
 810dcc0:	e004      	b.n	810dccc <__gethex+0xb4>
 810dcc2:	2400      	movs	r4, #0
 810dcc4:	4626      	mov	r6, r4
 810dcc6:	e7e1      	b.n	810dc8c <__gethex+0x74>
 810dcc8:	2e00      	cmp	r6, #0
 810dcca:	d1f7      	bne.n	810dcbc <__gethex+0xa4>
 810dccc:	782b      	ldrb	r3, [r5, #0]
 810dcce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810dcd2:	2b50      	cmp	r3, #80	; 0x50
 810dcd4:	d13d      	bne.n	810dd52 <__gethex+0x13a>
 810dcd6:	786b      	ldrb	r3, [r5, #1]
 810dcd8:	2b2b      	cmp	r3, #43	; 0x2b
 810dcda:	d02f      	beq.n	810dd3c <__gethex+0x124>
 810dcdc:	2b2d      	cmp	r3, #45	; 0x2d
 810dcde:	d031      	beq.n	810dd44 <__gethex+0x12c>
 810dce0:	1c69      	adds	r1, r5, #1
 810dce2:	f04f 0b00 	mov.w	fp, #0
 810dce6:	7808      	ldrb	r0, [r1, #0]
 810dce8:	f7ff ff80 	bl	810dbec <__hexdig_fun>
 810dcec:	1e42      	subs	r2, r0, #1
 810dcee:	b2d2      	uxtb	r2, r2
 810dcf0:	2a18      	cmp	r2, #24
 810dcf2:	d82e      	bhi.n	810dd52 <__gethex+0x13a>
 810dcf4:	f1a0 0210 	sub.w	r2, r0, #16
 810dcf8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810dcfc:	f7ff ff76 	bl	810dbec <__hexdig_fun>
 810dd00:	f100 3cff 	add.w	ip, r0, #4294967295
 810dd04:	fa5f fc8c 	uxtb.w	ip, ip
 810dd08:	f1bc 0f18 	cmp.w	ip, #24
 810dd0c:	d91d      	bls.n	810dd4a <__gethex+0x132>
 810dd0e:	f1bb 0f00 	cmp.w	fp, #0
 810dd12:	d000      	beq.n	810dd16 <__gethex+0xfe>
 810dd14:	4252      	negs	r2, r2
 810dd16:	4416      	add	r6, r2
 810dd18:	f8ca 1000 	str.w	r1, [sl]
 810dd1c:	b1dc      	cbz	r4, 810dd56 <__gethex+0x13e>
 810dd1e:	9b01      	ldr	r3, [sp, #4]
 810dd20:	2b00      	cmp	r3, #0
 810dd22:	bf14      	ite	ne
 810dd24:	f04f 0800 	movne.w	r8, #0
 810dd28:	f04f 0806 	moveq.w	r8, #6
 810dd2c:	4640      	mov	r0, r8
 810dd2e:	b005      	add	sp, #20
 810dd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dd34:	4645      	mov	r5, r8
 810dd36:	4626      	mov	r6, r4
 810dd38:	2401      	movs	r4, #1
 810dd3a:	e7c7      	b.n	810dccc <__gethex+0xb4>
 810dd3c:	f04f 0b00 	mov.w	fp, #0
 810dd40:	1ca9      	adds	r1, r5, #2
 810dd42:	e7d0      	b.n	810dce6 <__gethex+0xce>
 810dd44:	f04f 0b01 	mov.w	fp, #1
 810dd48:	e7fa      	b.n	810dd40 <__gethex+0x128>
 810dd4a:	230a      	movs	r3, #10
 810dd4c:	fb03 0002 	mla	r0, r3, r2, r0
 810dd50:	e7d0      	b.n	810dcf4 <__gethex+0xdc>
 810dd52:	4629      	mov	r1, r5
 810dd54:	e7e0      	b.n	810dd18 <__gethex+0x100>
 810dd56:	eba5 0308 	sub.w	r3, r5, r8
 810dd5a:	3b01      	subs	r3, #1
 810dd5c:	4621      	mov	r1, r4
 810dd5e:	2b07      	cmp	r3, #7
 810dd60:	dc0a      	bgt.n	810dd78 <__gethex+0x160>
 810dd62:	4648      	mov	r0, r9
 810dd64:	f7fd ff46 	bl	810bbf4 <_Balloc>
 810dd68:	4604      	mov	r4, r0
 810dd6a:	b940      	cbnz	r0, 810dd7e <__gethex+0x166>
 810dd6c:	4b61      	ldr	r3, [pc, #388]	; (810def4 <__gethex+0x2dc>)
 810dd6e:	4602      	mov	r2, r0
 810dd70:	21e4      	movs	r1, #228	; 0xe4
 810dd72:	4861      	ldr	r0, [pc, #388]	; (810def8 <__gethex+0x2e0>)
 810dd74:	f7ff feb4 	bl	810dae0 <__assert_func>
 810dd78:	3101      	adds	r1, #1
 810dd7a:	105b      	asrs	r3, r3, #1
 810dd7c:	e7ef      	b.n	810dd5e <__gethex+0x146>
 810dd7e:	f100 0a14 	add.w	sl, r0, #20
 810dd82:	2300      	movs	r3, #0
 810dd84:	495a      	ldr	r1, [pc, #360]	; (810def0 <__gethex+0x2d8>)
 810dd86:	f8cd a004 	str.w	sl, [sp, #4]
 810dd8a:	469b      	mov	fp, r3
 810dd8c:	45a8      	cmp	r8, r5
 810dd8e:	d342      	bcc.n	810de16 <__gethex+0x1fe>
 810dd90:	9801      	ldr	r0, [sp, #4]
 810dd92:	f840 bb04 	str.w	fp, [r0], #4
 810dd96:	eba0 000a 	sub.w	r0, r0, sl
 810dd9a:	1080      	asrs	r0, r0, #2
 810dd9c:	6120      	str	r0, [r4, #16]
 810dd9e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 810dda2:	4658      	mov	r0, fp
 810dda4:	f7fe f818 	bl	810bdd8 <__hi0bits>
 810dda8:	683d      	ldr	r5, [r7, #0]
 810ddaa:	eba8 0000 	sub.w	r0, r8, r0
 810ddae:	42a8      	cmp	r0, r5
 810ddb0:	dd59      	ble.n	810de66 <__gethex+0x24e>
 810ddb2:	eba0 0805 	sub.w	r8, r0, r5
 810ddb6:	4641      	mov	r1, r8
 810ddb8:	4620      	mov	r0, r4
 810ddba:	f7fe fba7 	bl	810c50c <__any_on>
 810ddbe:	4683      	mov	fp, r0
 810ddc0:	b1b8      	cbz	r0, 810ddf2 <__gethex+0x1da>
 810ddc2:	f108 33ff 	add.w	r3, r8, #4294967295
 810ddc6:	1159      	asrs	r1, r3, #5
 810ddc8:	f003 021f 	and.w	r2, r3, #31
 810ddcc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810ddd0:	f04f 0b01 	mov.w	fp, #1
 810ddd4:	fa0b f202 	lsl.w	r2, fp, r2
 810ddd8:	420a      	tst	r2, r1
 810ddda:	d00a      	beq.n	810ddf2 <__gethex+0x1da>
 810dddc:	455b      	cmp	r3, fp
 810ddde:	dd06      	ble.n	810ddee <__gethex+0x1d6>
 810dde0:	f1a8 0102 	sub.w	r1, r8, #2
 810dde4:	4620      	mov	r0, r4
 810dde6:	f7fe fb91 	bl	810c50c <__any_on>
 810ddea:	2800      	cmp	r0, #0
 810ddec:	d138      	bne.n	810de60 <__gethex+0x248>
 810ddee:	f04f 0b02 	mov.w	fp, #2
 810ddf2:	4641      	mov	r1, r8
 810ddf4:	4620      	mov	r0, r4
 810ddf6:	f7ff fea7 	bl	810db48 <rshift>
 810ddfa:	4446      	add	r6, r8
 810ddfc:	68bb      	ldr	r3, [r7, #8]
 810ddfe:	42b3      	cmp	r3, r6
 810de00:	da41      	bge.n	810de86 <__gethex+0x26e>
 810de02:	4621      	mov	r1, r4
 810de04:	4648      	mov	r0, r9
 810de06:	f7fd ff35 	bl	810bc74 <_Bfree>
 810de0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810de0c:	2300      	movs	r3, #0
 810de0e:	6013      	str	r3, [r2, #0]
 810de10:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 810de14:	e78a      	b.n	810dd2c <__gethex+0x114>
 810de16:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 810de1a:	2a2e      	cmp	r2, #46	; 0x2e
 810de1c:	d014      	beq.n	810de48 <__gethex+0x230>
 810de1e:	2b20      	cmp	r3, #32
 810de20:	d106      	bne.n	810de30 <__gethex+0x218>
 810de22:	9b01      	ldr	r3, [sp, #4]
 810de24:	f843 bb04 	str.w	fp, [r3], #4
 810de28:	f04f 0b00 	mov.w	fp, #0
 810de2c:	9301      	str	r3, [sp, #4]
 810de2e:	465b      	mov	r3, fp
 810de30:	7828      	ldrb	r0, [r5, #0]
 810de32:	9303      	str	r3, [sp, #12]
 810de34:	f7ff feda 	bl	810dbec <__hexdig_fun>
 810de38:	9b03      	ldr	r3, [sp, #12]
 810de3a:	f000 000f 	and.w	r0, r0, #15
 810de3e:	4098      	lsls	r0, r3
 810de40:	ea4b 0b00 	orr.w	fp, fp, r0
 810de44:	3304      	adds	r3, #4
 810de46:	e7a1      	b.n	810dd8c <__gethex+0x174>
 810de48:	45a8      	cmp	r8, r5
 810de4a:	d8e8      	bhi.n	810de1e <__gethex+0x206>
 810de4c:	2201      	movs	r2, #1
 810de4e:	4628      	mov	r0, r5
 810de50:	9303      	str	r3, [sp, #12]
 810de52:	f7ff fe0d 	bl	810da70 <strncmp>
 810de56:	4926      	ldr	r1, [pc, #152]	; (810def0 <__gethex+0x2d8>)
 810de58:	9b03      	ldr	r3, [sp, #12]
 810de5a:	2800      	cmp	r0, #0
 810de5c:	d1df      	bne.n	810de1e <__gethex+0x206>
 810de5e:	e795      	b.n	810dd8c <__gethex+0x174>
 810de60:	f04f 0b03 	mov.w	fp, #3
 810de64:	e7c5      	b.n	810ddf2 <__gethex+0x1da>
 810de66:	da0b      	bge.n	810de80 <__gethex+0x268>
 810de68:	eba5 0800 	sub.w	r8, r5, r0
 810de6c:	4621      	mov	r1, r4
 810de6e:	4642      	mov	r2, r8
 810de70:	4648      	mov	r0, r9
 810de72:	f7fe f919 	bl	810c0a8 <__lshift>
 810de76:	eba6 0608 	sub.w	r6, r6, r8
 810de7a:	4604      	mov	r4, r0
 810de7c:	f100 0a14 	add.w	sl, r0, #20
 810de80:	f04f 0b00 	mov.w	fp, #0
 810de84:	e7ba      	b.n	810ddfc <__gethex+0x1e4>
 810de86:	687b      	ldr	r3, [r7, #4]
 810de88:	42b3      	cmp	r3, r6
 810de8a:	dd73      	ble.n	810df74 <__gethex+0x35c>
 810de8c:	1b9e      	subs	r6, r3, r6
 810de8e:	42b5      	cmp	r5, r6
 810de90:	dc34      	bgt.n	810defc <__gethex+0x2e4>
 810de92:	68fb      	ldr	r3, [r7, #12]
 810de94:	2b02      	cmp	r3, #2
 810de96:	d023      	beq.n	810dee0 <__gethex+0x2c8>
 810de98:	2b03      	cmp	r3, #3
 810de9a:	d025      	beq.n	810dee8 <__gethex+0x2d0>
 810de9c:	2b01      	cmp	r3, #1
 810de9e:	d115      	bne.n	810decc <__gethex+0x2b4>
 810dea0:	42b5      	cmp	r5, r6
 810dea2:	d113      	bne.n	810decc <__gethex+0x2b4>
 810dea4:	2d01      	cmp	r5, #1
 810dea6:	d10b      	bne.n	810dec0 <__gethex+0x2a8>
 810dea8:	9a02      	ldr	r2, [sp, #8]
 810deaa:	687b      	ldr	r3, [r7, #4]
 810deac:	6013      	str	r3, [r2, #0]
 810deae:	2301      	movs	r3, #1
 810deb0:	6123      	str	r3, [r4, #16]
 810deb2:	f8ca 3000 	str.w	r3, [sl]
 810deb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810deb8:	f04f 0862 	mov.w	r8, #98	; 0x62
 810debc:	601c      	str	r4, [r3, #0]
 810debe:	e735      	b.n	810dd2c <__gethex+0x114>
 810dec0:	1e69      	subs	r1, r5, #1
 810dec2:	4620      	mov	r0, r4
 810dec4:	f7fe fb22 	bl	810c50c <__any_on>
 810dec8:	2800      	cmp	r0, #0
 810deca:	d1ed      	bne.n	810dea8 <__gethex+0x290>
 810decc:	4621      	mov	r1, r4
 810dece:	4648      	mov	r0, r9
 810ded0:	f7fd fed0 	bl	810bc74 <_Bfree>
 810ded4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810ded6:	2300      	movs	r3, #0
 810ded8:	6013      	str	r3, [r2, #0]
 810deda:	f04f 0850 	mov.w	r8, #80	; 0x50
 810dede:	e725      	b.n	810dd2c <__gethex+0x114>
 810dee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810dee2:	2b00      	cmp	r3, #0
 810dee4:	d1f2      	bne.n	810decc <__gethex+0x2b4>
 810dee6:	e7df      	b.n	810dea8 <__gethex+0x290>
 810dee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810deea:	2b00      	cmp	r3, #0
 810deec:	d1dc      	bne.n	810dea8 <__gethex+0x290>
 810deee:	e7ed      	b.n	810decc <__gethex+0x2b4>
 810def0:	0810ea84 	.word	0x0810ea84
 810def4:	0810e91d 	.word	0x0810e91d
 810def8:	0810ec2e 	.word	0x0810ec2e
 810defc:	f106 38ff 	add.w	r8, r6, #4294967295
 810df00:	f1bb 0f00 	cmp.w	fp, #0
 810df04:	d133      	bne.n	810df6e <__gethex+0x356>
 810df06:	f1b8 0f00 	cmp.w	r8, #0
 810df0a:	d004      	beq.n	810df16 <__gethex+0x2fe>
 810df0c:	4641      	mov	r1, r8
 810df0e:	4620      	mov	r0, r4
 810df10:	f7fe fafc 	bl	810c50c <__any_on>
 810df14:	4683      	mov	fp, r0
 810df16:	ea4f 1268 	mov.w	r2, r8, asr #5
 810df1a:	2301      	movs	r3, #1
 810df1c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810df20:	f008 081f 	and.w	r8, r8, #31
 810df24:	fa03 f308 	lsl.w	r3, r3, r8
 810df28:	4213      	tst	r3, r2
 810df2a:	4631      	mov	r1, r6
 810df2c:	4620      	mov	r0, r4
 810df2e:	bf18      	it	ne
 810df30:	f04b 0b02 	orrne.w	fp, fp, #2
 810df34:	1bad      	subs	r5, r5, r6
 810df36:	f7ff fe07 	bl	810db48 <rshift>
 810df3a:	687e      	ldr	r6, [r7, #4]
 810df3c:	f04f 0802 	mov.w	r8, #2
 810df40:	f1bb 0f00 	cmp.w	fp, #0
 810df44:	d04a      	beq.n	810dfdc <__gethex+0x3c4>
 810df46:	68fb      	ldr	r3, [r7, #12]
 810df48:	2b02      	cmp	r3, #2
 810df4a:	d016      	beq.n	810df7a <__gethex+0x362>
 810df4c:	2b03      	cmp	r3, #3
 810df4e:	d018      	beq.n	810df82 <__gethex+0x36a>
 810df50:	2b01      	cmp	r3, #1
 810df52:	d109      	bne.n	810df68 <__gethex+0x350>
 810df54:	f01b 0f02 	tst.w	fp, #2
 810df58:	d006      	beq.n	810df68 <__gethex+0x350>
 810df5a:	f8da 3000 	ldr.w	r3, [sl]
 810df5e:	ea4b 0b03 	orr.w	fp, fp, r3
 810df62:	f01b 0f01 	tst.w	fp, #1
 810df66:	d10f      	bne.n	810df88 <__gethex+0x370>
 810df68:	f048 0810 	orr.w	r8, r8, #16
 810df6c:	e036      	b.n	810dfdc <__gethex+0x3c4>
 810df6e:	f04f 0b01 	mov.w	fp, #1
 810df72:	e7d0      	b.n	810df16 <__gethex+0x2fe>
 810df74:	f04f 0801 	mov.w	r8, #1
 810df78:	e7e2      	b.n	810df40 <__gethex+0x328>
 810df7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810df7c:	f1c3 0301 	rsb	r3, r3, #1
 810df80:	930f      	str	r3, [sp, #60]	; 0x3c
 810df82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810df84:	2b00      	cmp	r3, #0
 810df86:	d0ef      	beq.n	810df68 <__gethex+0x350>
 810df88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810df8c:	f104 0214 	add.w	r2, r4, #20
 810df90:	ea4f 038b 	mov.w	r3, fp, lsl #2
 810df94:	9301      	str	r3, [sp, #4]
 810df96:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 810df9a:	2300      	movs	r3, #0
 810df9c:	4694      	mov	ip, r2
 810df9e:	f852 1b04 	ldr.w	r1, [r2], #4
 810dfa2:	f1b1 3fff 	cmp.w	r1, #4294967295
 810dfa6:	d01e      	beq.n	810dfe6 <__gethex+0x3ce>
 810dfa8:	3101      	adds	r1, #1
 810dfaa:	f8cc 1000 	str.w	r1, [ip]
 810dfae:	f1b8 0f02 	cmp.w	r8, #2
 810dfb2:	f104 0214 	add.w	r2, r4, #20
 810dfb6:	d13d      	bne.n	810e034 <__gethex+0x41c>
 810dfb8:	683b      	ldr	r3, [r7, #0]
 810dfba:	3b01      	subs	r3, #1
 810dfbc:	42ab      	cmp	r3, r5
 810dfbe:	d10b      	bne.n	810dfd8 <__gethex+0x3c0>
 810dfc0:	1169      	asrs	r1, r5, #5
 810dfc2:	2301      	movs	r3, #1
 810dfc4:	f005 051f 	and.w	r5, r5, #31
 810dfc8:	fa03 f505 	lsl.w	r5, r3, r5
 810dfcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810dfd0:	421d      	tst	r5, r3
 810dfd2:	bf18      	it	ne
 810dfd4:	f04f 0801 	movne.w	r8, #1
 810dfd8:	f048 0820 	orr.w	r8, r8, #32
 810dfdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810dfde:	601c      	str	r4, [r3, #0]
 810dfe0:	9b02      	ldr	r3, [sp, #8]
 810dfe2:	601e      	str	r6, [r3, #0]
 810dfe4:	e6a2      	b.n	810dd2c <__gethex+0x114>
 810dfe6:	4290      	cmp	r0, r2
 810dfe8:	f842 3c04 	str.w	r3, [r2, #-4]
 810dfec:	d8d6      	bhi.n	810df9c <__gethex+0x384>
 810dfee:	68a2      	ldr	r2, [r4, #8]
 810dff0:	4593      	cmp	fp, r2
 810dff2:	db17      	blt.n	810e024 <__gethex+0x40c>
 810dff4:	6861      	ldr	r1, [r4, #4]
 810dff6:	4648      	mov	r0, r9
 810dff8:	3101      	adds	r1, #1
 810dffa:	f7fd fdfb 	bl	810bbf4 <_Balloc>
 810dffe:	4682      	mov	sl, r0
 810e000:	b918      	cbnz	r0, 810e00a <__gethex+0x3f2>
 810e002:	4b1b      	ldr	r3, [pc, #108]	; (810e070 <__gethex+0x458>)
 810e004:	4602      	mov	r2, r0
 810e006:	2184      	movs	r1, #132	; 0x84
 810e008:	e6b3      	b.n	810dd72 <__gethex+0x15a>
 810e00a:	6922      	ldr	r2, [r4, #16]
 810e00c:	3202      	adds	r2, #2
 810e00e:	f104 010c 	add.w	r1, r4, #12
 810e012:	0092      	lsls	r2, r2, #2
 810e014:	300c      	adds	r0, #12
 810e016:	f7ff fd4d 	bl	810dab4 <memcpy>
 810e01a:	4621      	mov	r1, r4
 810e01c:	4648      	mov	r0, r9
 810e01e:	f7fd fe29 	bl	810bc74 <_Bfree>
 810e022:	4654      	mov	r4, sl
 810e024:	6922      	ldr	r2, [r4, #16]
 810e026:	1c51      	adds	r1, r2, #1
 810e028:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 810e02c:	6121      	str	r1, [r4, #16]
 810e02e:	2101      	movs	r1, #1
 810e030:	6151      	str	r1, [r2, #20]
 810e032:	e7bc      	b.n	810dfae <__gethex+0x396>
 810e034:	6921      	ldr	r1, [r4, #16]
 810e036:	4559      	cmp	r1, fp
 810e038:	dd0b      	ble.n	810e052 <__gethex+0x43a>
 810e03a:	2101      	movs	r1, #1
 810e03c:	4620      	mov	r0, r4
 810e03e:	f7ff fd83 	bl	810db48 <rshift>
 810e042:	68bb      	ldr	r3, [r7, #8]
 810e044:	3601      	adds	r6, #1
 810e046:	42b3      	cmp	r3, r6
 810e048:	f6ff aedb 	blt.w	810de02 <__gethex+0x1ea>
 810e04c:	f04f 0801 	mov.w	r8, #1
 810e050:	e7c2      	b.n	810dfd8 <__gethex+0x3c0>
 810e052:	f015 051f 	ands.w	r5, r5, #31
 810e056:	d0f9      	beq.n	810e04c <__gethex+0x434>
 810e058:	9b01      	ldr	r3, [sp, #4]
 810e05a:	441a      	add	r2, r3
 810e05c:	f1c5 0520 	rsb	r5, r5, #32
 810e060:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810e064:	f7fd feb8 	bl	810bdd8 <__hi0bits>
 810e068:	42a8      	cmp	r0, r5
 810e06a:	dbe6      	blt.n	810e03a <__gethex+0x422>
 810e06c:	e7ee      	b.n	810e04c <__gethex+0x434>
 810e06e:	bf00      	nop
 810e070:	0810e91d 	.word	0x0810e91d

0810e074 <L_shift>:
 810e074:	f1c2 0208 	rsb	r2, r2, #8
 810e078:	0092      	lsls	r2, r2, #2
 810e07a:	b570      	push	{r4, r5, r6, lr}
 810e07c:	f1c2 0620 	rsb	r6, r2, #32
 810e080:	6843      	ldr	r3, [r0, #4]
 810e082:	6804      	ldr	r4, [r0, #0]
 810e084:	fa03 f506 	lsl.w	r5, r3, r6
 810e088:	432c      	orrs	r4, r5
 810e08a:	40d3      	lsrs	r3, r2
 810e08c:	6004      	str	r4, [r0, #0]
 810e08e:	f840 3f04 	str.w	r3, [r0, #4]!
 810e092:	4288      	cmp	r0, r1
 810e094:	d3f4      	bcc.n	810e080 <L_shift+0xc>
 810e096:	bd70      	pop	{r4, r5, r6, pc}

0810e098 <__match>:
 810e098:	b530      	push	{r4, r5, lr}
 810e09a:	6803      	ldr	r3, [r0, #0]
 810e09c:	3301      	adds	r3, #1
 810e09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e0a2:	b914      	cbnz	r4, 810e0aa <__match+0x12>
 810e0a4:	6003      	str	r3, [r0, #0]
 810e0a6:	2001      	movs	r0, #1
 810e0a8:	bd30      	pop	{r4, r5, pc}
 810e0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e0ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810e0b2:	2d19      	cmp	r5, #25
 810e0b4:	bf98      	it	ls
 810e0b6:	3220      	addls	r2, #32
 810e0b8:	42a2      	cmp	r2, r4
 810e0ba:	d0f0      	beq.n	810e09e <__match+0x6>
 810e0bc:	2000      	movs	r0, #0
 810e0be:	e7f3      	b.n	810e0a8 <__match+0x10>

0810e0c0 <__hexnan>:
 810e0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e0c4:	680b      	ldr	r3, [r1, #0]
 810e0c6:	6801      	ldr	r1, [r0, #0]
 810e0c8:	115e      	asrs	r6, r3, #5
 810e0ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810e0ce:	f013 031f 	ands.w	r3, r3, #31
 810e0d2:	b087      	sub	sp, #28
 810e0d4:	bf18      	it	ne
 810e0d6:	3604      	addne	r6, #4
 810e0d8:	2500      	movs	r5, #0
 810e0da:	1f37      	subs	r7, r6, #4
 810e0dc:	4682      	mov	sl, r0
 810e0de:	4690      	mov	r8, r2
 810e0e0:	9301      	str	r3, [sp, #4]
 810e0e2:	f846 5c04 	str.w	r5, [r6, #-4]
 810e0e6:	46b9      	mov	r9, r7
 810e0e8:	463c      	mov	r4, r7
 810e0ea:	9502      	str	r5, [sp, #8]
 810e0ec:	46ab      	mov	fp, r5
 810e0ee:	784a      	ldrb	r2, [r1, #1]
 810e0f0:	1c4b      	adds	r3, r1, #1
 810e0f2:	9303      	str	r3, [sp, #12]
 810e0f4:	b342      	cbz	r2, 810e148 <__hexnan+0x88>
 810e0f6:	4610      	mov	r0, r2
 810e0f8:	9105      	str	r1, [sp, #20]
 810e0fa:	9204      	str	r2, [sp, #16]
 810e0fc:	f7ff fd76 	bl	810dbec <__hexdig_fun>
 810e100:	2800      	cmp	r0, #0
 810e102:	d14f      	bne.n	810e1a4 <__hexnan+0xe4>
 810e104:	9a04      	ldr	r2, [sp, #16]
 810e106:	9905      	ldr	r1, [sp, #20]
 810e108:	2a20      	cmp	r2, #32
 810e10a:	d818      	bhi.n	810e13e <__hexnan+0x7e>
 810e10c:	9b02      	ldr	r3, [sp, #8]
 810e10e:	459b      	cmp	fp, r3
 810e110:	dd13      	ble.n	810e13a <__hexnan+0x7a>
 810e112:	454c      	cmp	r4, r9
 810e114:	d206      	bcs.n	810e124 <__hexnan+0x64>
 810e116:	2d07      	cmp	r5, #7
 810e118:	dc04      	bgt.n	810e124 <__hexnan+0x64>
 810e11a:	462a      	mov	r2, r5
 810e11c:	4649      	mov	r1, r9
 810e11e:	4620      	mov	r0, r4
 810e120:	f7ff ffa8 	bl	810e074 <L_shift>
 810e124:	4544      	cmp	r4, r8
 810e126:	d950      	bls.n	810e1ca <__hexnan+0x10a>
 810e128:	2300      	movs	r3, #0
 810e12a:	f1a4 0904 	sub.w	r9, r4, #4
 810e12e:	f844 3c04 	str.w	r3, [r4, #-4]
 810e132:	f8cd b008 	str.w	fp, [sp, #8]
 810e136:	464c      	mov	r4, r9
 810e138:	461d      	mov	r5, r3
 810e13a:	9903      	ldr	r1, [sp, #12]
 810e13c:	e7d7      	b.n	810e0ee <__hexnan+0x2e>
 810e13e:	2a29      	cmp	r2, #41	; 0x29
 810e140:	d155      	bne.n	810e1ee <__hexnan+0x12e>
 810e142:	3102      	adds	r1, #2
 810e144:	f8ca 1000 	str.w	r1, [sl]
 810e148:	f1bb 0f00 	cmp.w	fp, #0
 810e14c:	d04f      	beq.n	810e1ee <__hexnan+0x12e>
 810e14e:	454c      	cmp	r4, r9
 810e150:	d206      	bcs.n	810e160 <__hexnan+0xa0>
 810e152:	2d07      	cmp	r5, #7
 810e154:	dc04      	bgt.n	810e160 <__hexnan+0xa0>
 810e156:	462a      	mov	r2, r5
 810e158:	4649      	mov	r1, r9
 810e15a:	4620      	mov	r0, r4
 810e15c:	f7ff ff8a 	bl	810e074 <L_shift>
 810e160:	4544      	cmp	r4, r8
 810e162:	d934      	bls.n	810e1ce <__hexnan+0x10e>
 810e164:	f1a8 0204 	sub.w	r2, r8, #4
 810e168:	4623      	mov	r3, r4
 810e16a:	f853 1b04 	ldr.w	r1, [r3], #4
 810e16e:	f842 1f04 	str.w	r1, [r2, #4]!
 810e172:	429f      	cmp	r7, r3
 810e174:	d2f9      	bcs.n	810e16a <__hexnan+0xaa>
 810e176:	1b3b      	subs	r3, r7, r4
 810e178:	f023 0303 	bic.w	r3, r3, #3
 810e17c:	3304      	adds	r3, #4
 810e17e:	3e03      	subs	r6, #3
 810e180:	3401      	adds	r4, #1
 810e182:	42a6      	cmp	r6, r4
 810e184:	bf38      	it	cc
 810e186:	2304      	movcc	r3, #4
 810e188:	4443      	add	r3, r8
 810e18a:	2200      	movs	r2, #0
 810e18c:	f843 2b04 	str.w	r2, [r3], #4
 810e190:	429f      	cmp	r7, r3
 810e192:	d2fb      	bcs.n	810e18c <__hexnan+0xcc>
 810e194:	683b      	ldr	r3, [r7, #0]
 810e196:	b91b      	cbnz	r3, 810e1a0 <__hexnan+0xe0>
 810e198:	4547      	cmp	r7, r8
 810e19a:	d126      	bne.n	810e1ea <__hexnan+0x12a>
 810e19c:	2301      	movs	r3, #1
 810e19e:	603b      	str	r3, [r7, #0]
 810e1a0:	2005      	movs	r0, #5
 810e1a2:	e025      	b.n	810e1f0 <__hexnan+0x130>
 810e1a4:	3501      	adds	r5, #1
 810e1a6:	2d08      	cmp	r5, #8
 810e1a8:	f10b 0b01 	add.w	fp, fp, #1
 810e1ac:	dd06      	ble.n	810e1bc <__hexnan+0xfc>
 810e1ae:	4544      	cmp	r4, r8
 810e1b0:	d9c3      	bls.n	810e13a <__hexnan+0x7a>
 810e1b2:	2300      	movs	r3, #0
 810e1b4:	f844 3c04 	str.w	r3, [r4, #-4]
 810e1b8:	2501      	movs	r5, #1
 810e1ba:	3c04      	subs	r4, #4
 810e1bc:	6822      	ldr	r2, [r4, #0]
 810e1be:	f000 000f 	and.w	r0, r0, #15
 810e1c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810e1c6:	6020      	str	r0, [r4, #0]
 810e1c8:	e7b7      	b.n	810e13a <__hexnan+0x7a>
 810e1ca:	2508      	movs	r5, #8
 810e1cc:	e7b5      	b.n	810e13a <__hexnan+0x7a>
 810e1ce:	9b01      	ldr	r3, [sp, #4]
 810e1d0:	2b00      	cmp	r3, #0
 810e1d2:	d0df      	beq.n	810e194 <__hexnan+0xd4>
 810e1d4:	f1c3 0320 	rsb	r3, r3, #32
 810e1d8:	f04f 32ff 	mov.w	r2, #4294967295
 810e1dc:	40da      	lsrs	r2, r3
 810e1de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810e1e2:	4013      	ands	r3, r2
 810e1e4:	f846 3c04 	str.w	r3, [r6, #-4]
 810e1e8:	e7d4      	b.n	810e194 <__hexnan+0xd4>
 810e1ea:	3f04      	subs	r7, #4
 810e1ec:	e7d2      	b.n	810e194 <__hexnan+0xd4>
 810e1ee:	2004      	movs	r0, #4
 810e1f0:	b007      	add	sp, #28
 810e1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810e1f6 <__ascii_mbtowc>:
 810e1f6:	b082      	sub	sp, #8
 810e1f8:	b901      	cbnz	r1, 810e1fc <__ascii_mbtowc+0x6>
 810e1fa:	a901      	add	r1, sp, #4
 810e1fc:	b142      	cbz	r2, 810e210 <__ascii_mbtowc+0x1a>
 810e1fe:	b14b      	cbz	r3, 810e214 <__ascii_mbtowc+0x1e>
 810e200:	7813      	ldrb	r3, [r2, #0]
 810e202:	600b      	str	r3, [r1, #0]
 810e204:	7812      	ldrb	r2, [r2, #0]
 810e206:	1e10      	subs	r0, r2, #0
 810e208:	bf18      	it	ne
 810e20a:	2001      	movne	r0, #1
 810e20c:	b002      	add	sp, #8
 810e20e:	4770      	bx	lr
 810e210:	4610      	mov	r0, r2
 810e212:	e7fb      	b.n	810e20c <__ascii_mbtowc+0x16>
 810e214:	f06f 0001 	mvn.w	r0, #1
 810e218:	e7f8      	b.n	810e20c <__ascii_mbtowc+0x16>

0810e21a <_realloc_r>:
 810e21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e21e:	4680      	mov	r8, r0
 810e220:	4614      	mov	r4, r2
 810e222:	460e      	mov	r6, r1
 810e224:	b921      	cbnz	r1, 810e230 <_realloc_r+0x16>
 810e226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810e22a:	4611      	mov	r1, r2
 810e22c:	f7fd bc56 	b.w	810badc <_malloc_r>
 810e230:	b92a      	cbnz	r2, 810e23e <_realloc_r+0x24>
 810e232:	f7fd fbdf 	bl	810b9f4 <_free_r>
 810e236:	4625      	mov	r5, r4
 810e238:	4628      	mov	r0, r5
 810e23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e23e:	f000 f8c6 	bl	810e3ce <_malloc_usable_size_r>
 810e242:	4284      	cmp	r4, r0
 810e244:	4607      	mov	r7, r0
 810e246:	d802      	bhi.n	810e24e <_realloc_r+0x34>
 810e248:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810e24c:	d812      	bhi.n	810e274 <_realloc_r+0x5a>
 810e24e:	4621      	mov	r1, r4
 810e250:	4640      	mov	r0, r8
 810e252:	f7fd fc43 	bl	810badc <_malloc_r>
 810e256:	4605      	mov	r5, r0
 810e258:	2800      	cmp	r0, #0
 810e25a:	d0ed      	beq.n	810e238 <_realloc_r+0x1e>
 810e25c:	42bc      	cmp	r4, r7
 810e25e:	4622      	mov	r2, r4
 810e260:	4631      	mov	r1, r6
 810e262:	bf28      	it	cs
 810e264:	463a      	movcs	r2, r7
 810e266:	f7ff fc25 	bl	810dab4 <memcpy>
 810e26a:	4631      	mov	r1, r6
 810e26c:	4640      	mov	r0, r8
 810e26e:	f7fd fbc1 	bl	810b9f4 <_free_r>
 810e272:	e7e1      	b.n	810e238 <_realloc_r+0x1e>
 810e274:	4635      	mov	r5, r6
 810e276:	e7df      	b.n	810e238 <_realloc_r+0x1e>

0810e278 <__ascii_wctomb>:
 810e278:	b149      	cbz	r1, 810e28e <__ascii_wctomb+0x16>
 810e27a:	2aff      	cmp	r2, #255	; 0xff
 810e27c:	bf85      	ittet	hi
 810e27e:	238a      	movhi	r3, #138	; 0x8a
 810e280:	6003      	strhi	r3, [r0, #0]
 810e282:	700a      	strbls	r2, [r1, #0]
 810e284:	f04f 30ff 	movhi.w	r0, #4294967295
 810e288:	bf98      	it	ls
 810e28a:	2001      	movls	r0, #1
 810e28c:	4770      	bx	lr
 810e28e:	4608      	mov	r0, r1
 810e290:	4770      	bx	lr
	...

0810e294 <fiprintf>:
 810e294:	b40e      	push	{r1, r2, r3}
 810e296:	b503      	push	{r0, r1, lr}
 810e298:	4601      	mov	r1, r0
 810e29a:	ab03      	add	r3, sp, #12
 810e29c:	4805      	ldr	r0, [pc, #20]	; (810e2b4 <fiprintf+0x20>)
 810e29e:	f853 2b04 	ldr.w	r2, [r3], #4
 810e2a2:	6800      	ldr	r0, [r0, #0]
 810e2a4:	9301      	str	r3, [sp, #4]
 810e2a6:	f7ff f96b 	bl	810d580 <_vfiprintf_r>
 810e2aa:	b002      	add	sp, #8
 810e2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 810e2b0:	b003      	add	sp, #12
 810e2b2:	4770      	bx	lr
 810e2b4:	100000c8 	.word	0x100000c8

0810e2b8 <__swhatbuf_r>:
 810e2b8:	b570      	push	{r4, r5, r6, lr}
 810e2ba:	460c      	mov	r4, r1
 810e2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e2c0:	2900      	cmp	r1, #0
 810e2c2:	b096      	sub	sp, #88	; 0x58
 810e2c4:	4615      	mov	r5, r2
 810e2c6:	461e      	mov	r6, r3
 810e2c8:	da0d      	bge.n	810e2e6 <__swhatbuf_r+0x2e>
 810e2ca:	89a3      	ldrh	r3, [r4, #12]
 810e2cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 810e2d0:	f04f 0100 	mov.w	r1, #0
 810e2d4:	bf0c      	ite	eq
 810e2d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810e2da:	2340      	movne	r3, #64	; 0x40
 810e2dc:	2000      	movs	r0, #0
 810e2de:	6031      	str	r1, [r6, #0]
 810e2e0:	602b      	str	r3, [r5, #0]
 810e2e2:	b016      	add	sp, #88	; 0x58
 810e2e4:	bd70      	pop	{r4, r5, r6, pc}
 810e2e6:	466a      	mov	r2, sp
 810e2e8:	f000 f848 	bl	810e37c <_fstat_r>
 810e2ec:	2800      	cmp	r0, #0
 810e2ee:	dbec      	blt.n	810e2ca <__swhatbuf_r+0x12>
 810e2f0:	9901      	ldr	r1, [sp, #4]
 810e2f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810e2f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810e2fa:	4259      	negs	r1, r3
 810e2fc:	4159      	adcs	r1, r3
 810e2fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810e302:	e7eb      	b.n	810e2dc <__swhatbuf_r+0x24>

0810e304 <__smakebuf_r>:
 810e304:	898b      	ldrh	r3, [r1, #12]
 810e306:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810e308:	079d      	lsls	r5, r3, #30
 810e30a:	4606      	mov	r6, r0
 810e30c:	460c      	mov	r4, r1
 810e30e:	d507      	bpl.n	810e320 <__smakebuf_r+0x1c>
 810e310:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810e314:	6023      	str	r3, [r4, #0]
 810e316:	6123      	str	r3, [r4, #16]
 810e318:	2301      	movs	r3, #1
 810e31a:	6163      	str	r3, [r4, #20]
 810e31c:	b002      	add	sp, #8
 810e31e:	bd70      	pop	{r4, r5, r6, pc}
 810e320:	ab01      	add	r3, sp, #4
 810e322:	466a      	mov	r2, sp
 810e324:	f7ff ffc8 	bl	810e2b8 <__swhatbuf_r>
 810e328:	9900      	ldr	r1, [sp, #0]
 810e32a:	4605      	mov	r5, r0
 810e32c:	4630      	mov	r0, r6
 810e32e:	f7fd fbd5 	bl	810badc <_malloc_r>
 810e332:	b948      	cbnz	r0, 810e348 <__smakebuf_r+0x44>
 810e334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e338:	059a      	lsls	r2, r3, #22
 810e33a:	d4ef      	bmi.n	810e31c <__smakebuf_r+0x18>
 810e33c:	f023 0303 	bic.w	r3, r3, #3
 810e340:	f043 0302 	orr.w	r3, r3, #2
 810e344:	81a3      	strh	r3, [r4, #12]
 810e346:	e7e3      	b.n	810e310 <__smakebuf_r+0xc>
 810e348:	89a3      	ldrh	r3, [r4, #12]
 810e34a:	6020      	str	r0, [r4, #0]
 810e34c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810e350:	81a3      	strh	r3, [r4, #12]
 810e352:	9b00      	ldr	r3, [sp, #0]
 810e354:	6163      	str	r3, [r4, #20]
 810e356:	9b01      	ldr	r3, [sp, #4]
 810e358:	6120      	str	r0, [r4, #16]
 810e35a:	b15b      	cbz	r3, 810e374 <__smakebuf_r+0x70>
 810e35c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e360:	4630      	mov	r0, r6
 810e362:	f000 f81d 	bl	810e3a0 <_isatty_r>
 810e366:	b128      	cbz	r0, 810e374 <__smakebuf_r+0x70>
 810e368:	89a3      	ldrh	r3, [r4, #12]
 810e36a:	f023 0303 	bic.w	r3, r3, #3
 810e36e:	f043 0301 	orr.w	r3, r3, #1
 810e372:	81a3      	strh	r3, [r4, #12]
 810e374:	89a3      	ldrh	r3, [r4, #12]
 810e376:	431d      	orrs	r5, r3
 810e378:	81a5      	strh	r5, [r4, #12]
 810e37a:	e7cf      	b.n	810e31c <__smakebuf_r+0x18>

0810e37c <_fstat_r>:
 810e37c:	b538      	push	{r3, r4, r5, lr}
 810e37e:	4d07      	ldr	r5, [pc, #28]	; (810e39c <_fstat_r+0x20>)
 810e380:	2300      	movs	r3, #0
 810e382:	4604      	mov	r4, r0
 810e384:	4608      	mov	r0, r1
 810e386:	4611      	mov	r1, r2
 810e388:	602b      	str	r3, [r5, #0]
 810e38a:	f7f4 ffc2 	bl	8103312 <_fstat>
 810e38e:	1c43      	adds	r3, r0, #1
 810e390:	d102      	bne.n	810e398 <_fstat_r+0x1c>
 810e392:	682b      	ldr	r3, [r5, #0]
 810e394:	b103      	cbz	r3, 810e398 <_fstat_r+0x1c>
 810e396:	6023      	str	r3, [r4, #0]
 810e398:	bd38      	pop	{r3, r4, r5, pc}
 810e39a:	bf00      	nop
 810e39c:	100006a4 	.word	0x100006a4

0810e3a0 <_isatty_r>:
 810e3a0:	b538      	push	{r3, r4, r5, lr}
 810e3a2:	4d06      	ldr	r5, [pc, #24]	; (810e3bc <_isatty_r+0x1c>)
 810e3a4:	2300      	movs	r3, #0
 810e3a6:	4604      	mov	r4, r0
 810e3a8:	4608      	mov	r0, r1
 810e3aa:	602b      	str	r3, [r5, #0]
 810e3ac:	f7f4 ffc1 	bl	8103332 <_isatty>
 810e3b0:	1c43      	adds	r3, r0, #1
 810e3b2:	d102      	bne.n	810e3ba <_isatty_r+0x1a>
 810e3b4:	682b      	ldr	r3, [r5, #0]
 810e3b6:	b103      	cbz	r3, 810e3ba <_isatty_r+0x1a>
 810e3b8:	6023      	str	r3, [r4, #0]
 810e3ba:	bd38      	pop	{r3, r4, r5, pc}
 810e3bc:	100006a4 	.word	0x100006a4

0810e3c0 <abort>:
 810e3c0:	b508      	push	{r3, lr}
 810e3c2:	2006      	movs	r0, #6
 810e3c4:	f000 f834 	bl	810e430 <raise>
 810e3c8:	2001      	movs	r0, #1
 810e3ca:	f7f4 ff51 	bl	8103270 <_exit>

0810e3ce <_malloc_usable_size_r>:
 810e3ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810e3d2:	1f18      	subs	r0, r3, #4
 810e3d4:	2b00      	cmp	r3, #0
 810e3d6:	bfbc      	itt	lt
 810e3d8:	580b      	ldrlt	r3, [r1, r0]
 810e3da:	18c0      	addlt	r0, r0, r3
 810e3dc:	4770      	bx	lr

0810e3de <_raise_r>:
 810e3de:	291f      	cmp	r1, #31
 810e3e0:	b538      	push	{r3, r4, r5, lr}
 810e3e2:	4604      	mov	r4, r0
 810e3e4:	460d      	mov	r5, r1
 810e3e6:	d904      	bls.n	810e3f2 <_raise_r+0x14>
 810e3e8:	2316      	movs	r3, #22
 810e3ea:	6003      	str	r3, [r0, #0]
 810e3ec:	f04f 30ff 	mov.w	r0, #4294967295
 810e3f0:	bd38      	pop	{r3, r4, r5, pc}
 810e3f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 810e3f4:	b112      	cbz	r2, 810e3fc <_raise_r+0x1e>
 810e3f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810e3fa:	b94b      	cbnz	r3, 810e410 <_raise_r+0x32>
 810e3fc:	4620      	mov	r0, r4
 810e3fe:	f000 f831 	bl	810e464 <_getpid_r>
 810e402:	462a      	mov	r2, r5
 810e404:	4601      	mov	r1, r0
 810e406:	4620      	mov	r0, r4
 810e408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e40c:	f000 b818 	b.w	810e440 <_kill_r>
 810e410:	2b01      	cmp	r3, #1
 810e412:	d00a      	beq.n	810e42a <_raise_r+0x4c>
 810e414:	1c59      	adds	r1, r3, #1
 810e416:	d103      	bne.n	810e420 <_raise_r+0x42>
 810e418:	2316      	movs	r3, #22
 810e41a:	6003      	str	r3, [r0, #0]
 810e41c:	2001      	movs	r0, #1
 810e41e:	e7e7      	b.n	810e3f0 <_raise_r+0x12>
 810e420:	2400      	movs	r4, #0
 810e422:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810e426:	4628      	mov	r0, r5
 810e428:	4798      	blx	r3
 810e42a:	2000      	movs	r0, #0
 810e42c:	e7e0      	b.n	810e3f0 <_raise_r+0x12>
	...

0810e430 <raise>:
 810e430:	4b02      	ldr	r3, [pc, #8]	; (810e43c <raise+0xc>)
 810e432:	4601      	mov	r1, r0
 810e434:	6818      	ldr	r0, [r3, #0]
 810e436:	f7ff bfd2 	b.w	810e3de <_raise_r>
 810e43a:	bf00      	nop
 810e43c:	100000c8 	.word	0x100000c8

0810e440 <_kill_r>:
 810e440:	b538      	push	{r3, r4, r5, lr}
 810e442:	4d07      	ldr	r5, [pc, #28]	; (810e460 <_kill_r+0x20>)
 810e444:	2300      	movs	r3, #0
 810e446:	4604      	mov	r4, r0
 810e448:	4608      	mov	r0, r1
 810e44a:	4611      	mov	r1, r2
 810e44c:	602b      	str	r3, [r5, #0]
 810e44e:	f7f4 feff 	bl	8103250 <_kill>
 810e452:	1c43      	adds	r3, r0, #1
 810e454:	d102      	bne.n	810e45c <_kill_r+0x1c>
 810e456:	682b      	ldr	r3, [r5, #0]
 810e458:	b103      	cbz	r3, 810e45c <_kill_r+0x1c>
 810e45a:	6023      	str	r3, [r4, #0]
 810e45c:	bd38      	pop	{r3, r4, r5, pc}
 810e45e:	bf00      	nop
 810e460:	100006a4 	.word	0x100006a4

0810e464 <_getpid_r>:
 810e464:	f7f4 beec 	b.w	8103240 <_getpid>

0810e468 <sqrt>:
 810e468:	b538      	push	{r3, r4, r5, lr}
 810e46a:	ed2d 8b02 	vpush	{d8}
 810e46e:	ec55 4b10 	vmov	r4, r5, d0
 810e472:	f000 f825 	bl	810e4c0 <__ieee754_sqrt>
 810e476:	4622      	mov	r2, r4
 810e478:	462b      	mov	r3, r5
 810e47a:	4620      	mov	r0, r4
 810e47c:	4629      	mov	r1, r5
 810e47e:	eeb0 8a40 	vmov.f32	s16, s0
 810e482:	eef0 8a60 	vmov.f32	s17, s1
 810e486:	f7f2 fbd9 	bl	8100c3c <__aeabi_dcmpun>
 810e48a:	b990      	cbnz	r0, 810e4b2 <sqrt+0x4a>
 810e48c:	2200      	movs	r2, #0
 810e48e:	2300      	movs	r3, #0
 810e490:	4620      	mov	r0, r4
 810e492:	4629      	mov	r1, r5
 810e494:	f7f2 fbaa 	bl	8100bec <__aeabi_dcmplt>
 810e498:	b158      	cbz	r0, 810e4b2 <sqrt+0x4a>
 810e49a:	f7fc fbfb 	bl	810ac94 <__errno>
 810e49e:	2321      	movs	r3, #33	; 0x21
 810e4a0:	6003      	str	r3, [r0, #0]
 810e4a2:	2200      	movs	r2, #0
 810e4a4:	2300      	movs	r3, #0
 810e4a6:	4610      	mov	r0, r2
 810e4a8:	4619      	mov	r1, r3
 810e4aa:	f7f2 fa57 	bl	810095c <__aeabi_ddiv>
 810e4ae:	ec41 0b18 	vmov	d8, r0, r1
 810e4b2:	eeb0 0a48 	vmov.f32	s0, s16
 810e4b6:	eef0 0a68 	vmov.f32	s1, s17
 810e4ba:	ecbd 8b02 	vpop	{d8}
 810e4be:	bd38      	pop	{r3, r4, r5, pc}

0810e4c0 <__ieee754_sqrt>:
 810e4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e4c4:	ec55 4b10 	vmov	r4, r5, d0
 810e4c8:	4e67      	ldr	r6, [pc, #412]	; (810e668 <__ieee754_sqrt+0x1a8>)
 810e4ca:	43ae      	bics	r6, r5
 810e4cc:	ee10 0a10 	vmov	r0, s0
 810e4d0:	ee10 2a10 	vmov	r2, s0
 810e4d4:	4629      	mov	r1, r5
 810e4d6:	462b      	mov	r3, r5
 810e4d8:	d10d      	bne.n	810e4f6 <__ieee754_sqrt+0x36>
 810e4da:	f7f2 f915 	bl	8100708 <__aeabi_dmul>
 810e4de:	4602      	mov	r2, r0
 810e4e0:	460b      	mov	r3, r1
 810e4e2:	4620      	mov	r0, r4
 810e4e4:	4629      	mov	r1, r5
 810e4e6:	f7f1 ff59 	bl	810039c <__adddf3>
 810e4ea:	4604      	mov	r4, r0
 810e4ec:	460d      	mov	r5, r1
 810e4ee:	ec45 4b10 	vmov	d0, r4, r5
 810e4f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e4f6:	2d00      	cmp	r5, #0
 810e4f8:	dc0b      	bgt.n	810e512 <__ieee754_sqrt+0x52>
 810e4fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810e4fe:	4326      	orrs	r6, r4
 810e500:	d0f5      	beq.n	810e4ee <__ieee754_sqrt+0x2e>
 810e502:	b135      	cbz	r5, 810e512 <__ieee754_sqrt+0x52>
 810e504:	f7f1 ff48 	bl	8100398 <__aeabi_dsub>
 810e508:	4602      	mov	r2, r0
 810e50a:	460b      	mov	r3, r1
 810e50c:	f7f2 fa26 	bl	810095c <__aeabi_ddiv>
 810e510:	e7eb      	b.n	810e4ea <__ieee754_sqrt+0x2a>
 810e512:	1509      	asrs	r1, r1, #20
 810e514:	f000 808d 	beq.w	810e632 <__ieee754_sqrt+0x172>
 810e518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810e51c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 810e520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810e524:	07c9      	lsls	r1, r1, #31
 810e526:	bf5c      	itt	pl
 810e528:	005b      	lslpl	r3, r3, #1
 810e52a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 810e52e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e532:	bf58      	it	pl
 810e534:	0052      	lslpl	r2, r2, #1
 810e536:	2500      	movs	r5, #0
 810e538:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e53c:	1076      	asrs	r6, r6, #1
 810e53e:	0052      	lsls	r2, r2, #1
 810e540:	f04f 0e16 	mov.w	lr, #22
 810e544:	46ac      	mov	ip, r5
 810e546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810e54a:	eb0c 0001 	add.w	r0, ip, r1
 810e54e:	4298      	cmp	r0, r3
 810e550:	bfde      	ittt	le
 810e552:	1a1b      	suble	r3, r3, r0
 810e554:	eb00 0c01 	addle.w	ip, r0, r1
 810e558:	186d      	addle	r5, r5, r1
 810e55a:	005b      	lsls	r3, r3, #1
 810e55c:	f1be 0e01 	subs.w	lr, lr, #1
 810e560:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e564:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810e568:	ea4f 0242 	mov.w	r2, r2, lsl #1
 810e56c:	d1ed      	bne.n	810e54a <__ieee754_sqrt+0x8a>
 810e56e:	4674      	mov	r4, lr
 810e570:	2720      	movs	r7, #32
 810e572:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 810e576:	4563      	cmp	r3, ip
 810e578:	eb01 000e 	add.w	r0, r1, lr
 810e57c:	dc02      	bgt.n	810e584 <__ieee754_sqrt+0xc4>
 810e57e:	d113      	bne.n	810e5a8 <__ieee754_sqrt+0xe8>
 810e580:	4290      	cmp	r0, r2
 810e582:	d811      	bhi.n	810e5a8 <__ieee754_sqrt+0xe8>
 810e584:	2800      	cmp	r0, #0
 810e586:	eb00 0e01 	add.w	lr, r0, r1
 810e58a:	da57      	bge.n	810e63c <__ieee754_sqrt+0x17c>
 810e58c:	f1be 0f00 	cmp.w	lr, #0
 810e590:	db54      	blt.n	810e63c <__ieee754_sqrt+0x17c>
 810e592:	f10c 0801 	add.w	r8, ip, #1
 810e596:	eba3 030c 	sub.w	r3, r3, ip
 810e59a:	4290      	cmp	r0, r2
 810e59c:	bf88      	it	hi
 810e59e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 810e5a2:	1a12      	subs	r2, r2, r0
 810e5a4:	440c      	add	r4, r1
 810e5a6:	46c4      	mov	ip, r8
 810e5a8:	005b      	lsls	r3, r3, #1
 810e5aa:	3f01      	subs	r7, #1
 810e5ac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e5b0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810e5b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 810e5b8:	d1dd      	bne.n	810e576 <__ieee754_sqrt+0xb6>
 810e5ba:	4313      	orrs	r3, r2
 810e5bc:	d01b      	beq.n	810e5f6 <__ieee754_sqrt+0x136>
 810e5be:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 810e66c <__ieee754_sqrt+0x1ac>
 810e5c2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 810e670 <__ieee754_sqrt+0x1b0>
 810e5c6:	e9da 0100 	ldrd	r0, r1, [sl]
 810e5ca:	e9db 2300 	ldrd	r2, r3, [fp]
 810e5ce:	f7f1 fee3 	bl	8100398 <__aeabi_dsub>
 810e5d2:	e9da 8900 	ldrd	r8, r9, [sl]
 810e5d6:	4602      	mov	r2, r0
 810e5d8:	460b      	mov	r3, r1
 810e5da:	4640      	mov	r0, r8
 810e5dc:	4649      	mov	r1, r9
 810e5de:	f7f2 fb0f 	bl	8100c00 <__aeabi_dcmple>
 810e5e2:	b140      	cbz	r0, 810e5f6 <__ieee754_sqrt+0x136>
 810e5e4:	f1b4 3fff 	cmp.w	r4, #4294967295
 810e5e8:	e9da 0100 	ldrd	r0, r1, [sl]
 810e5ec:	e9db 2300 	ldrd	r2, r3, [fp]
 810e5f0:	d126      	bne.n	810e640 <__ieee754_sqrt+0x180>
 810e5f2:	3501      	adds	r5, #1
 810e5f4:	463c      	mov	r4, r7
 810e5f6:	106a      	asrs	r2, r5, #1
 810e5f8:	0863      	lsrs	r3, r4, #1
 810e5fa:	07e9      	lsls	r1, r5, #31
 810e5fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 810e600:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 810e604:	bf48      	it	mi
 810e606:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 810e60a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 810e60e:	461c      	mov	r4, r3
 810e610:	e76d      	b.n	810e4ee <__ieee754_sqrt+0x2e>
 810e612:	0ad3      	lsrs	r3, r2, #11
 810e614:	3815      	subs	r0, #21
 810e616:	0552      	lsls	r2, r2, #21
 810e618:	2b00      	cmp	r3, #0
 810e61a:	d0fa      	beq.n	810e612 <__ieee754_sqrt+0x152>
 810e61c:	02dc      	lsls	r4, r3, #11
 810e61e:	d50a      	bpl.n	810e636 <__ieee754_sqrt+0x176>
 810e620:	f1c1 0420 	rsb	r4, r1, #32
 810e624:	fa22 f404 	lsr.w	r4, r2, r4
 810e628:	1e4d      	subs	r5, r1, #1
 810e62a:	408a      	lsls	r2, r1
 810e62c:	4323      	orrs	r3, r4
 810e62e:	1b41      	subs	r1, r0, r5
 810e630:	e772      	b.n	810e518 <__ieee754_sqrt+0x58>
 810e632:	4608      	mov	r0, r1
 810e634:	e7f0      	b.n	810e618 <__ieee754_sqrt+0x158>
 810e636:	005b      	lsls	r3, r3, #1
 810e638:	3101      	adds	r1, #1
 810e63a:	e7ef      	b.n	810e61c <__ieee754_sqrt+0x15c>
 810e63c:	46e0      	mov	r8, ip
 810e63e:	e7aa      	b.n	810e596 <__ieee754_sqrt+0xd6>
 810e640:	f7f1 feac 	bl	810039c <__adddf3>
 810e644:	e9da 8900 	ldrd	r8, r9, [sl]
 810e648:	4602      	mov	r2, r0
 810e64a:	460b      	mov	r3, r1
 810e64c:	4640      	mov	r0, r8
 810e64e:	4649      	mov	r1, r9
 810e650:	f7f2 facc 	bl	8100bec <__aeabi_dcmplt>
 810e654:	b120      	cbz	r0, 810e660 <__ieee754_sqrt+0x1a0>
 810e656:	1ca0      	adds	r0, r4, #2
 810e658:	bf08      	it	eq
 810e65a:	3501      	addeq	r5, #1
 810e65c:	3402      	adds	r4, #2
 810e65e:	e7ca      	b.n	810e5f6 <__ieee754_sqrt+0x136>
 810e660:	3401      	adds	r4, #1
 810e662:	f024 0401 	bic.w	r4, r4, #1
 810e666:	e7c6      	b.n	810e5f6 <__ieee754_sqrt+0x136>
 810e668:	7ff00000 	.word	0x7ff00000
 810e66c:	10000238 	.word	0x10000238
 810e670:	10000240 	.word	0x10000240

0810e674 <_init>:
 810e674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e676:	bf00      	nop
 810e678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e67a:	bc08      	pop	{r3}
 810e67c:	469e      	mov	lr, r3
 810e67e:	4770      	bx	lr

0810e680 <_fini>:
 810e680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e682:	bf00      	nop
 810e684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e686:	bc08      	pop	{r3}
 810e688:	469e      	mov	lr, r3
 810e68a:	4770      	bx	lr
